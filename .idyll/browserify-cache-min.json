{"modules":{"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js","source":"/*\n React v16.0.0\n react.production.min.js\n\n Copyright (c) 2013-present, Facebook, Inc.\n\n This source code is licensed under the MIT license found in the\n LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction y() {\n  function q() {}function n(a, b, c, d, e, f, g) {\n    return { $$typeof: J, type: a, key: b, ref: c, props: g, _owner: f };\n  }function z(a) {\n    for (var b = arguments.length - 1, c = \"Minified React error #\" + a + \"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\\x3d\" + a, d = 0; d < b; d++) {\n      c += \"\\x26args[]\\x3d\" + encodeURIComponent(arguments[d + 1]);\n    }b = Error(c + \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\");b.name = \"Invariant Violation\";b.framesToPop = 1;throw b;\n  }function r(a, b, c) {\n    this.props = a;this.context = b;this.refs = A;this.updater = c || B;\n  }function C(a, b, c) {\n    this.props = a;this.context = b;this.refs = A;this.updater = c || B;\n  }function D() {}function E(a, b, c) {\n    this.props = a;this.context = b;this.refs = A;this.updater = c || B;\n  }function v(a) {\n    return function () {\n      return a;\n    };\n  }function R(a) {\n    var b = { \"\\x3d\": \"\\x3d0\", \":\": \"\\x3d2\" };return \"$\" + (\"\" + a).replace(/[=:]/g, function (a) {\n      return b[a];\n    });\n  }function K(a, b, c, d) {\n    if (w.length) {\n      var e = w.pop();e.result = a;e.keyPrefix = b;e.func = c;e.context = d;e.count = 0;return e;\n    }return { result: a, keyPrefix: b, func: c, context: d, count: 0 };\n  }function L(a) {\n    a.result = null;a.keyPrefix = null;a.func = null;a.context = null;a.count = 0;10 > w.length && w.push(a);\n  }function u(a, b, c, d) {\n    var e = typeof a === \"undefined\" ? \"undefined\" : _typeof(a);if (\"undefined\" === e || \"boolean\" === e) a = null;if (null === a || \"string\" === e || \"number\" === e || \"object\" === e && a.$$typeof === S) return c(d, a, \"\" === b ? \".\" + F(a, 0) : b), 1;var f = 0;b = \"\" === b ? \".\" : b + \":\";if (Array.isArray(a)) for (var g = 0; g < a.length; g++) {\n      e = a[g];var h = b + F(e, g);f += u(e, h, c, d);\n    } else if (h = M && a[M] || a[\"@@iterator\"], \"function\" === typeof h) for (a = h.call(a), g = 0; !(e = a.next()).done;) {\n      e = e.value, h = b + F(e, g++), f += u(e, h, c, d);\n    } else \"object\" === e && (c = \"\" + a, z(\"31\", \"[object Object]\" === c ? \"object with keys {\" + Object.keys(a).join(\", \") + \"}\" : c, \"\"));return f;\n  }function F(a, b) {\n    return \"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && null !== a && null != a.key ? R(a.key) : b.toString(36);\n  }function T(a, b) {\n    a.func.call(a.context, b, a.count++);\n  }function U(a, b, c) {\n    var d = a.result,\n        e = a.keyPrefix;a = a.func.call(a.context, b, a.count++);Array.isArray(a) ? G(a, d, c, H.thatReturnsArgument) : null != a && (t.isValidElement(a) && (a = t.cloneAndReplaceKey(a, e + (!a.key || b && b.key === a.key ? \"\" : (\"\" + a.key).replace(N, \"$\\x26/\") + \"/\") + c)), d.push(a));\n  }function G(a, b, c, d, e) {\n    var f = \"\";null != c && (f = (\"\" + c).replace(N, \"$\\x26/\") + \"/\");b = K(b, f, d, e);null == a || u(a, \"\", U, b);L(b);\n  }var O = Object.getOwnPropertySymbols,\n      V = Object.prototype.hasOwnProperty,\n      W = Object.prototype.propertyIsEnumerable,\n      x = function () {\n    try {\n      if (!Object.assign) return !1;var a = new String(\"abc\");a[5] = \"de\";if (\"5\" === Object.getOwnPropertyNames(a)[0]) return !1;var b = {};for (a = 0; 10 > a; a++) {\n        b[\"_\" + String.fromCharCode(a)] = a;\n      }if (\"0123456789\" !== Object.getOwnPropertyNames(b).map(function (a) {\n        return b[a];\n      }).join(\"\")) return !1;var c = {};\"abcdefghijklmnopqrst\".split(\"\").forEach(function (a) {\n        c[a] = a;\n      });return \"abcdefghijklmnopqrst\" !== Object.keys(Object.assign({}, c)).join(\"\") ? !1 : !0;\n    } catch (d) {\n      return !1;\n    }\n  }() ? Object.assign : function (a, b) {\n    if (null === a || void 0 === a) throw new TypeError(\"Object.assign cannot be called with null or undefined\");var c = Object(a);for (var d, e = 1; e < arguments.length; e++) {\n      var f = Object(arguments[e]);for (var g in f) {\n        V.call(f, g) && (c[g] = f[g]);\n      }if (O) {\n        d = O(f);for (var h = 0; h < d.length; h++) {\n          W.call(f, d[h]) && (c[d[h]] = f[d[h]]);\n        }\n      }\n    }return c;\n  },\n      B = { isMounted: function isMounted() {\n      return !1;\n    }, enqueueForceUpdate: function enqueueForceUpdate() {}, enqueueReplaceState: function enqueueReplaceState() {}, enqueueSetState: function enqueueSetState() {} },\n      A = {};r.prototype.isReactComponent = {};r.prototype.setState = function (a, b) {\n    \"object\" !== (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && \"function\" !== typeof a && null != a ? z(\"85\") : void 0;this.updater.enqueueSetState(this, a, b, \"setState\");\n  };r.prototype.forceUpdate = function (a) {\n    this.updater.enqueueForceUpdate(this, a, \"forceUpdate\");\n  };\n  D.prototype = r.prototype;var k = C.prototype = new D();k.constructor = C;x(k, r.prototype);k.isPureReactComponent = !0;k = E.prototype = new D();k.constructor = E;x(k, r.prototype);k.unstable_isAsyncReactComponent = !0;k.render = function () {\n    return this.props.children;\n  };var I = { current: null },\n      P = Object.prototype.hasOwnProperty,\n      J = \"function\" === typeof Symbol && Symbol[\"for\"] && Symbol[\"for\"](\"react.element\") || 60103,\n      Q = { key: !0, ref: !0, __self: !0, __source: !0 };n.createElement = function (a, b, c) {\n    var d,\n        e = {},\n        f = null,\n        g = null,\n        h = null,\n        k = null;if (null != b) for (d in void 0 !== b.ref && (g = b.ref), void 0 !== b.key && (f = \"\" + b.key), h = void 0 === b.__self ? null : b.__self, k = void 0 === b.__source ? null : b.__source, b) {\n      P.call(b, d) && !Q.hasOwnProperty(d) && (e[d] = b[d]);\n    }var m = arguments.length - 2;if (1 === m) e.children = c;else if (1 < m) {\n      for (var l = Array(m), p = 0; p < m; p++) {\n        l[p] = arguments[p + 2];\n      }e.children = l;\n    }if (a && a.defaultProps) for (d in m = a.defaultProps, m) {\n      void 0 === e[d] && (e[d] = m[d]);\n    }return n(a, f, g, h, k, I.current, e);\n  };n.createFactory = function (a) {\n    var b = n.createElement.bind(null, a);b.type = a;return b;\n  };\n  n.cloneAndReplaceKey = function (a, b) {\n    return n(a.type, b, a.ref, a._self, a._source, a._owner, a.props);\n  };n.cloneElement = function (a, b, c) {\n    var d = x({}, a.props),\n        e = a.key,\n        f = a.ref,\n        g = a._self,\n        h = a._source,\n        k = a._owner;if (null != b) {\n      void 0 !== b.ref && (f = b.ref, k = I.current);void 0 !== b.key && (e = \"\" + b.key);if (a.type && a.type.defaultProps) var m = a.type.defaultProps;for (l in b) {\n        P.call(b, l) && !Q.hasOwnProperty(l) && (d[l] = void 0 === b[l] && void 0 !== m ? m[l] : b[l]);\n      }\n    }var l = arguments.length - 2;if (1 === l) d.children = c;else if (1 < l) {\n      m = Array(l);for (var p = 0; p < l; p++) {\n        m[p] = arguments[p + 2];\n      }d.children = m;\n    }return n(a.type, e, f, g, h, k, d);\n  };n.isValidElement = function (a) {\n    return \"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && null !== a && a.$$typeof === J;\n  };var t = n;q.thatReturns = v;q.thatReturnsFalse = v(!1);q.thatReturnsTrue = v(!0);q.thatReturnsNull = v(null);q.thatReturnsThis = function () {\n    return this;\n  };q.thatReturnsArgument = function (a) {\n    return a;\n  };var H = q,\n      M = \"function\" === typeof Symbol && Symbol.iterator,\n      S = \"function\" === typeof Symbol && Symbol[\"for\"] && Symbol[\"for\"](\"react.element\") || 60103,\n      N = /\\/+/g,\n      w = [];return { Children: { map: function map(a, b, c) {\n        if (null == a) return a;var d = [];G(a, d, null, b, c);return d;\n      }, forEach: function forEach(a, b, c) {\n        if (null == a) return a;b = K(null, null, b, c);null == a || u(a, \"\", T, b);L(b);\n      }, count: function count(a) {\n        return null == a ? 0 : u(a, \"\", H.thatReturnsNull, null);\n      }, toArray: function toArray(a) {\n        var b = [];G(a, b, null, H.thatReturnsArgument);return b;\n      }, only: function only(a) {\n        t.isValidElement(a) ? void 0 : z(\"143\");return a;\n      } }, Component: r, PureComponent: C, unstable_AsyncComponent: E, createElement: t.createElement, cloneElement: t.cloneElement, isValidElement: t.isValidElement, createFactory: t.createFactory,\n    version: \"16.0.0\", __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentOwner: I, assign: x } };\n}\"object\" === (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"undefined\" !== typeof module ? module.exports = y() : \"function\" === typeof define && define.amd ? define(y) : undefined.React = y();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_1.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_1.js","source":"\"use strict\";\n\nmodule.exports = [[\"Header\", [[\"title\", [\"value\", \"Idyll Walkthrough\"]], [\"subtitle\", [\"value\", \"University of Washington CSE 442 Tutorial\"]], [\"author\", [\"value\", \"Matthew Conlen\"]], [\"authorLink\", [\"value\", \"https://twitter.com/mathisonian\"]]], []], [\"h1\", [], [\"A custom D\", \"3\", \" component\"]], [\"data\", [[\"name\", [\"value\", \"myData\"]], [\"source\", [\"value\", \"data.json\"]]], []], [\"var\", [[\"name\", [\"value\", \"x\"]], [\"value\", [\"value\", \"sepalLength\"]]], []], [\"var\", [[\"name\", [\"value\", \"y\"]], [\"value\", [\"value\", \"petalLength\"]]], []], [\"var\", [[\"name\", [\"value\", \"color\"]], [\"value\", [\"value\", \"steelblue\"]]], []], [\"p\", [], [\"X: \", [\"Select\", [[\"value\", [\"variable\", \"x\"]], [\"options\", [\"expression\", \"[\\\"sepalLength\\\", \\\"sepalWidth\\\"]\"]]], []], \"\\nY: \", [\"Select\", [[\"value\", [\"variable\", \"y\"]], [\"options\", [\"expression\", \"[\\\"petalLength\\\", \\\"petalWidth\\\"]\"]]], []]]], [\"p\", [], [\"Fill Color: \", [\"TextInput\", [[\"value\", [\"variable\", \"color\"]]], []]]], [\"MyD3Component\", [[\"data\", [\"variable\", \"myData\"]], [\"x\", [\"variable\", \"x\"]], [\"y\", [\"variable\", \"y\"]], [\"color\", [\"variable\", \"color\"]]], []], [\"h1\", [], [\"A custom React component\"]], [\"var\", [[\"name\", [\"value\", \"columns\"]], [\"value\", [\"value\", 8]]], []], [\"var\", [[\"name\", [\"value\", \"totalElements\"]], [\"value\", [\"value\", \"50\"]]], []], [\"p\", [], [\"Columns:\", [\"br\", [], []], [\"Range\", [[\"value\", [\"variable\", \"columns\"]], [\"min\", [\"value\", 2]], [\"max\", [\"value\", 15]]], []]]], [\"p\", [], [\"Total Elements:\", [\"br\", [], []], [\"Range\", [[\"value\", [\"variable\", \"totalElements\"]], [\"min\", [\"value\", 2]], [\"max\", [\"value\", 100]]], []]]], [\"CustomComponent\", [[\"columns\", [\"variable\", \"columns\"]], [\"totalElements\", [\"variable\", \"totalElements\"]]], []]];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdHJlYW1fMS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCLENBQUMsQ0FBQyxRQUFELEVBQVUsQ0FBQyxDQUFDLE9BQUQsRUFBUyxDQUFDLE9BQUQsRUFBUyxtQkFBVCxDQUFULENBQUQsRUFBeUMsQ0FBQyxVQUFELEVBQVksQ0FBQyxPQUFELEVBQVMsMkNBQVQsQ0FBWixDQUF6QyxFQUE0RyxDQUFDLFFBQUQsRUFBVSxDQUFDLE9BQUQsRUFBUyxnQkFBVCxDQUFWLENBQTVHLEVBQWtKLENBQUMsWUFBRCxFQUFjLENBQUMsT0FBRCxFQUFTLGlDQUFULENBQWQsQ0FBbEosQ0FBVixFQUF3TixFQUF4TixDQUFELEVBQTZOLENBQUMsSUFBRCxFQUFNLEVBQU4sRUFBUyxDQUFDLFlBQUQsRUFBYyxHQUFkLEVBQWtCLFlBQWxCLENBQVQsQ0FBN04sRUFBdVEsQ0FBQyxNQUFELEVBQVEsQ0FBQyxDQUFDLE1BQUQsRUFBUSxDQUFDLE9BQUQsRUFBUyxRQUFULENBQVIsQ0FBRCxFQUE2QixDQUFDLFFBQUQsRUFBVSxDQUFDLE9BQUQsRUFBUyxXQUFULENBQVYsQ0FBN0IsQ0FBUixFQUF1RSxFQUF2RSxDQUF2USxFQUFrVixDQUFDLEtBQUQsRUFBTyxDQUFDLENBQUMsTUFBRCxFQUFRLENBQUMsT0FBRCxFQUFTLEdBQVQsQ0FBUixDQUFELEVBQXdCLENBQUMsT0FBRCxFQUFTLENBQUMsT0FBRCxFQUFTLGFBQVQsQ0FBVCxDQUF4QixDQUFQLEVBQWtFLEVBQWxFLENBQWxWLEVBQXdaLENBQUMsS0FBRCxFQUFPLENBQUMsQ0FBQyxNQUFELEVBQVEsQ0FBQyxPQUFELEVBQVMsR0FBVCxDQUFSLENBQUQsRUFBd0IsQ0FBQyxPQUFELEVBQVMsQ0FBQyxPQUFELEVBQVMsYUFBVCxDQUFULENBQXhCLENBQVAsRUFBa0UsRUFBbEUsQ0FBeFosRUFBOGQsQ0FBQyxLQUFELEVBQU8sQ0FBQyxDQUFD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QyxDQUFSLENBQTl3QyxFQUF3NUMsQ0FBQyxpQkFBRCxFQUFtQixDQUFDLENBQUMsU0FBRCxFQUFXLENBQUMsVUFBRCxFQUFZLFNBQVosQ0FBWCxDQUFELEVBQW9DLENBQUMsZUFBRCxFQUFpQixDQUFDLFVBQUQsRUFBWSxlQUFaLENBQWpCLENBQXBDLENBQW5CLEVBQXVHLEVBQXZHLENBQXg1QyxDQUFqQiIsImZpbGUiOiJfc3RyZWFtXzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFtbXCJIZWFkZXJcIixbW1widGl0bGVcIixbXCJ2YWx1ZVwiLFwiSWR5bGwgV2Fsa3Rocm91Z2hcIl1dLFtcInN1YnRpdGxlXCIsW1widmFsdWVcIixcIlVuaXZlcnNpdHkgb2YgV2FzaGluZ3RvbiBDU0UgNDQyIFR1dG9yaWFsXCJdXSxbXCJhdXRob3JcIixbXCJ2YWx1ZVwiLFwiTWF0dGhldyBDb25sZW5cIl1dLFtcImF1dGhvckxpbmtcIixbXCJ2YWx1ZVwiLFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9tYXRoaXNvbmlhblwiXV1dLFtdXSxbXCJoMVwiLFtdLFtcIkEgY3VzdG9tIERcIixcIjNcIixcIiBjb21wb25lbnRcIl1dLFtcImRhdGFcIixbW1wibmFtZVwiLFtcInZhbHVlXCIsXCJteURhdGFcIl1dLFtcInNvdXJjZVwiLFtcInZhbHVlXCIsXCJkYXRhLmpzb25cIl1dXSxbXV0sW1widmFyXCIsW1tcIm5hbWVcIixbXCJ2YWx1ZVwiLFwieFwiXV0sW1widmFsdWVcIixbXCJ2YWx1ZVwiLFwic2VwYWxMZW5ndGhcIl1dXSxbXV0sW1widmFyXCIsW1tcIm5hbWVcIixbXCJ2YWx1ZVwiLFwieVwiXV0sW1widmFsdWVcIixbXCJ2YWx1ZVwiLFwicGV0YWxMZW5ndGhcIl1dXSxbXV0sW1widmFyXCIsW1tcIm5hbWVcIixbXCJ2YWx1ZVwiLFwiY29sb3JcIl1dLFtcInZhbHVlXCIsW1widmFsdWVcIixcInN0ZWVsYmx1ZVwiXV1dLFtdXSxbXCJwXCIsW10sW1wiWDogXCIsW1wiU2VsZWN0XCIsW1tcInZhbHVlXCIsW1widmFyaWFibGVcIixcInhcIl1dLFtcIm9wdGlvbnNcIixbXCJleHByZXNzaW9uXCIsXCJbXFxcInNlcGFsTGVuZ3RoXFxcIiwgXFxcInNlcGFsV2lkdGhcXFwiXVwiXV1dLFtdXSxcIlxcblk6IFwiLFtcIlNlbGVjdFwiLFtbXCJ2YWx1ZVwiLFtcInZhcmlhYmxlXCIsXCJ5XCJdXSxbXCJvcHRpb25zXCIsW1wiZXhwcmVzc2lvblwiLFwiW1xcXCJwZXRhbExlbmd0aFxcXCIsIFxcXCJwZXRhbFdpZHRoXFxcIl1cIl1dXSxbXV1dXSxbXCJwXCIsW10sW1wiRmlsbCBDb2xvcjogXCIsW1wiVGV4dElucHV0XCIsW1tcInZhbHVlXCIsW1widmFyaWFibGVcIixcImNvbG9yXCJdXV0sW11dXV0sW1wiTXlEM0NvbXBvbmVudFwiLFtbXCJkYXRhXCIsW1widmFyaWFibGVcIixcIm15RGF0YVwiXV0sW1wieFwiLFtcInZhcmlhYmxlXCIsXCJ4XCJdXSxbXCJ5XCIsW1widmFyaWFibGVcIixcInlcIl1dLFtcImNvbG9yXCIsW1widmFyaWFibGVcIixcImNvbG9yXCJdXV0sW11dLFtcImgxXCIsW10sW1wiQSBjdXN0b20gUmVhY3QgY29tcG9uZW50XCJdXSxbXCJ2YXJcIixbW1wibmFtZVwiLFtcInZhbHVlXCIsXCJjb2x1bW5zXCJdXSxbXCJ2YWx1ZVwiLFtcInZhbHVlXCIsOF1dXSxbXV0sW1widmFyXCIsW1tcIm5hbWVcIixbXCJ2YWx1ZVwiLFwidG90YWxFbGVtZW50c1wiXV0sW1widmFsdWVcIixbXCJ2YWx1ZVwiLFwiNTBcIl1dXSxbXV0sW1wicFwiLFtdLFtcIkNvbHVtbnM6XCIsW1wiYnJcIixbXSxbXV0sW1wiUmFuZ2VcIixbW1widmFsdWVcIixbXCJ2YXJpYWJsZVwiLFwiY29sdW1uc1wiXV0sW1wibWluXCIsW1widmFsdWVcIiwyXV0sW1wibWF4XCIsW1widmFsdWVcIiwxNV1dXSxbXV1dXSxbXCJwXCIsW10sW1wiVG90YWwgRWxlbWVudHM6XCIsW1wiYnJcIixbXSxbXV0sW1wiUmFuZ2VcIixbW1widmFsdWVcIixbXCJ2YXJpYWJsZVwiLFwidG90YWxFbGVtZW50c1wiXV0sW1wibWluXCIsW1widmFsdWVcIiwyXV0sW1wibWF4XCIsW1widmFsdWVcIiwxMDBdXV0sW11dXV0sW1wiQ3VzdG9tQ29tcG9uZW50XCIsW1tcImNvbHVtbnNcIixbXCJ2YXJpYWJsZVwiLFwiY29sdW1uc1wiXV0sW1widG90YWxFbGVtZW50c1wiLFtcInZhcmlhYmxlXCIsXCJ0b3RhbEVsZW1lbnRzXCJdXV0sW11dXSJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_4.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_4.js","source":"\"use strict\";\n\nmodule.exports = function () {}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdHJlYW1fNC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWtCLFlBQVcsQ0FBRyxDQUFmLEVBQWpCIiwiZmlsZSI6Il9zdHJlYW1fNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpeyB9KSgpIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_3.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_3.js","source":"\"use strict\";\n\nmodule.exports = { \"myData\": [{ \"sepalLength\": 5.1, \"sepalWidth\": 3.5, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.9, \"sepalWidth\": 3, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.7, \"sepalWidth\": 3.2, \"petalLength\": 1.3, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.6, \"sepalWidth\": 3.1, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5, \"sepalWidth\": 3.6, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5.4, \"sepalWidth\": 3.9, \"petalLength\": 1.7, \"petalWidth\": 0.4, \"species\": \"setosa\" }, { \"sepalLength\": 4.6, \"sepalWidth\": 3.4, \"petalLength\": 1.4, \"petalWidth\": 0.3, \"species\": \"setosa\" }, { \"sepalLength\": 5, \"sepalWidth\": 3.4, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.4, \"sepalWidth\": 2.9, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.9, \"sepalWidth\": 3.1, \"petalLength\": 1.5, \"petalWidth\": 0.1, \"species\": \"setosa\" }, { \"sepalLength\": 5.4, \"sepalWidth\": 3.7, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.8, \"sepalWidth\": 3.4, \"petalLength\": 1.6, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.8, \"sepalWidth\": 3, \"petalLength\": 1.4, \"petalWidth\": 0.1, \"species\": \"setosa\" }, { \"sepalLength\": 4.3, \"sepalWidth\": 3, \"petalLength\": 1.1, \"petalWidth\": 0.1, \"species\": \"setosa\" }, { \"sepalLength\": 5.8, \"sepalWidth\": 4, \"petalLength\": 1.2, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5.7, \"sepalWidth\": 4.4, \"petalLength\": 1.5, \"petalWidth\": 0.4, \"species\": \"setosa\" }, { \"sepalLength\": 5.4, \"sepalWidth\": 3.9, \"petalLength\": 1.3, \"petalWidth\": 0.4, \"species\": \"setosa\" }, { \"sepalLength\": 5.1, \"sepalWidth\": 3.5, \"petalLength\": 1.4, \"petalWidth\": 0.3, \"species\": \"setosa\" }, { \"sepalLength\": 5.7, \"sepalWidth\": 3.8, \"petalLength\": 1.7, \"petalWidth\": 0.3, \"species\": \"setosa\" }, { \"sepalLength\": 5.1, \"sepalWidth\": 3.8, \"petalLength\": 1.5, \"petalWidth\": 0.3, \"species\": \"setosa\" }, { \"sepalLength\": 5.4, \"sepalWidth\": 3.4, \"petalLength\": 1.7, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5.1, \"sepalWidth\": 3.7, \"petalLength\": 1.5, \"petalWidth\": 0.4, \"species\": \"setosa\" }, { \"sepalLength\": 4.6, \"sepalWidth\": 3.6, \"petalLength\": 1, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5.1, \"sepalWidth\": 3.3, \"petalLength\": 1.7, \"petalWidth\": 0.5, \"species\": \"setosa\" }, { \"sepalLength\": 4.8, \"sepalWidth\": 3.4, \"petalLength\": 1.9, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5, \"sepalWidth\": 3, \"petalLength\": 1.6, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5, \"sepalWidth\": 3.4, \"petalLength\": 1.6, \"petalWidth\": 0.4, \"species\": \"setosa\" }, { \"sepalLength\": 5.2, \"sepalWidth\": 3.5, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5.2, \"sepalWidth\": 3.4, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.7, \"sepalWidth\": 3.2, \"petalLength\": 1.6, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.8, \"sepalWidth\": 3.1, \"petalLength\": 1.6, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5.4, \"sepalWidth\": 3.4, \"petalLength\": 1.5, \"petalWidth\": 0.4, \"species\": \"setosa\" }, { \"sepalLength\": 5.2, \"sepalWidth\": 4.1, \"petalLength\": 1.5, \"petalWidth\": 0.1, \"species\": \"setosa\" }, { \"sepalLength\": 5.5, \"sepalWidth\": 4.2, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.9, \"sepalWidth\": 3.1, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5, \"sepalWidth\": 3.2, \"petalLength\": 1.2, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5.5, \"sepalWidth\": 3.5, \"petalLength\": 1.3, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.9, \"sepalWidth\": 3.6, \"petalLength\": 1.4, \"petalWidth\": 0.1, \"species\": \"setosa\" }, { \"sepalLength\": 4.4, \"sepalWidth\": 3, \"petalLength\": 1.3, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5.1, \"sepalWidth\": 3.4, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5, \"sepalWidth\": 3.5, \"petalLength\": 1.3, \"petalWidth\": 0.3, \"species\": \"setosa\" }, { \"sepalLength\": 4.5, \"sepalWidth\": 2.3, \"petalLength\": 1.3, \"petalWidth\": 0.3, \"species\": \"setosa\" }, { \"sepalLength\": 4.4, \"sepalWidth\": 3.2, \"petalLength\": 1.3, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5, \"sepalWidth\": 3.5, \"petalLength\": 1.6, \"petalWidth\": 0.6, \"species\": \"setosa\" }, { \"sepalLength\": 5.1, \"sepalWidth\": 3.8, \"petalLength\": 1.9, \"petalWidth\": 0.4, \"species\": \"setosa\" }, { \"sepalLength\": 4.8, \"sepalWidth\": 3, \"petalLength\": 1.4, \"petalWidth\": 0.3, \"species\": \"setosa\" }, { \"sepalLength\": 5.1, \"sepalWidth\": 3.8, \"petalLength\": 1.6, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 4.6, \"sepalWidth\": 3.2, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5.3, \"sepalWidth\": 3.7, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 5, \"sepalWidth\": 3.3, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\" }, { \"sepalLength\": 7, \"sepalWidth\": 3.2, \"petalLength\": 4.7, \"petalWidth\": 1.4, \"species\": \"versicolor\" }, { \"sepalLength\": 6.4, \"sepalWidth\": 3.2, \"petalLength\": 4.5, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 6.9, \"sepalWidth\": 3.1, \"petalLength\": 4.9, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 5.5, \"sepalWidth\": 2.3, \"petalLength\": 4, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 6.5, \"sepalWidth\": 2.8, \"petalLength\": 4.6, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 5.7, \"sepalWidth\": 2.8, \"petalLength\": 4.5, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 6.3, \"sepalWidth\": 3.3, \"petalLength\": 4.7, \"petalWidth\": 1.6, \"species\": \"versicolor\" }, { \"sepalLength\": 4.9, \"sepalWidth\": 2.4, \"petalLength\": 3.3, \"petalWidth\": 1, \"species\": \"versicolor\" }, { \"sepalLength\": 6.6, \"sepalWidth\": 2.9, \"petalLength\": 4.6, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 5.2, \"sepalWidth\": 2.7, \"petalLength\": 3.9, \"petalWidth\": 1.4, \"species\": \"versicolor\" }, { \"sepalLength\": 5, \"sepalWidth\": 2, \"petalLength\": 3.5, \"petalWidth\": 1, \"species\": \"versicolor\" }, { \"sepalLength\": 5.9, \"sepalWidth\": 3, \"petalLength\": 4.2, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 6, \"sepalWidth\": 2.2, \"petalLength\": 4, \"petalWidth\": 1, \"species\": \"versicolor\" }, { \"sepalLength\": 6.1, \"sepalWidth\": 2.9, \"petalLength\": 4.7, \"petalWidth\": 1.4, \"species\": \"versicolor\" }, { \"sepalLength\": 5.6, \"sepalWidth\": 2.9, \"petalLength\": 3.6, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 6.7, \"sepalWidth\": 3.1, \"petalLength\": 4.4, \"petalWidth\": 1.4, \"species\": \"versicolor\" }, { \"sepalLength\": 5.6, \"sepalWidth\": 3, \"petalLength\": 4.5, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 5.8, \"sepalWidth\": 2.7, \"petalLength\": 4.1, \"petalWidth\": 1, \"species\": \"versicolor\" }, { \"sepalLength\": 6.2, \"sepalWidth\": 2.2, \"petalLength\": 4.5, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 5.6, \"sepalWidth\": 2.5, \"petalLength\": 3.9, \"petalWidth\": 1.1, \"species\": \"versicolor\" }, { \"sepalLength\": 5.9, \"sepalWidth\": 3.2, \"petalLength\": 4.8, \"petalWidth\": 1.8, \"species\": \"versicolor\" }, { \"sepalLength\": 6.1, \"sepalWidth\": 2.8, \"petalLength\": 4, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 6.3, \"sepalWidth\": 2.5, \"petalLength\": 4.9, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 6.1, \"sepalWidth\": 2.8, \"petalLength\": 4.7, \"petalWidth\": 1.2, \"species\": \"versicolor\" }, { \"sepalLength\": 6.4, \"sepalWidth\": 2.9, \"petalLength\": 4.3, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 6.6, \"sepalWidth\": 3, \"petalLength\": 4.4, \"petalWidth\": 1.4, \"species\": \"versicolor\" }, { \"sepalLength\": 6.8, \"sepalWidth\": 2.8, \"petalLength\": 4.8, \"petalWidth\": 1.4, \"species\": \"versicolor\" }, { \"sepalLength\": 6.7, \"sepalWidth\": 3, \"petalLength\": 5, \"petalWidth\": 1.7, \"species\": \"versicolor\" }, { \"sepalLength\": 6, \"sepalWidth\": 2.9, \"petalLength\": 4.5, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 5.7, \"sepalWidth\": 2.6, \"petalLength\": 3.5, \"petalWidth\": 1, \"species\": \"versicolor\" }, { \"sepalLength\": 5.5, \"sepalWidth\": 2.4, \"petalLength\": 3.8, \"petalWidth\": 1.1, \"species\": \"versicolor\" }, { \"sepalLength\": 5.5, \"sepalWidth\": 2.4, \"petalLength\": 3.7, \"petalWidth\": 1, \"species\": \"versicolor\" }, { \"sepalLength\": 5.8, \"sepalWidth\": 2.7, \"petalLength\": 3.9, \"petalWidth\": 1.2, \"species\": \"versicolor\" }, { \"sepalLength\": 6, \"sepalWidth\": 2.7, \"petalLength\": 5.1, \"petalWidth\": 1.6, \"species\": \"versicolor\" }, { \"sepalLength\": 5.4, \"sepalWidth\": 3, \"petalLength\": 4.5, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 6, \"sepalWidth\": 3.4, \"petalLength\": 4.5, \"petalWidth\": 1.6, \"species\": \"versicolor\" }, { \"sepalLength\": 6.7, \"sepalWidth\": 3.1, \"petalLength\": 4.7, \"petalWidth\": 1.5, \"species\": \"versicolor\" }, { \"sepalLength\": 6.3, \"sepalWidth\": 2.3, \"petalLength\": 4.4, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 5.6, \"sepalWidth\": 3, \"petalLength\": 4.1, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 5.5, \"sepalWidth\": 2.5, \"petalLength\": 4, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 5.5, \"sepalWidth\": 2.6, \"petalLength\": 4.4, \"petalWidth\": 1.2, \"species\": \"versicolor\" }, { \"sepalLength\": 6.1, \"sepalWidth\": 3, \"petalLength\": 4.6, \"petalWidth\": 1.4, \"species\": \"versicolor\" }, { \"sepalLength\": 5.8, \"sepalWidth\": 2.6, \"petalLength\": 4, \"petalWidth\": 1.2, \"species\": \"versicolor\" }, { \"sepalLength\": 5, \"sepalWidth\": 2.3, \"petalLength\": 3.3, \"petalWidth\": 1, \"species\": \"versicolor\" }, { \"sepalLength\": 5.6, \"sepalWidth\": 2.7, \"petalLength\": 4.2, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 5.7, \"sepalWidth\": 3, \"petalLength\": 4.2, \"petalWidth\": 1.2, \"species\": \"versicolor\" }, { \"sepalLength\": 5.7, \"sepalWidth\": 2.9, \"petalLength\": 4.2, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 6.2, \"sepalWidth\": 2.9, \"petalLength\": 4.3, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 5.1, \"sepalWidth\": 2.5, \"petalLength\": 3, \"petalWidth\": 1.1, \"species\": \"versicolor\" }, { \"sepalLength\": 5.7, \"sepalWidth\": 2.8, \"petalLength\": 4.1, \"petalWidth\": 1.3, \"species\": \"versicolor\" }, { \"sepalLength\": 6.3, \"sepalWidth\": 3.3, \"petalLength\": 6, \"petalWidth\": 2.5, \"species\": \"virginica\" }, { \"sepalLength\": 5.8, \"sepalWidth\": 2.7, \"petalLength\": 5.1, \"petalWidth\": 1.9, \"species\": \"virginica\" }, { \"sepalLength\": 7.1, \"sepalWidth\": 3, \"petalLength\": 5.9, \"petalWidth\": 2.1, \"species\": \"virginica\" }, { \"sepalLength\": 6.3, \"sepalWidth\": 2.9, \"petalLength\": 5.6, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 6.5, \"sepalWidth\": 3, \"petalLength\": 5.8, \"petalWidth\": 2.2, \"species\": \"virginica\" }, { \"sepalLength\": 7.6, \"sepalWidth\": 3, \"petalLength\": 6.6, \"petalWidth\": 2.1, \"species\": \"virginica\" }, { \"sepalLength\": 4.9, \"sepalWidth\": 2.5, \"petalLength\": 4.5, \"petalWidth\": 1.7, \"species\": \"virginica\" }, { \"sepalLength\": 7.3, \"sepalWidth\": 2.9, \"petalLength\": 6.3, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 6.7, \"sepalWidth\": 2.5, \"petalLength\": 5.8, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 7.2, \"sepalWidth\": 3.6, \"petalLength\": 6.1, \"petalWidth\": 2.5, \"species\": \"virginica\" }, { \"sepalLength\": 6.5, \"sepalWidth\": 3.2, \"petalLength\": 5.1, \"petalWidth\": 2, \"species\": \"virginica\" }, { \"sepalLength\": 6.4, \"sepalWidth\": 2.7, \"petalLength\": 5.3, \"petalWidth\": 1.9, \"species\": \"virginica\" }, { \"sepalLength\": 6.8, \"sepalWidth\": 3, \"petalLength\": 5.5, \"petalWidth\": 2.1, \"species\": \"virginica\" }, { \"sepalLength\": 5.7, \"sepalWidth\": 2.5, \"petalLength\": 5, \"petalWidth\": 2, \"species\": \"virginica\" }, { \"sepalLength\": 5.8, \"sepalWidth\": 2.8, \"petalLength\": 5.1, \"petalWidth\": 2.4, \"species\": \"virginica\" }, { \"sepalLength\": 6.4, \"sepalWidth\": 3.2, \"petalLength\": 5.3, \"petalWidth\": 2.3, \"species\": \"virginica\" }, { \"sepalLength\": 6.5, \"sepalWidth\": 3, \"petalLength\": 5.5, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 7.7, \"sepalWidth\": 3.8, \"petalLength\": 6.7, \"petalWidth\": 2.2, \"species\": \"virginica\" }, { \"sepalLength\": 7.7, \"sepalWidth\": 2.6, \"petalLength\": 6.9, \"petalWidth\": 2.3, \"species\": \"virginica\" }, { \"sepalLength\": 6, \"sepalWidth\": 2.2, \"petalLength\": 5, \"petalWidth\": 1.5, \"species\": \"virginica\" }, { \"sepalLength\": 6.9, \"sepalWidth\": 3.2, \"petalLength\": 5.7, \"petalWidth\": 2.3, \"species\": \"virginica\" }, { \"sepalLength\": 5.6, \"sepalWidth\": 2.8, \"petalLength\": 4.9, \"petalWidth\": 2, \"species\": \"virginica\" }, { \"sepalLength\": 7.7, \"sepalWidth\": 2.8, \"petalLength\": 6.7, \"petalWidth\": 2, \"species\": \"virginica\" }, { \"sepalLength\": 6.3, \"sepalWidth\": 2.7, \"petalLength\": 4.9, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 6.7, \"sepalWidth\": 3.3, \"petalLength\": 5.7, \"petalWidth\": 2.1, \"species\": \"virginica\" }, { \"sepalLength\": 7.2, \"sepalWidth\": 3.2, \"petalLength\": 6, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 6.2, \"sepalWidth\": 2.8, \"petalLength\": 4.8, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 6.1, \"sepalWidth\": 3, \"petalLength\": 4.9, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 6.4, \"sepalWidth\": 2.8, \"petalLength\": 5.6, \"petalWidth\": 2.1, \"species\": \"virginica\" }, { \"sepalLength\": 7.2, \"sepalWidth\": 3, \"petalLength\": 5.8, \"petalWidth\": 1.6, \"species\": \"virginica\" }, { \"sepalLength\": 7.4, \"sepalWidth\": 2.8, \"petalLength\": 6.1, \"petalWidth\": 1.9, \"species\": \"virginica\" }, { \"sepalLength\": 7.9, \"sepalWidth\": 3.8, \"petalLength\": 6.4, \"petalWidth\": 2, \"species\": \"virginica\" }, { \"sepalLength\": 6.4, \"sepalWidth\": 2.8, \"petalLength\": 5.6, \"petalWidth\": 2.2, \"species\": \"virginica\" }, { \"sepalLength\": 6.3, \"sepalWidth\": 2.8, \"petalLength\": 5.1, \"petalWidth\": 1.5, \"species\": \"virginica\" }, { \"sepalLength\": 6.1, \"sepalWidth\": 2.6, \"petalLength\": 5.6, \"petalWidth\": 1.4, \"species\": \"virginica\" }, { \"sepalLength\": 7.7, \"sepalWidth\": 3, \"petalLength\": 6.1, \"petalWidth\": 2.3, \"species\": \"virginica\" }, { \"sepalLength\": 6.3, \"sepalWidth\": 3.4, \"petalLength\": 5.6, \"petalWidth\": 2.4, \"species\": \"virginica\" }, { \"sepalLength\": 6.4, \"sepalWidth\": 3.1, \"petalLength\": 5.5, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 6, \"sepalWidth\": 3, \"petalLength\": 4.8, \"petalWidth\": 1.8, \"species\": \"virginica\" }, { \"sepalLength\": 6.9, \"sepalWidth\": 3.1, \"petalLength\": 5.4, \"petalWidth\": 2.1, \"species\": \"virginica\" }, { \"sepalLength\": 6.7, \"sepalWidth\": 3.1, \"petalLength\": 5.6, \"petalWidth\": 2.4, \"species\": \"virginica\" }, { \"sepalLength\": 6.9, \"sepalWidth\": 3.1, \"petalLength\": 5.1, \"petalWidth\": 2.3, \"species\": \"virginica\" }, { \"sepalLength\": 5.8, \"sepalWidth\": 2.7, \"petalLength\": 5.1, \"petalWidth\": 1.9, \"species\": \"virginica\" }, { \"sepalLength\": 6.8, \"sepalWidth\": 3.2, \"petalLength\": 5.9, \"petalWidth\": 2.3, \"species\": \"virginica\" }, { \"sepalLength\": 6.7, \"sepalWidth\": 3.3, \"petalLength\": 5.7, \"petalWidth\": 2.5, \"species\": \"virginica\" }, { \"sepalLength\": 6.7, \"sepalWidth\": 3, \"petalLength\": 5.2, \"petalWidth\": 2.3, \"species\": \"virginica\" }, { \"sepalLength\": 6.3, \"sepalWidth\": 2.5, \"petalLength\": 5, \"petalWidth\": 1.9, \"species\": \"virginica\" }, { \"sepalLength\": 6.5, \"sepalWidth\": 3, \"petalLength\": 5.2, \"petalWidth\": 2, \"species\": \"virginica\" }, { \"sepalLength\": 6.2, \"sepalWidth\": 3.4, \"petalLength\": 5.4, \"petalWidth\": 2.3, \"species\": \"virginica\" }, { \"sepalLength\": 5.9, \"sepalWidth\": 3, \"petalLength\": 5.1, \"petalWidth\": 1.8, \"species\": \"virginica\" }] };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_5.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_5.js","source":"\"use strict\";\n\nmodule.exports = { \"ssr\": true };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdHJlYW1fNS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCLEVBQUMsT0FBTSxJQUFQLEVBQWpCIiwiZmlsZSI6Il9zdHJlYW1fNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1wic3NyXCI6dHJ1ZX0iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom/umd/react-dom.production.min.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom/umd/react-dom.production.min.js","source":"/*\n React v16.0.0\n react-dom.production.min.js\n\n Copyright (c) 2013-present, Facebook, Inc.\n\n This source code is licensed under the MIT license found in the\n LICENSE file in the root directory of this source tree.\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction Nb(Za) {\n  function Ob(a, b) {\n    return null == a || \"http://www.w3.org/1999/xhtml\" === a ? Sc(b) : \"http://www.w3.org/2000/svg\" === a && \"foreignObject\" === b ? \"http://www.w3.org/1999/xhtml\" : a;\n  }function Me(a) {\n    return a[1].toUpperCase();\n  }function $a(a) {\n    var b = a.keyCode;\"charCode\" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;return 32 <= a || 13 === a ? a : 0;\n  }function Pb() {\n    return Ne;\n  }function Tc(a) {\n    var b = a && a.nodeName && a.nodeName.toLowerCase();return \"input\" === b ? !!Oe[a.type] : \"textarea\" === b ? !0 : !1;\n  }function ab(a) {\n    if (null == a) return null;if (1 === a.nodeType) return a;var b = fa.get(a);if (b) return \"number\" === typeof b.tag ? Uc(b) : Vc(b);\"function\" === typeof a.render ? m(\"188\") : m(\"213\", Object.keys(a));\n  }function Vc() {\n    m(\"212\");\n  }function Uc() {\n    m(\"211\");\n  }function Qb(a) {\n    a = a || (\"undefined\" !== typeof document ? document : void 0);if (\"undefined\" === typeof a) return null;try {\n      return a.activeElement || a.body;\n    } catch (b) {\n      return a.body;\n    }\n  }function Wc(a) {\n    var b = (a ? a.ownerDocument || a : document).defaultView || window;return !!(a && (\"function\" === typeof b.Node ? a instanceof b.Node : \"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && \"number\" === typeof a.nodeType && \"string\" === typeof a.nodeName)) && 3 == a.nodeType;\n  }function Xc() {\n    !Rb && z && (Rb = \"textContent\" in document.documentElement ? \"textContent\" : \"innerText\");return Rb;\n  }function Yc(a, b) {\n    var c = Zc(a);a = 0;for (var d; c;) {\n      if (3 === c.nodeType) {\n        d = a + c.textContent.length;if (a <= b && d >= b) return { node: c, offset: b - a };a = d;\n      }a: {\n        for (; c;) {\n          if (c.nextSibling) {\n            c = c.nextSibling;break a;\n          }c = c.parentNode;\n        }c = void 0;\n      }c = Zc(c);\n    }\n  }function $c() {\n    m(\"196\");\n  }function Pe(a) {\n    function b() {\n      for (; null !== w && 0 === w.current.pendingWorkPriority;) {\n        w.isScheduled = !1;var a = w.nextScheduledRoot;w.nextScheduledRoot = null;if (w === I) return I = w = null, y = 0, null;w = a;\n      }a = w;for (var b = null, c = 0; null !== a;) {\n        0 !== a.current.pendingWorkPriority && (0 === c || c > a.current.pendingWorkPriority) && (c = a.current.pendingWorkPriority, b = a), a = a.nextScheduledRoot;\n      }if (null !== b) {\n        for (y = c; -1 < da;) {\n          bb[da] = null, da--;\n        }cb = ba;ca.current = ba;S.current = !1;p();D = ad(b.current, c);b !== V && (U = 0, V = b);\n      } else y = 0, V = D = null;\n    }function c(c) {\n      X = !0;q = null;var d = c.stateNode;d.current === c ? m(\"177\") : void 0;1 !== y && 2 !== y || U++;db.current = null;\n      if (1 < c.effectTag) {\n        if (null !== c.lastEffect) {\n          c.lastEffect.nextEffect = c;var p = c.firstEffect;\n        } else p = c;\n      } else p = c.firstEffect;N();for (u = p; null !== u;) {\n        var n = !1,\n            e = void 0;try {\n          for (; null !== u;) {\n            var f = u.effectTag;f & 16 && a.resetTextContent(u.stateNode);if (f & 128) {\n              var g = u.alternate;null !== g && t(g);\n            }switch (f & -242) {case 2:\n                E(u);u.effectTag &= -3;break;case 6:\n                E(u);u.effectTag &= -3;bd(u.alternate, u);break;case 4:\n                bd(u.alternate, u);break;case 8:\n                Y = !0, Qe(u), Y = !1;}u = u.nextEffect;\n          }\n        } catch (Sb) {\n          n = !0, e = Sb;\n        }n && (null === u ? m(\"178\") : void 0, T(u, e), null !== u && (u = u.nextEffect));\n      }O();d.current = c;for (u = p; null !== u;) {\n        d = !1;p = void 0;try {\n          for (; null !== u;) {\n            var h = u.effectTag;h & 36 && Re(u.alternate, u);h & 128 && r(u);if (h & 64) switch (n = u, e = void 0, null !== P && (e = P.get(n), P[\"delete\"](n), null == e && null !== n.alternate && (n = n.alternate, e = P.get(n), P[\"delete\"](n))), null == e ? m(\"184\") : void 0, n.tag) {case 2:\n                n.stateNode.componentDidCatch(e.error, { componentStack: e.componentStack });break;case 3:\n                null === M && (M = e.error);break;default:\n                m(\"157\");}var v = u.nextEffect;u.nextEffect = null;u = v;\n          }\n        } catch (Sb) {\n          d = !0, p = Sb;\n        }d && (null === u ? m(\"178\") : void 0, T(u, p), null !== u && (u = u.nextEffect));\n      }X = !1;\"function\" === typeof cd && cd(c.stateNode);B && (B.forEach(Z), B = null);b();\n    }function d(a) {\n      for (;;) {\n        var b = Se(a.alternate, a, y),\n            c = a[\"return\"],\n            d = a.sibling;var n = a;if (!(0 !== n.pendingWorkPriority && n.pendingWorkPriority > y)) {\n          var p = n.updateQueue;p = null === p || 2 !== n.tag && 3 !== n.tag ? 0 : null !== p.first ? p.first.priorityLevel : 0;for (var e = n.child; null !== e;) {\n            var f = e.pendingWorkPriority;p = 0 !== p && (0 === f || f > p) ? p : f;e = e.sibling;\n          }n.pendingWorkPriority = p;\n        }if (null !== b) return b;null !== c && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), 1 < a.effectTag && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));if (null !== d) return d;if (null !== c) a = c;else {\n          q = a;break;\n        }\n      }return null;\n    }function e(a) {\n      var b = pa(a.alternate, a, y);null === b && (b = d(a));db.current = null;return b;\n    }function f(a) {\n      var b = Ub(a.alternate, a, y);null === b && (b = d(a));db.current = null;\n      return b;\n    }function g(a) {\n      Q(5, a);\n    }function h() {\n      if (null !== P && 0 < P.size && 2 === y) for (; null !== D;) {\n        var a = D;D = null !== P && (P.has(a) || null !== a.alternate && P.has(a.alternate)) ? f(D) : e(D);if (null === D && (null === q ? m(\"179\") : void 0, J = 2, c(q), J = y, null === P || 0 === P.size || 2 !== y)) break;\n      }\n    }function k(a, d) {\n      null !== q ? (J = 2, c(q), h()) : null === D && b();if (!(0 === y || y > a)) {\n        J = y;a: do {\n          if (2 >= y) for (; null !== D && !(D = e(D), null === D && (null === q ? m(\"179\") : void 0, J = 2, c(q), J = y, h(), 0 === y || y > a || 2 < y));) {} else if (null !== d) for (; null !== D && !F;) {\n            if (1 < d.timeRemaining()) {\n              if (D = e(D), null === D) if (null === q ? m(\"179\") : void 0, 1 < d.timeRemaining()) {\n                if (J = 2, c(q), J = y, h(), 0 === y || y > a || 3 > y) break;\n              } else F = !0;\n            } else F = !0;\n          }switch (y) {case 1:case 2:\n              if (y <= a) continue a;break a;case 3:case 4:case 5:\n              if (null === d) break a;if (!F && y <= a) continue a;break a;case 0:\n              break a;default:\n              m(\"181\");}\n        } while (1);\n      }\n    }function Q(a, b) {\n      z ? m(\"182\") : void 0;z = !0;var c = J,\n          d = !1,\n          p = null;try {\n        k(a, b);\n      } catch (Tb) {\n        d = !0, p = Tb;\n      }for (; d;) {\n        if (R) {\n          M = p;break;\n        }var e = D;if (null === e) R = !0;else {\n          var E = T(e, p);null === E ? m(\"183\") : void 0;if (!R) {\n            try {\n              d = E;p = a;E = b;for (var h = d; null !== e;) {\n                switch (e.tag) {case 2:\n                    dd(e);break;case 5:\n                    n(e);break;case 3:\n                    x(e);break;case 4:\n                    x(e);}if (e === h || e.alternate === h) break;e = e[\"return\"];\n              }D = f(d);k(p, E);\n            } catch (Tb) {\n              d = !0;p = Tb;continue;\n            }break;\n          }\n        }\n      }J = c;null !== b && (L = !1);2 < y && !L && (A(g), L = !0);a = M;R = F = z = !1;V = C = P = M = null;U = 0;if (null !== a) throw a;\n    }function T(a, b) {\n      var c = db.current = null,\n          d = !1,\n          p = !1,\n          n = null;if (3 === a.tag) c = a, eb(a) && (R = !0);else for (var e = a[\"return\"]; null !== e && null === c;) {\n        2 === e.tag ? \"function\" === typeof e.stateNode.componentDidCatch && (d = !0, n = Ba(e), c = e, p = !0) : 3 === e.tag && (c = e);if (eb(e)) {\n          if (Y || null !== B && (B.has(e) || null !== e.alternate && B.has(e.alternate))) return null;c = null;p = !1;\n        }e = e[\"return\"];\n      }if (null !== c) {\n        null === C && (C = new Set());C.add(c);var f = \"\";e = a;do {\n          a: switch (e.tag) {case 0:case 1:case 2:case 5:\n              var E = e._debugOwner,\n                  g = e._debugSource;var h = Ba(e);var v = null;E && (v = Ba(E));E = g;h = \"\\n    in \" + (h || \"Unknown\") + (E ? \" (at \" + E.fileName.replace(/^.*[\\\\\\/]/, \"\") + \":\" + E.lineNumber + \")\" : v ? \" (created by \" + v + \")\" : \"\");break a;default:\n              h = \"\";}f += h;e = e[\"return\"];\n        } while (e);e = f;a = Ba(a);null === P && (P = new Map());b = { componentName: a, componentStack: e, error: b, errorBoundary: d ? c.stateNode : null, errorBoundaryFound: d, errorBoundaryName: n, willRetry: p };P.set(c, b);try {\n          console.error(b.error);\n        } catch (Te) {\n          console.error(Te);\n        }X ? (null === B && (B = new Set()), B.add(c)) : Z(c);return c;\n      }null === M && (M = b);return null;\n    }function eb(a) {\n      return null !== C && (C.has(a) || null !== a.alternate && C.has(a.alternate));\n    }function fb(a, b) {\n      return ed(a, b, !1);\n    }function ed(a, b) {\n      U > aa && (R = !0, m(\"185\"));!z && b <= y && (D = null);for (var c = !0; null !== a && c;) {\n        c = !1;if (0 === a.pendingWorkPriority || a.pendingWorkPriority > b) c = !0, a.pendingWorkPriority = b;null !== a.alternate && (0 === a.alternate.pendingWorkPriority || a.alternate.pendingWorkPriority > b) && (c = !0, a.alternate.pendingWorkPriority = b);if (null === a[\"return\"]) if (3 === a.tag) {\n          var d = a.stateNode;0 === b || d.isScheduled || (d.isScheduled = !0, I ? I.nextScheduledRoot = d : w = d, I = d);if (!z) switch (b) {case 1:\n              K ? Q(1, null) : Q(2, null);break;case 2:\n              W ? void 0 : m(\"186\");break;default:\n              L || (A(g), L = !0);}\n        } else break;a = a[\"return\"];\n      }\n    }function l(a, b) {\n      var c = J;0 === c && (c = !G || a.internalContextTag & 1 || b ? 4 : 1);return 1 === c && (z || W) ? 2 : c;\n    }function Z(a) {\n      ed(a, 2, !0);\n    }var H = Ue(a),\n        fd = Ve(a),\n        x = H.popHostContainer,\n        n = H.popHostContext,\n        p = H.resetHostContainer,\n        v = We(a, H, fd, fb, l),\n        pa = v.beginWork,\n        Ub = v.beginFailedWork,\n        Se = Xe(a, H, fd).completeWork;H = Ye(a, T);var E = H.commitPlacement,\n        Qe = H.commitDeletion,\n        bd = H.commitWork,\n        Re = H.commitLifeCycles,\n        r = H.commitAttachRef,\n        t = H.commitDetachRef,\n        A = a.scheduleDeferredCallback,\n        G = a.useSyncScheduling,\n        N = a.prepareForCommit,\n        O = a.resetAfterCommit,\n        J = 0,\n        z = !1,\n        F = !1,\n        W = !1,\n        K = !1,\n        D = null,\n        y = 0,\n        u = null,\n        q = null,\n        w = null,\n        I = null,\n        L = !1,\n        P = null,\n        C = null,\n        B = null,\n        M = null,\n        R = !1,\n        X = !1,\n        Y = !1,\n        aa = 1E3,\n        U = 0,\n        V = null;return { scheduleUpdate: fb, getPriorityContext: l, batchedUpdates: function batchedUpdates(a, b) {\n        var c = W;W = !0;try {\n          return a(b);\n        } finally {\n          W = c, z || W || Q(2, null);\n        }\n      }, unbatchedUpdates: function unbatchedUpdates(a) {\n        var b = K,\n            c = W;K = W;W = !1;try {\n          return a();\n        } finally {\n          W = c, K = b;\n        }\n      }, flushSync: function flushSync(a) {\n        var b = W,\n            c = J;W = !0;J = 1;try {\n          return a();\n        } finally {\n          W = b, J = c, z ? m(\"187\") : void 0, Q(2, null);\n        }\n      }, deferredUpdates: function deferredUpdates(a) {\n        var b = J;J = 4;try {\n          return a();\n        } finally {\n          J = b;\n        }\n      } };\n  }function cd(a) {\n    \"function\" === typeof Vb && Vb(a);\n  }function Ve(a) {\n    function b(a, b) {\n      var c = new F(5, null, 0);c.type = \"DELETED\";c.stateNode = b;c[\"return\"] = a;c.effectTag = 8;null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;\n    }function c(a, b) {\n      switch (a.tag) {case 5:\n          return f(b, a.type, a.pendingProps);case 6:\n          return g(b, a.pendingProps);default:\n          return !1;}\n    }function d(a) {\n      for (a = a[\"return\"]; null !== a && 5 !== a.tag && 3 !== a.tag;) {\n        a = a[\"return\"];\n      }l = a;\n    }var e = a.shouldSetTextContent,\n        f = a.canHydrateInstance,\n        g = a.canHydrateTextInstance,\n        h = a.getNextHydratableSibling,\n        k = a.getFirstHydratableChild,\n        Q = a.hydrateInstance,\n        T = a.hydrateTextInstance,\n        eb = a.didNotHydrateInstance,\n        fb = a.didNotFindHydratableInstance;a = a.didNotFindHydratableTextInstance;if (!(f && g && h && k && Q && T && eb && fb && a)) return { enterHydrationState: function enterHydrationState() {\n        return !1;\n      }, resetHydrationState: function resetHydrationState() {}, tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {}, prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {\n        m(\"175\");\n      }, prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {\n        m(\"176\");\n      }, popHydrationState: function popHydrationState() {\n        return !1;\n      } };\n    var l = null,\n        r = null,\n        Z = !1;return { enterHydrationState: function enterHydrationState(a) {\n        r = k(a.stateNode.containerInfo);l = a;return Z = !0;\n      }, resetHydrationState: function resetHydrationState() {\n        r = l = null;Z = !1;\n      }, tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance(a) {\n        if (Z) {\n          var d = r;if (d) {\n            if (!c(a, d)) {\n              d = h(d);if (!d || !c(a, d)) {\n                a.effectTag |= 2;Z = !1;l = a;return;\n              }b(l, r);\n            }a.stateNode = d;l = a;r = k(d);\n          } else a.effectTag |= 2, Z = !1, l = a;\n        }\n      }, prepareToHydrateHostInstance: function prepareToHydrateHostInstance(a, b, c) {\n        b = Q(a.stateNode, a.type, a.memoizedProps, b, c, a);a.updateQueue = b;return null !== b ? !0 : !1;\n      }, prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance(a) {\n        return T(a.stateNode, a.memoizedProps, a);\n      }, popHydrationState: function popHydrationState(a) {\n        if (a !== l) return !1;if (!Z) return d(a), Z = !0, !1;var c = a.type;if (5 !== a.tag || \"head\" !== c && \"body\" !== c && !e(c, a.memoizedProps)) for (c = r; c;) {\n          b(a, c), c = h(c);\n        }d(a);r = l ? h(a.stateNode) : null;return !0;\n      } };\n  }function Ue(a) {\n    function b(a) {\n      a === qa ? m(\"174\") : void 0;return a;\n    }var c = a.getChildHostContext,\n        d = a.getRootHostContext,\n        e = { current: qa },\n        f = { current: qa },\n        g = { current: qa };return { getHostContext: function getHostContext() {\n        return b(e.current);\n      }, getRootHostContainer: function getRootHostContainer() {\n        return b(g.current);\n      }, popHostContainer: function popHostContainer(a) {\n        K(e, a);K(f, a);K(g, a);\n      }, popHostContext: function popHostContext(a) {\n        f.current === a && (K(e, a), K(f, a));\n      }, pushHostContainer: function pushHostContainer(a, b) {\n        L(g, b, a);b = d(b);L(f, a, a);L(e, b, a);\n      }, pushHostContext: function pushHostContext(a) {\n        var d = b(g.current),\n            h = b(e.current);d = c(h, a.type, d);h !== d && (L(f, a, a), L(e, d, a));\n      }, resetHostContainer: function resetHostContainer() {\n        e.current = qa;g.current = qa;\n      } };\n  }function Ye(a, b) {\n    function c(a) {\n      var c = a.ref;if (null !== c) try {\n        c(null);\n      } catch (p) {\n        b(a, p);\n      }\n    }function d(a) {\n      return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n    }function e(a) {\n      for (var b = a;;) {\n        if (g(b), null !== b.child && 4 !== b.tag) b.child[\"return\"] = b, b = b.child;else {\n          if (b === a) break;for (; null === b.sibling;) {\n            if (null === b[\"return\"] || b[\"return\"] === a) return;b = b[\"return\"];\n          }b.sibling[\"return\"] = b[\"return\"];b = b.sibling;\n        }\n      }\n    }function f(a) {\n      for (var b = a, c = !1, d = void 0, f = void 0;;) {\n        if (!c) {\n          c = b[\"return\"];a: for (;;) {\n            null === c ? m(\"160\") : void 0;switch (c.tag) {case 5:\n                d = c.stateNode;f = !1;break a;case 3:\n                d = c.stateNode.containerInfo;f = !0;break a;case 4:\n                d = c.stateNode.containerInfo;f = !0;break a;}c = c[\"return\"];\n          }c = !0;\n        }if (5 === b.tag || 6 === b.tag) e(b), f ? H(d, b.stateNode) : Z(d, b.stateNode);else if (4 === b.tag ? d = b.stateNode.containerInfo : g(b), null !== b.child) {\n          b.child[\"return\"] = b;b = b.child;continue;\n        }if (b === a) break;for (; null === b.sibling;) {\n          if (null === b[\"return\"] || b[\"return\"] === a) return;b = b[\"return\"];4 === b.tag && (c = !1);\n        }b.sibling[\"return\"] = b[\"return\"];b = b.sibling;\n      }\n    }function g(a) {\n      \"function\" === typeof gd && gd(a);switch (a.tag) {case 2:\n          c(a);var d = a.stateNode;if (\"function\" === typeof d.componentWillUnmount) try {\n            d.props = a.memoizedProps, d.state = a.memoizedState, d.componentWillUnmount();\n          } catch (p) {\n            b(a, p);\n          }break;case 5:\n          c(a);break;case 7:\n          e(a.stateNode);break;case 4:\n          f(a);}\n    }var h = a.commitMount,\n        k = a.commitUpdate,\n        Q = a.resetTextContent,\n        T = a.commitTextUpdate,\n        l = a.appendChild,\n        r = a.appendChildToContainer,\n        t = a.insertBefore,\n        q = a.insertInContainerBefore,\n        Z = a.removeChild,\n        H = a.removeChildFromContainer,\n        w = a.getPublicInstance;return { commitPlacement: function commitPlacement(a) {\n        a: {\n          for (var b = a[\"return\"]; null !== b;) {\n            if (d(b)) {\n              var c = b;break a;\n            }b = b[\"return\"];\n          }m(\"160\");c = void 0;\n        }var e = b = void 0;switch (c.tag) {case 5:\n            b = c.stateNode;e = !1;break;case 3:\n            b = c.stateNode.containerInfo;\n            e = !0;break;case 4:\n            b = c.stateNode.containerInfo;e = !0;break;default:\n            m(\"161\");}c.effectTag & 16 && (Q(b), c.effectTag &= -17);a: b: for (c = a;;) {\n          for (; null === c.sibling;) {\n            if (null === c[\"return\"] || d(c[\"return\"])) {\n              c = null;break a;\n            }c = c[\"return\"];\n          }c.sibling[\"return\"] = c[\"return\"];for (c = c.sibling; 5 !== c.tag && 6 !== c.tag;) {\n            if (c.effectTag & 2) continue b;if (null === c.child || 4 === c.tag) continue b;else c.child[\"return\"] = c, c = c.child;\n          }if (!(c.effectTag & 2)) {\n            c = c.stateNode;break a;\n          }\n        }for (var f = a;;) {\n          if (5 === f.tag || 6 === f.tag) c ? e ? q(b, f.stateNode, c) : t(b, f.stateNode, c) : e ? r(b, f.stateNode) : l(b, f.stateNode);else if (4 !== f.tag && null !== f.child) {\n            f.child[\"return\"] = f;f = f.child;continue;\n          }if (f === a) break;for (; null === f.sibling;) {\n            if (null === f[\"return\"] || f[\"return\"] === a) return;f = f[\"return\"];\n          }f.sibling[\"return\"] = f[\"return\"];f = f.sibling;\n        }\n      }, commitDeletion: function commitDeletion(a) {\n        f(a);a[\"return\"] = null;a.child = null;a.alternate && (a.alternate.child = null, a.alternate[\"return\"] = null);\n      }, commitWork: function commitWork(a, b) {\n        switch (b.tag) {case 2:\n            break;case 5:\n            var c = b.stateNode;if (null != c) {\n              var d = b.memoizedProps;\n              a = null !== a ? a.memoizedProps : d;var e = b.type,\n                  f = b.updateQueue;b.updateQueue = null;null !== f && k(c, f, e, a, d, b);\n            }break;case 6:\n            null === b.stateNode ? m(\"162\") : void 0;c = b.memoizedProps;T(b.stateNode, null !== a ? a.memoizedProps : c, c);break;case 3:\n            break;case 4:\n            break;default:\n            m(\"163\");}\n      }, commitLifeCycles: function commitLifeCycles(a, b) {\n        switch (b.tag) {case 2:\n            var c = b.stateNode;if (b.effectTag & 4) if (null === a) c.props = b.memoizedProps, c.state = b.memoizedState, c.componentDidMount();else {\n              var d = a.memoizedProps;a = a.memoizedState;c.props = b.memoizedProps;\n              c.state = b.memoizedState;c.componentDidUpdate(d, a);\n            }b.effectTag & 32 && null !== b.updateQueue && hd(b, b.updateQueue, c);break;case 3:\n            a = b.updateQueue;null !== a && hd(b, a, b.child && b.child.stateNode);break;case 5:\n            c = b.stateNode;null === a && b.effectTag & 4 && h(c, b.type, b.memoizedProps, b);break;case 6:\n            break;case 4:\n            break;default:\n            m(\"163\");}\n      }, commitAttachRef: function commitAttachRef(a) {\n        var b = a.ref;if (null !== b) {\n          var c = a.stateNode;switch (a.tag) {case 5:\n              b(w(c));break;default:\n              b(c);}\n        }\n      }, commitDetachRef: function commitDetachRef(a) {\n        a = a.ref;null !== a && a(null);\n      } };\n  }function gd(a) {\n    \"function\" === typeof Wb && Wb(a);\n  }function hd(a, b, c) {\n    a = b.callbackList;if (null !== a) for (b.callbackList = null, b = 0; b < a.length; b++) {\n      var d = a[b];\"function\" !== typeof d ? m(\"191\", d) : void 0;d.call(c);\n    }\n  }function Xe(a, b, c) {\n    var d = a.createInstance,\n        e = a.createTextInstance,\n        f = a.appendInitialChild,\n        g = a.finalizeInitialChildren,\n        h = a.prepareUpdate,\n        k = b.getRootHostContainer,\n        Q = b.popHostContext,\n        T = b.getHostContext,\n        l = b.popHostContainer,\n        r = c.prepareToHydrateHostInstance,\n        t = c.prepareToHydrateHostTextInstance,\n        q = c.popHydrationState;return { completeWork: function completeWork(a, b, c) {\n        var x = b.pendingProps;if (null === x) x = b.memoizedProps;else if (5 !== b.pendingWorkPriority || 5 === c) b.pendingProps = null;switch (b.tag) {case 1:\n            return null;case 2:\n            return dd(b), null;case 3:\n            l(b);K(S, b);K(ca, b);x = b.stateNode;x.pendingContext && (x.context = x.pendingContext, x.pendingContext = null);if (null === a || null === a.child) q(b), b.effectTag &= -3;return null;case 5:\n            Q(b);c = k();var n = b.type;if (null !== a && null != b.stateNode) {\n              var p = a.memoizedProps,\n                  v = b.stateNode,\n                  pa = T();x = h(v, n, p, x, c, pa);if (b.updateQueue = x) b.effectTag |= 4;a.ref !== b.ref && (b.effectTag |= 128);\n            } else {\n              if (!x) return null === b.stateNode ? m(\"166\") : void 0, null;a = T();if (q(b)) r(b, c, a) && (b.effectTag |= 4);else {\n                a = d(n, x, c, a, b);a: for (p = b.child; null !== p;) {\n                  if (5 === p.tag || 6 === p.tag) f(a, p.stateNode);else if (4 !== p.tag && null !== p.child) {\n                    p = p.child;continue;\n                  }if (p === b) break a;for (; null === p.sibling;) {\n                    if (null === p[\"return\"] || p[\"return\"] === b) break a;p = p[\"return\"];\n                  }p = p.sibling;\n                }g(a, n, x, c) && (b.effectTag |= 4);b.stateNode = a;\n              }null !== b.ref && (b.effectTag |= 128);\n            }return null;case 6:\n            if (a && null != b.stateNode) a.memoizedProps !== x && (b.effectTag |= 4);else {\n              if (\"string\" !== typeof x) return null === b.stateNode ? m(\"166\") : void 0, null;a = k();c = T();q(b) ? t(b) && (b.effectTag |= 4) : b.stateNode = e(x, a, c, b);\n            }return null;case 7:\n            (x = b.memoizedProps) ? void 0 : m(\"165\");b.tag = 8;c = [];a: for ((n = b.stateNode) && (n[\"return\"] = b); null !== n;) {\n              if (5 === n.tag || 6 === n.tag || 4 === n.tag) m(\"164\");else if (9 === n.tag) c.push(n.type);else if (null !== n.child) {\n                n.child[\"return\"] = n;n = n.child;continue;\n              }for (; null === n.sibling;) {\n                if (null === n[\"return\"] || n[\"return\"] === b) break a;n = n[\"return\"];\n              }n.sibling[\"return\"] = n[\"return\"];n = n.sibling;\n            }n = x.handler;x = n(x.props, c);b.child = Xb(b, null !== a ? a.child : null, x, b.pendingWorkPriority);return b.child;case 8:\n            return b.tag = 7, null;case 9:\n            return null;case 10:\n            return null;case 4:\n            return b.effectTag |= 4, l(b), null;case 0:\n            m(\"167\");default:\n            m(\"156\");}\n      } };\n  }function We(a, b, c, d, e) {\n    function f(a, b, c) {\n      g(a, b, c, b.pendingWorkPriority);\n    }function g(a, b, c, d) {\n      b.child = null === a ? Yb(b, b.child, c, d) : a.child === b.child ? Xb(b, b.child, c, d) : Zb(b, b.child, c, d);\n    }function h(a, b) {\n      var c = b.ref;null === c || a && a.ref === c || (b.effectTag |= 128);\n    }function k(a, b, c, d) {\n      h(a, b);if (!c) return d && id(b, !1), l(a, b);c = b.stateNode;Ze.current = b;var e = c.render();b.effectTag |= 1;f(a, b, e);b.memoizedState = c.state;b.memoizedProps = c.props;d && id(b, !0);return b.child;\n    }function Q(a) {\n      var b = a.stateNode;b.pendingContext ? jd(a, b.pendingContext, b.pendingContext !== b.context) : b.context && jd(a, b.context, !1);H(a, b.containerInfo);\n    }function l(a, b) {\n      null !== a && b.child !== a.child ? m(\"153\") : void 0;if (null !== b.child) {\n        a = b.child;var c = $b(a, a.pendingWorkPriority);c.pendingProps = a.pendingProps;\n        b.child = c;for (c[\"return\"] = b; null !== a.sibling;) {\n          a = a.sibling, c = c.sibling = $b(a, a.pendingWorkPriority), c.pendingProps = a.pendingProps, c[\"return\"] = b;\n        }c.sibling = null;\n      }return b.child;\n    }function r(a, b) {\n      switch (b.tag) {case 3:\n          Q(b);break;case 2:\n          gb(b);break;case 4:\n          H(b, b.stateNode.containerInfo);}return null;\n    }var q = a.shouldSetTextContent,\n        t = a.useSyncScheduling,\n        w = a.shouldDeprioritizeSubtree,\n        z = b.pushHostContext,\n        H = b.pushHostContainer,\n        A = c.enterHydrationState,\n        x = c.resetHydrationState,\n        n = c.tryToClaimNextHydratableInstance;a = $e(d, e, function (a, b) {\n      a.memoizedProps = b;\n    }, function (a, b) {\n      a.memoizedState = b;\n    });var p = a.adoptClassInstance,\n        v = a.constructClassInstance,\n        pa = a.mountClassInstance,\n        Ub = a.updateClassInstance;return { beginWork: function beginWork(a, b, c) {\n        if (0 === b.pendingWorkPriority || b.pendingWorkPriority > c) return r(a, b);switch (b.tag) {case 0:\n            null !== a ? m(\"155\") : void 0;var d = b.type,\n                e = b.pendingProps,\n                g = Ca(b);g = Da(b, g);d = d(e, g);b.effectTag |= 1;\"object\" === (typeof d === \"undefined\" ? \"undefined\" : _typeof(d)) && null !== d && \"function\" === typeof d.render ? (b.tag = 2, e = gb(b), p(b, d), pa(b, c), b = k(a, b, !0, e)) : (b.tag = 1, f(a, b, d), b.memoizedProps = e, b = b.child);return b;case 1:\n            a: {\n              e = b.type;c = b.pendingProps;d = b.memoizedProps;if (S.current) null === c && (c = d);else if (null === c || d === c) {\n                b = l(a, b);break a;\n              }d = Ca(b);d = Da(b, d);e = e(c, d);b.effectTag |= 1;f(a, b, e);b.memoizedProps = c;b = b.child;\n            }return b;case 2:\n            return e = gb(b), d = void 0, null === a ? b.stateNode ? m(\"153\") : (v(b, b.pendingProps), pa(b, c), d = !0) : d = Ub(a, b, c), k(a, b, d, e);case 3:\n            return Q(b), d = b.updateQueue, null !== d ? (e = b.memoizedState, d = ac(a, b, d, null, e, null, c), e === d ? (x(), b = l(a, b)) : (e = d.element, null !== a && null !== a.child || !A(b) ? (x(), f(a, b, e)) : (b.effectTag |= 2, b.child = Yb(b, b.child, e, c)), b.memoizedState = d, b = b.child)) : (x(), b = l(a, b)), b;case 5:\n            z(b);null === a && n(b);e = b.type;var E = b.memoizedProps;d = b.pendingProps;null === d && (d = E, null === d ? m(\"154\") : void 0);g = null !== a ? a.memoizedProps : null;S.current || null !== d && E !== d ? (E = d.children, q(e, d) ? E = null : g && q(e, g) && (b.effectTag |= 16), h(a, b), 5 !== c && !t && w(e, d) ? (b.pendingWorkPriority = 5, b = null) : (f(a, b, E), b.memoizedProps = d, b = b.child)) : b = l(a, b);return b;case 6:\n            return null === a && n(b), a = b.pendingProps, null === a && (a = b.memoizedProps), b.memoizedProps = a, null;case 8:\n            b.tag = 7;case 7:\n            c = b.pendingProps;if (S.current) null === c && (c = a && a.memoizedProps, null === c ? m(\"154\") : void 0);else if (null === c || b.memoizedProps === c) c = b.memoizedProps;e = c.children;d = b.pendingWorkPriority;b.stateNode = null === a ? Yb(b, b.stateNode, e, d) : a.child === b.child ? Xb(b, b.stateNode, e, d) : Zb(b, b.stateNode, e, d);b.memoizedProps = c;return b.stateNode;case 9:\n            return null;case 4:\n            a: {\n              H(b, b.stateNode.containerInfo);c = b.pendingWorkPriority;\n              e = b.pendingProps;if (S.current) null === e && (e = a && a.memoizedProps, null == e ? m(\"154\") : void 0);else if (null === e || b.memoizedProps === e) {\n                b = l(a, b);break a;\n              }null === a ? b.child = Zb(b, b.child, e, c) : f(a, b, e);b.memoizedProps = e;b = b.child;\n            }return b;case 10:\n            a: {\n              c = b.pendingProps;if (S.current) null === c && (c = b.memoizedProps);else if (null === c || b.memoizedProps === c) {\n                b = l(a, b);break a;\n              }f(a, b, c);b.memoizedProps = c;b = b.child;\n            }return b;default:\n            m(\"156\");}\n      }, beginFailedWork: function beginFailedWork(a, b, c) {\n        switch (b.tag) {case 2:\n            gb(b);break;case 3:\n            Q(b);break;default:\n            m(\"157\");}b.effectTag |= 64;null === a ? b.child = null : b.child !== a.child && (b.child = a.child);if (0 === b.pendingWorkPriority || b.pendingWorkPriority > c) return r(a, b);b.firstEffect = null;b.lastEffect = null;g(a, b, null, c);2 === b.tag && (a = b.stateNode, b.memoizedProps = a.props, b.memoizedState = a.state);return b.child;\n      } };\n  }function id(a, b) {\n    var c = a.stateNode;c ? void 0 : m(\"169\");if (b) {\n      var d = kd(a, cb, !0);c.__reactInternalMemoizedMergedChildContext = d;K(S, a);K(ca, a);L(ca, d, a);\n    } else K(S, a);L(S, b, a);\n  }function jd(a, b, c) {\n    null != ca.cursor ? m(\"168\") : void 0;L(ca, b, a);\n    L(S, c, a);\n  }function gb(a) {\n    if (!Ea(a)) return !1;var b = a.stateNode;b = b && b.__reactInternalMemoizedMergedChildContext || ba;cb = ca.current;L(ca, b, a);L(S, S.current, a);return !0;\n  }function $e(a, b, c, d) {\n    function e(a, b) {\n      b.updater = f;a.stateNode = b;fa.set(b, a);\n    }var f = { isMounted: af, enqueueSetState: function enqueueSetState(c, d, e) {\n        c = fa.get(c);var f = b(c, !1);hb(c, { priorityLevel: f, partialState: d, callback: void 0 === e ? null : e, isReplace: !1, isForced: !1, isTopLevelUnmount: !1, next: null });a(c, f);\n      }, enqueueReplaceState: function enqueueReplaceState(c, d, e) {\n        c = fa.get(c);var f = b(c, !1);hb(c, { priorityLevel: f, partialState: d, callback: void 0 === e ? null : e, isReplace: !0, isForced: !1, isTopLevelUnmount: !1, next: null });a(c, f);\n      }, enqueueForceUpdate: function enqueueForceUpdate(c, d) {\n        c = fa.get(c);var e = b(c, !1);hb(c, { priorityLevel: e, partialState: null, callback: void 0 === d ? null : d, isReplace: !1, isForced: !0, isTopLevelUnmount: !1, next: null });a(c, e);\n      } };return { adoptClassInstance: e, constructClassInstance: function constructClassInstance(a, b) {\n        var c = a.type,\n            d = Ca(a),\n            f = 2 === a.tag && null != a.type.contextTypes,\n            g = f ? Da(a, d) : ba;b = new c(b, g);e(a, b);f && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = d, a.__reactInternalMemoizedMaskedChildContext = g);return b;\n      }, mountClassInstance: function mountClassInstance(a, b) {\n        var c = a.alternate,\n            d = a.stateNode,\n            e = d.state || null,\n            g = a.pendingProps;g ? void 0 : m(\"158\");var h = Ca(a);d.props = g;d.state = e;d.refs = ba;d.context = Da(a, h);null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent && (a.internalContextTag |= 1);\"function\" === typeof d.componentWillMount && (h = d.state, d.componentWillMount(), h !== d.state && f.enqueueReplaceState(d, d.state, null), h = a.updateQueue, null !== h && (d.state = ac(c, a, h, d, e, g, b)));\"function\" === typeof d.componentDidMount && (a.effectTag |= 4);\n      }, updateClassInstance: function updateClassInstance(a, b, e) {\n        var g = b.stateNode;g.props = b.memoizedProps;g.state = b.memoizedState;var h = b.memoizedProps,\n            k = b.pendingProps;k || (k = h, null == k ? m(\"159\") : void 0);var l = g.context,\n            r = Ca(b);r = Da(b, r);\"function\" !== typeof g.componentWillReceiveProps || h === k && l === r || (l = g.state, g.componentWillReceiveProps(k, r), g.state !== l && f.enqueueReplaceState(g, g.state, null));l = b.memoizedState;\n        e = null !== b.updateQueue ? ac(a, b, b.updateQueue, g, l, k, e) : l;if (!(h !== k || l !== e || S.current || null !== b.updateQueue && b.updateQueue.hasForceUpdate)) return \"function\" !== typeof g.componentDidUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 4), !1;var q = k;if (null === h || null !== b.updateQueue && b.updateQueue.hasForceUpdate) q = !0;else {\n          var t = b.stateNode,\n              w = b.type;q = \"function\" === typeof t.shouldComponentUpdate ? t.shouldComponentUpdate(q, e, r) : w.prototype && w.prototype.isPureReactComponent ? !bc(h, q) || !bc(l, e) : !0;\n        }q ? (\"function\" === typeof g.componentWillUpdate && g.componentWillUpdate(k, e, r), \"function\" === typeof g.componentDidUpdate && (b.effectTag |= 4)) : (\"function\" !== typeof g.componentDidUpdate || h === a.memoizedProps && l === a.memoizedState || (b.effectTag |= 4), c(b, k), d(b, e));g.props = k;g.state = e;g.context = r;return q;\n      } };\n  }function bc(a, b) {\n    if (ld(a, b)) return !0;if (\"object\" !== (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) || null === a || \"object\" !== (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) || null === b) return !1;var c = Object.keys(a),\n        d = Object.keys(b);if (c.length !== d.length) return !1;for (d = 0; d < c.length; d++) {\n      if (!bf.call(b, c[d]) || !ld(a[c[d]], b[c[d]])) return !1;\n    }return !0;\n  }function cc(a, b, c) {\n    b = new F(4, a.key, b);b.pendingProps = a.children || [];b.pendingWorkPriority = c;b.stateNode = { containerInfo: a.containerInfo, implementation: a.implementation };return b;\n  }function dc(a, b, c) {\n    b = new F(7, a.key, b);b.type = a.handler;b.pendingProps = a;b.pendingWorkPriority = c;return b;\n  }function ec(a, b, c) {\n    b = new F(6, null, b);b.pendingProps = a;b.pendingWorkPriority = c;return b;\n  }function md(a, b, c) {\n    b = new F(10, null, b);b.pendingProps = a;b.pendingWorkPriority = c;return b;\n  }\n  function fc(a, b, c) {\n    var d = a.type,\n        e = a.key,\n        f = void 0;\"function\" === typeof d ? (f = d.prototype && d.prototype.isReactComponent ? new F(2, e, b) : new F(0, e, b), f.type = d) : \"string\" === typeof d ? (f = new F(5, e, b), f.type = d) : \"object\" === (typeof d === \"undefined\" ? \"undefined\" : _typeof(d)) && null !== d && \"number\" === typeof d.tag ? f = d : m(\"130\", null == d ? d : typeof d === \"undefined\" ? \"undefined\" : _typeof(d), \"\");b = f;b.pendingProps = a.props;b.pendingWorkPriority = c;return b;\n  }function ad(a, b) {\n    var c = a.alternate;null === c ? (c = new F(a.tag, a.key, a.internalContextTag), c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);c.pendingWorkPriority = b;c.child = a.child;c.memoizedProps = a.memoizedProps;c.memoizedState = a.memoizedState;c.updateQueue = a.updateQueue;c.sibling = a.sibling;c.index = a.index;c.ref = a.ref;return c;\n  }function dd(a) {\n    Ea(a) && (K(S, a), K(ca, a));\n  }function Da(a, b) {\n    var c = a.type.contextTypes;if (!c) return ba;var d = a.stateNode;if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;var e = {},\n        f;for (f in c) {\n      e[f] = b[f];\n    }d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);return e;\n  }function Ca(a) {\n    return Ea(a) ? cb : ca.current;\n  }function L(a, b) {\n    da++;bb[da] = a.current;a.current = b;\n  }function K(a) {\n    0 > da || (a.current = bb[da], bb[da] = null, da--);\n  }function ac(a, b, c, d, e, f, g) {\n    null !== a && a.updateQueue === c && (c = b.updateQueue = { first: c.first, last: c.last, callbackList: null, hasForceUpdate: !1 });a = c.callbackList;for (var h = c.hasForceUpdate, m = !0, l = c.first; null !== l && 0 >= gc(l.priorityLevel, g);) {\n      c.first = l.next;null === c.first && (c.last = null);var r;if (l.isReplace) e = nd(l, d, e, f), m = !0;else if (r = nd(l, d, e, f)) e = m ? q({}, e, r) : q(e, r), m = !1;l.isForced && (h = !0);null === l.callback || l.isTopLevelUnmount && null !== l.next || (a = null !== a ? a : [], a.push(l.callback), b.effectTag |= 32);l = l.next;\n    }c.callbackList = a;c.hasForceUpdate = h;null !== c.first || null !== a || h || (b.updateQueue = null);return e;\n  }function od(a, b) {\n    if (b) {\n      var c = a.firstChild;if (c && c === a.lastChild && 3 === c.nodeType) {\n        c.nodeValue = b;return;\n      }\n    }a.textContent = b;\n  }function hc(a, b) {\n    if (-1 === a.indexOf(\"-\")) return \"string\" === typeof b.is;switch (a) {case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":\n        return !1;default:\n        return !0;}\n  }function ic(a, b) {\n    b && (cf[a] && (null != b.children || null != b.dangerouslySetInnerHTML ? m(\"137\", a, \"\") : void 0), null != b.dangerouslySetInnerHTML && (null != b.children ? m(\"60\") : void 0, \"object\" === _typeof(b.dangerouslySetInnerHTML) && \"__html\" in b.dangerouslySetInnerHTML ? void 0 : m(\"61\")), null != b.style && \"object\" !== _typeof(b.style) ? m(\"62\", \"\") : void 0);\n  }function ib(a) {\n    if (jc[a]) return jc[a];if (!ra[a]) return a;var b = ra[a],\n        c;for (c in b) {\n      if (b.hasOwnProperty(c) && c in pd) return jc[a] = b[c];\n    }return \"\";\n  }function Fa(a, b) {\n    if (!z || b && !(\"addEventListener\" in document)) return !1;b = \"on\" + a;var c = b in document;c || (c = document.createElement(\"div\"), c.setAttribute(b, \"return;\"), c = \"function\" === typeof c[b]);!c && qd && \"wheel\" === a && (c = document.implementation.hasFeature(\"Events.wheel\", \"3.0\"));return c;\n  }function df(a) {\n    return rd(a, !1);\n  }function ef(a) {\n    return rd(a, !0);\n  }function rd(a, b) {\n    a && (Ga.executeDispatchesInOrder(a, b), a.isPersistent() || a.constructor.release(a));\n  }function Ha(a, b, c) {\n    Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);\n  }function sa(a, b) {\n    null == b ? m(\"30\") : void 0;if (null == a) return b;if (Array.isArray(a)) {\n      if (Array.isArray(b)) return a.push.apply(a, b), a;a.push(b);return a;\n    }return Array.isArray(b) ? [a].concat(b) : [a, b];\n  }function jb(a) {\n    a = a.target || a.srcElement || window;a.correspondingUseElement && (a = a.correspondingUseElement);return 3 === a.nodeType ? a.parentNode : a;\n  }function sd(a, b) {\n    return a(b);\n  }function kc(a, b, c, d, e, f) {\n    return a(b, c, d, e, f);\n  }function ff() {\n    if (t._hasRethrowError) {\n      var a = t._rethrowError;t._rethrowError = null;t._hasRethrowError = !1;throw a;\n    }\n  }function td(a, b, c, d, e, f, g, h, m) {\n    t._hasCaughtError = !1;t._caughtError = null;var k = Array.prototype.slice.call(arguments, 3);try {\n      b.apply(c, k);\n    } catch (T) {\n      t._caughtError = T, t._hasCaughtError = !0;\n    }\n  }function Ba(a) {\n    if (\"function\" === typeof a.getName) return a.getName();if (\"number\" === typeof a.tag) {\n      a = a.type;if (\"string\" === typeof a) return a;if (\"function\" === typeof a) return a.displayName || a.name;\n    }return null;\n  }function ka() {}function m(a) {\n    for (var b = arguments.length - 1, c = \"Minified React error #\" + a + \"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\\x3d\" + a, d = 0; d < b; d++) {\n      c += \"\\x26args[]\\x3d\" + encodeURIComponent(arguments[d + 1]);\n    }b = Error(c + \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\");b.name = \"Invariant Violation\";b.framesToPop = 1;throw b;\n  }function Sc(a) {\n    switch (a) {case \"svg\":\n        return \"http://www.w3.org/2000/svg\";\n      case \"math\":\n        return \"http://www.w3.org/1998/Math/MathML\";default:\n        return \"http://www.w3.org/1999/xhtml\";}\n  }function ud() {\n    if (kb) for (var a in ta) {\n      var b = ta[a],\n          c = kb.indexOf(a);-1 < c ? void 0 : m(\"96\", a);if (!ha.plugins[c]) {\n        b.extractEvents ? void 0 : m(\"97\", a);ha.plugins[c] = b;c = b.eventTypes;for (var d in c) {\n          var e = void 0;var f = c[d],\n              g = b,\n              h = d;ha.eventNameDispatchConfigs.hasOwnProperty(h) ? m(\"99\", h) : void 0;ha.eventNameDispatchConfigs[h] = f;var k = f.phasedRegistrationNames;if (k) {\n            for (e in k) {\n              k.hasOwnProperty(e) && vd(k[e], g, h);\n            }e = !0;\n          } else f.registrationName ? (vd(f.registrationName, g, h), e = !0) : e = !1;e ? void 0 : m(\"98\", d, a);\n        }\n      }\n    }\n  }function vd(a, b, c) {\n    ha.registrationNameModules[a] ? m(\"100\", a) : void 0;ha.registrationNameModules[a] = b;ha.registrationNameDependencies[a] = b.eventTypes[c].dependencies;\n  }function lb(a) {\n    return function () {\n      return a;\n    };\n  }function ua(a, b) {\n    return (a & b) === b;\n  }function wd(a) {\n    for (var b; b = a._renderedComponent;) {\n      a = b;\n    }return a;\n  }function xd(a, b) {\n    a = wd(a);a._hostNode = b;b[M] = a;\n  }function lc(a, b) {\n    if (!(a._flags & yd.hasCachedChildNodes)) {\n      var c = a._renderedChildren;b = b.firstChild;\n      var d;a: for (d in c) {\n        if (c.hasOwnProperty(d)) {\n          var e = c[d],\n              f = wd(e)._domID;if (0 !== f) {\n            for (; null !== b; b = b.nextSibling) {\n              var g = b,\n                  h = f;if (1 === g.nodeType && g.getAttribute(gf) === \"\" + h || 8 === g.nodeType && g.nodeValue === \" react-text: \" + h + \" \" || 8 === g.nodeType && g.nodeValue === \" react-empty: \" + h + \" \") {\n                xd(e, b);continue a;\n              }\n            }m(\"32\", f);\n          }\n        }\n      }a._flags |= yd.hasCachedChildNodes;\n    }\n  }function zd(a) {\n    if (a[M]) return a[M];for (var b = []; !a[M];) {\n      if (b.push(a), a.parentNode) a = a.parentNode;else return null;\n    }var c = a[M];if (5 === c.tag || 6 === c.tag) return c;for (; a && (c = a[M]); a = b.pop()) {\n      var d = c;b.length && lc(c, a);\n    }return d;\n  }function mb(a) {\n    var b = a;if (a.alternate) for (; b[\"return\"];) {\n      b = b[\"return\"];\n    } else {\n      if (0 !== (b.effectTag & 2)) return 1;for (; b[\"return\"];) {\n        if (b = b[\"return\"], 0 !== (b.effectTag & 2)) return 1;\n      }\n    }return 3 === b.tag ? 2 : 3;\n  }function Ad(a) {\n    2 !== mb(a) ? m(\"188\") : void 0;\n  }function mc(a) {\n    var b = a.alternate;if (!b) return b = mb(a), 3 === b ? m(\"188\") : void 0, 1 === b ? null : a;for (var c = a, d = b;;) {\n      var e = c[\"return\"],\n          f = e ? e.alternate : null;if (!e || !f) break;if (e.child === f.child) {\n        for (var g = e.child; g;) {\n          if (g === c) return Ad(e), a;if (g === d) return Ad(e), b;g = g.sibling;\n        }m(\"188\");\n      }if (c[\"return\"] !== d[\"return\"]) c = e, d = f;else {\n        g = !1;for (var h = e.child; h;) {\n          if (h === c) {\n            g = !0;c = e;d = f;break;\n          }if (h === d) {\n            g = !0;d = e;c = f;break;\n          }h = h.sibling;\n        }if (!g) {\n          for (h = f.child; h;) {\n            if (h === c) {\n              g = !0;c = f;d = e;break;\n            }if (h === d) {\n              g = !0;d = f;c = e;break;\n            }h = h.sibling;\n          }g ? void 0 : m(\"189\");\n        }\n      }c.alternate !== d ? m(\"190\") : void 0;\n    }3 !== c.tag ? m(\"188\") : void 0;return c.stateNode.current === c ? a : b;\n  }function Bd(a, b, c, d) {\n    b = a.type || \"unknown-event\";a.currentTarget = nc.getNodeFromInstance(d);Cd.invokeGuardedCallbackAndCatchFirstError(b, c, void 0, a);a.currentTarget = null;\n  }function Dd(a) {\n    if (a = Ga.getInstanceFromNode(a)) if (\"number\" === typeof a.tag) {\n      nb && \"function\" === typeof nb.restoreControlledState ? void 0 : m(\"194\");var b = Ga.getFiberCurrentPropsFromNode(a.stateNode);nb.restoreControlledState(a.stateNode, a.type, b);\n    } else \"function\" !== typeof a.restoreControlledState ? m(\"195\") : void 0, a.restoreControlledState();\n  }function Ed(a, b) {\n    return sd(a, b);\n  }function hf(a) {\n    var b = a.targetInst;do {\n      if (!b) {\n        a.ancestors.push(b);break;\n      }var c = b;if (\"number\" === typeof c.tag) {\n        for (; c[\"return\"];) {\n          c = c[\"return\"];\n        }c = 3 !== c.tag ? null : c.stateNode.containerInfo;\n      } else {\n        for (; c._hostParent;) {\n          c = c._hostParent;\n        }c = N.getNodeFromInstance(c).parentNode;\n      }if (!c) break;a.ancestors.push(b);b = N.getClosestInstanceFromNode(c);\n    } while (b);for (c = 0; c < a.ancestors.length; c++) {\n      b = a.ancestors[c], ia._handleTopLevel(a.topLevelType, b, a.nativeEvent, jb(a.nativeEvent));\n    }\n  }function Fd(a, b, c) {\n    switch (a) {case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":\n        return !(!c.disabled || \"button\" !== b && \"input\" !== b && \"select\" !== b && \"textarea\" !== b);default:\n        return !1;}\n  }function ob(a, b) {\n    var c = {};c[a.toLowerCase()] = b.toLowerCase();c[\"Webkit\" + a] = \"webkit\" + b;c[\"Moz\" + a] = \"moz\" + b;c[\"ms\" + a] = \"MS\" + b;c[\"O\" + a] = \"o\" + b.toLowerCase();return c;\n  }function Gd(a) {\n    Object.prototype.hasOwnProperty.call(a, pb) || (a[pb] = jf++, Hd[a[pb]] = {});return Hd[a[pb]];\n  }function kf(a) {\n    if (Id.hasOwnProperty(a)) return !0;if (Jd.hasOwnProperty(a)) return !1;if (lf.test(a)) return Id[a] = !0;Jd[a] = !0;return !1;\n  }function Kd() {\n    return null;\n  }function mf(a) {\n    var b = \"\";Za.Children.forEach(a, function (a) {\n      null == a || \"string\" !== typeof a && \"number\" !== typeof a || (b += a);\n    });return b;\n  }function va(a, b, c) {\n    a = a.options;if (b) {\n      b = {};for (var d = 0; d < c.length; d++) {\n        b[\"$\" + c[d]] = !0;\n      }for (c = 0; c < a.length; c++) {\n        d = b.hasOwnProperty(\"$\" + a[c].value), a[c].selected !== d && (a[c].selected = d);\n      }\n    } else {\n      c = \"\" + c;b = null;for (d = 0; d < a.length; d++) {\n        if (a[d].value === c) {\n          a[d].selected = !0;return;\n        }null !== b || a[d].disabled || (b = a[d]);\n      }null !== b && (b.selected = !0);\n    }\n  }function Ld(a) {\n    var b = a.type;return (a = a.nodeName) && \"input\" === a.toLowerCase() && (\"checkbox\" === b || \"radio\" === b);\n  }function nf(a) {\n    var b = Ld(a) ? \"checked\" : \"value\",\n        c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),\n        d = \"\" + a[b];if (!a.hasOwnProperty(b) && \"function\" === typeof c.get && \"function\" === typeof c.set) return Object.defineProperty(a, b, { enumerable: c.enumerable, configurable: !0, get: function get() {\n        return c.get.call(this);\n      }, set: function set(a) {\n        d = \"\" + a;c.set.call(this, a);\n      } }), { getValue: function getValue() {\n        return d;\n      }, setValue: function setValue(a) {\n        d = \"\" + a;\n      }, stopTracking: function stopTracking() {\n        a._valueTracker = null;delete a[b];\n      } };\n  }\n  function R(a, b) {\n    of(b, 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument);\n  }function gc(a, b) {\n    return 2 !== a && 1 !== a || 2 !== b && 1 !== b ? 0 === a && 0 !== b ? -255 : 0 !== a && 0 === b ? 255 : a - b : 0;\n  }function Md() {\n    return { first: null, last: null, hasForceUpdate: !1, callbackList: null };\n  }function oc(a, b, c, d) {\n    null !== c ? c.next = b : (b.next = a.first, a.first = b);null !== d ? b.next = d : a.last = b;\n  }function Nd(a, b) {\n    b = b.priorityLevel;var c = null;if (null !== a.last && 0 >= gc(a.last.priorityLevel, b)) c = a.last;else for (a = a.first; null !== a && 0 >= gc(a.priorityLevel, b);) {\n      c = a, a = a.next;\n    }return c;\n  }function hb(a, b) {\n    var c = a.alternate,\n        d = a.updateQueue;null === d && (d = a.updateQueue = Md());null !== c ? (a = c.updateQueue, null === a && (a = c.updateQueue = Md())) : a = null;pc = d;qc = a !== d ? a : null;var e = pc;c = qc;var f = Nd(e, b),\n        g = null !== f ? f.next : e.first;if (null === c) return oc(e, b, f, g), null;d = Nd(c, b);a = null !== d ? d.next : c.first;oc(e, b, f, g);if (g === a && null !== g || f === d && null !== f) return null === d && (c.first = b), null === a && (c.last = null), null;b = { priorityLevel: b.priorityLevel, partialState: b.partialState, callback: b.callback, isReplace: b.isReplace,\n      isForced: b.isForced, isTopLevelUnmount: b.isTopLevelUnmount, next: null };oc(c, b, d, a);return b;\n  }function nd(a, b, c, d) {\n    a = a.partialState;return \"function\" === typeof a ? a.call(b, c, d) : a;\n  }function Ea(a) {\n    return 2 === a.tag && null != a.type.childContextTypes;\n  }function kd(a, b) {\n    var c = a.stateNode,\n        d = a.type.childContextTypes;if (\"function\" !== typeof c.getChildContext) return b;c = c.getChildContext();for (var e in c) {\n      e in d ? void 0 : m(\"108\", Ba(a) || \"Unknown\", e);\n    }return q({}, b, c);\n  }function F(a, b, c) {\n    this.tag = a;this.key = b;this.stateNode = this.type = null;this.sibling = this.child = this[\"return\"] = null;this.index = 0;this.memoizedState = this.updateQueue = this.memoizedProps = this.pendingProps = this.ref = null;this.internalContextTag = c;this.effectTag = 0;this.lastEffect = this.firstEffect = this.nextEffect = null;this.pendingWorkPriority = 0;this.alternate = null;\n  }function Ia(a) {\n    if (null === a || \"undefined\" === typeof a) return null;a = Od && a[Od] || a[\"@@iterator\"];return \"function\" === typeof a ? a : null;\n  }function Ja(a, b) {\n    var c = b.ref;if (null !== c && \"function\" !== typeof c) {\n      if (b._owner) {\n        b = b._owner;\n        var d = void 0;b && (\"number\" === typeof b.tag ? (2 !== b.tag ? m(\"110\") : void 0, d = b.stateNode) : d = b.getPublicInstance());d ? void 0 : m(\"147\", c);var e = \"\" + c;if (null !== a && null !== a.ref && a.ref._stringRef === e) return a.ref;a = function a(_a) {\n          var b = d.refs === ba ? d.refs = {} : d.refs;null === _a ? delete b[e] : b[e] = _a;\n        };a._stringRef = e;return a;\n      }\"string\" !== typeof c ? m(\"148\") : void 0;b._owner ? void 0 : m(\"149\", c);\n    }return c;\n  }function qb(a, b) {\n    \"textarea\" !== a.type && m(\"31\", \"[object Object]\" === Object.prototype.toString.call(b) ? \"object with keys {\" + Object.keys(b).join(\", \") + \"}\" : b, \"\");\n  }function rc(a, b) {\n    function c(c, d) {\n      if (b) {\n        if (!a) {\n          if (null === d.alternate) return;d = d.alternate;\n        }var e = c.lastEffect;null !== e ? (e.nextEffect = d, c.lastEffect = d) : c.firstEffect = c.lastEffect = d;d.nextEffect = null;d.effectTag = 8;\n      }\n    }function d(a, d) {\n      if (!b) return null;for (; null !== d;) {\n        c(a, d), d = d.sibling;\n      }return null;\n    }function e(a, b) {\n      for (a = new Map(); null !== b;) {\n        null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;\n      }return a;\n    }function f(b, c) {\n      if (a) return b = $b(b, c), b.index = 0, b.sibling = null, b;b.pendingWorkPriority = c;b.effectTag = 0;b.index = 0;b.sibling = null;return b;\n    }function g(a, c, d) {\n      a.index = d;if (!b) return c;d = a.alternate;if (null !== d) return d = d.index, d < c ? (a.effectTag = 2, c) : d;a.effectTag = 2;return c;\n    }function h(a) {\n      b && null === a.alternate && (a.effectTag = 2);return a;\n    }function k(a, b, c, d) {\n      if (null === b || 6 !== b.tag) return c = ec(c, a.internalContextTag, d), c[\"return\"] = a, c;b = f(b, d);b.pendingProps = c;b[\"return\"] = a;return b;\n    }function l(a, b, c, d) {\n      if (null === b || b.type !== c.type) return d = fc(c, a.internalContextTag, d), d.ref = Ja(b, c), d[\"return\"] = a, d;d = f(b, d);\n      d.ref = Ja(b, c);d.pendingProps = c.props;d[\"return\"] = a;return d;\n    }function r(a, b, c, d) {\n      if (null === b || 7 !== b.tag) return c = dc(c, a.internalContextTag, d), c[\"return\"] = a, c;b = f(b, d);b.pendingProps = c;b[\"return\"] = a;return b;\n    }function q(a, b, c, d) {\n      if (null === b || 9 !== b.tag) return b = new F(9, null, a.internalContextTag), b.type = c.value, b[\"return\"] = a, b;b = f(b, d);b.type = c.value;b[\"return\"] = a;return b;\n    }function t(a, b, c, d) {\n      if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return c = cc(c, a.internalContextTag, d), c[\"return\"] = a, c;b = f(b, d);b.pendingProps = c.children || [];b[\"return\"] = a;return b;\n    }function w(a, b, c, d) {\n      if (null === b || 10 !== b.tag) return c = md(c, a.internalContextTag, d), c[\"return\"] = a, c;b = f(b, d);b.pendingProps = c;b[\"return\"] = a;return b;\n    }function z(a, b, c) {\n      if (\"string\" === typeof b || \"number\" === typeof b) return b = ec(\"\" + b, a.internalContextTag, c), b[\"return\"] = a, b;if (\"object\" === (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) && null !== b) {\n        switch (b.$$typeof) {case rb:\n            return c = fc(b, a.internalContextTag, c), c.ref = Ja(null, b), c[\"return\"] = a, c;case sb:\n            return b = dc(b, a.internalContextTag, c), b[\"return\"] = a, b;case tb:\n            return c = new F(9, null, a.internalContextTag), c.type = b.value, c[\"return\"] = a, c;case ub:\n            return b = cc(b, a.internalContextTag, c), b[\"return\"] = a, b;}if (vb(b) || Ia(b)) return b = md(b, a.internalContextTag, c), b[\"return\"] = a, b;qb(a, b);\n      }return null;\n    }function A(a, b, c, d) {\n      var e = null !== b ? b.key : null;if (\"string\" === typeof c || \"number\" === typeof c) return null !== e ? null : k(a, b, \"\" + c, d);if (\"object\" === (typeof c === \"undefined\" ? \"undefined\" : _typeof(c)) && null !== c) {\n        switch (c.$$typeof) {case rb:\n            return c.key === e ? l(a, b, c, d) : null;case sb:\n            return c.key === e ? r(a, b, c, d) : null;case tb:\n            return null === e ? q(a, b, c, d) : null;case ub:\n            return c.key === e ? t(a, b, c, d) : null;}if (vb(c) || Ia(c)) return null !== e ? null : w(a, b, c, d);qb(a, c);\n      }return null;\n    }function B(a, b, c, d, e) {\n      if (\"string\" === typeof d || \"number\" === typeof d) return a = a.get(c) || null, k(b, a, \"\" + d, e);if (\"object\" === (typeof d === \"undefined\" ? \"undefined\" : _typeof(d)) && null !== d) {\n        switch (d.$$typeof) {case rb:\n            return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);case sb:\n            return a = a.get(null === d.key ? c : d.key) || null, r(b, a, d, e);case tb:\n            return a = a.get(c) || null, q(b, a, d, e);case ub:\n            return a = a.get(null === d.key ? c : d.key) || null, t(b, a, d, e);}if (vb(d) || Ia(d)) return a = a.get(c) || null, w(b, a, d, e);qb(b, d);\n      }return null;\n    }function C(a, f, h, m) {\n      for (var p = null, n = null, l = f, k = f = 0, v = null; null !== l && k < h.length; k++) {\n        l.index > k ? (v = l, l = null) : v = l.sibling;var r = A(a, l, h[k], m);if (null === r) {\n          null === l && (l = v);break;\n        }b && l && null === r.alternate && c(a, l);f = g(r, f, k);null === n ? p = r : n.sibling = r;n = r;l = v;\n      }if (k === h.length) return d(a, l), p;if (null === l) {\n        for (; k < h.length; k++) {\n          if (l = z(a, h[k], m)) f = g(l, f, k), null === n ? p = l : n.sibling = l, n = l;\n        }return p;\n      }for (l = e(a, l); k < h.length; k++) {\n        if (v = B(l, a, k, h[k], m)) {\n          if (b && null !== v.alternate) l[\"delete\"](null === v.key ? k : v.key);f = g(v, f, k);null === n ? p = v : n.sibling = v;n = v;\n        }\n      }b && l.forEach(function (b) {\n        return c(a, b);\n      });return p;\n    }function x(a, f, h, l) {\n      var p = Ia(h);\"function\" !== typeof p ? m(\"150\") : void 0;h = p.call(h);null == h ? m(\"151\") : void 0;for (var n = p = null, k = f, v = f = 0, r = null, q = h.next(); null !== k && !q.done; v++, q = h.next()) {\n        k.index > v ? (r = k, k = null) : r = k.sibling;var t = A(a, k, q.value, l);if (null === t) {\n          k || (k = r);break;\n        }b && k && null === t.alternate && c(a, k);f = g(t, f, v);null === n ? p = t : n.sibling = t;n = t;k = r;\n      }if (q.done) return d(a, k), p;if (null === k) {\n        for (; !q.done; v++, q = h.next()) {\n          q = z(a, q.value, l), null !== q && (f = g(q, f, v), null === n ? p = q : n.sibling = q, n = q);\n        }return p;\n      }for (k = e(a, k); !q.done; v++, q = h.next()) {\n        if (q = B(k, a, v, q.value, l), null !== q) {\n          if (b && null !== q.alternate) k[\"delete\"](null === q.key ? v : q.key);f = g(q, f, v);null === n ? p = q : n.sibling = q;n = q;\n        }\n      }b && k.forEach(function (b) {\n        return c(a, b);\n      });return p;\n    }return function (a, b, e, g) {\n      var k = \"object\" === (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && null !== e;if (k) switch (e.$$typeof) {case rb:\n          a: {\n            var l = e.key;for (k = b; null !== k;) {\n              if (k.key === l) {\n                if (k.type === e.type) {\n                  d(a, k.sibling);b = f(k, g);b.ref = Ja(k, e);b.pendingProps = e.props;b[\"return\"] = a;a = b;break a;\n                } else {\n                  d(a, k);break;\n                }\n              } else c(a, k);k = k.sibling;\n            }g = fc(e, a.internalContextTag, g);g.ref = Ja(b, e);g[\"return\"] = a;a = g;\n          }return h(a);case sb:\n          a: {\n            for (k = e.key; null !== b;) {\n              if (b.key === k) {\n                if (7 === b.tag) {\n                  d(a, b.sibling);b = f(b, g);b.pendingProps = e;b[\"return\"] = a;a = b;break a;\n                } else {\n                  d(a, b);break;\n                }\n              } else c(a, b);b = b.sibling;\n            }e = dc(e, a.internalContextTag, g);e[\"return\"] = a;a = e;\n          }return h(a);case tb:\n          a: {\n            if (null !== b) if (9 === b.tag) {\n              d(a, b.sibling);b = f(b, g);b.type = e.value;b[\"return\"] = a;a = b;break a;\n            } else d(a, b);b = new F(9, null, a.internalContextTag);b.type = e.value;b[\"return\"] = a;a = b;\n          }return h(a);case ub:\n          a: {\n            for (k = e.key; null !== b;) {\n              if (b.key === k) {\n                if (4 === b.tag && b.stateNode.containerInfo === e.containerInfo && b.stateNode.implementation === e.implementation) {\n                  d(a, b.sibling);b = f(b, g);b.pendingProps = e.children || [];b[\"return\"] = a;a = b;break a;\n                } else {\n                  d(a, b);break;\n                }\n              } else c(a, b);b = b.sibling;\n            }e = cc(e, a.internalContextTag, g);e[\"return\"] = a;a = e;\n          }return h(a);}if (\"string\" === typeof e || \"number\" === typeof e) return e = \"\" + e, null !== b && 6 === b.tag ? (d(a, b.sibling), b = f(b, g), b.pendingProps = e, b[\"return\"] = a, a = b) : (d(a, b), e = ec(e, a.internalContextTag, g), e[\"return\"] = a, a = e), h(a);if (vb(e)) return C(a, b, e, g);if (Ia(e)) return x(a, b, e, g);k && qb(a, e);if (\"undefined\" === typeof e) switch (a.tag) {case 2:case 1:\n          e = a.type, m(\"152\", e.displayName || e.name || \"Component\");}return d(a, b);\n    };\n  }function ld(a, b) {\n    return a === b ? 0 !== a || 0 !== b || 1 / a === 1 / b : a !== a && b !== b;\n  }function Pd(a) {\n    return function (b) {\n      try {\n        return a(b);\n      } catch (c) {}\n    };\n  }function sc(a) {\n    if (!a) return ba;a = fa.get(a);return \"number\" === typeof a.tag ? $c(a) : a._processChildContext(a._context);\n  }function Zc(a) {\n    for (; a && a.firstChild;) {\n      a = a.firstChild;\n    }return a;\n  }function Qd(a, b) {\n    return a && b ? a === b ? !0 : Wc(a) ? !1 : Wc(b) ? Qd(a, b.parentNode) : \"contains\" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;\n  }function C(a) {\n    if (void 0 !== a._hostParent) return a._hostParent;if (\"number\" === typeof a.tag) {\n      do {\n        a = a[\"return\"];\n      } while (a && 5 !== a.tag);if (a) return a;\n    }return null;\n  }function Rd(a, b) {\n    for (var c = 0, d = a; d; d = C(d)) {\n      c++;\n    }d = 0;for (var e = b; e; e = C(e)) {\n      d++;\n    }for (; 0 < c - d;) {\n      a = C(a), c--;\n    }for (; 0 < d - c;) {\n      b = C(b), d--;\n    }for (; c--;) {\n      if (a === b || a === b.alternate) return a;a = C(a);b = C(b);\n    }return null;\n  }function Sd(a, b, c) {\n    if (b = Td(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = sa(c._dispatchListeners, b), c._dispatchInstances = sa(c._dispatchInstances, a);\n  }function pf(a) {\n    a && a.dispatchConfig.phasedRegistrationNames && wb.traverseTwoPhase(a._targetInst, Sd, a);\n  }function qf(a) {\n    if (a && a.dispatchConfig.phasedRegistrationNames) {\n      var b = a._targetInst;b = b ? wb.getParentInstance(b) : null;wb.traverseTwoPhase(b, Sd, a);\n    }\n  }function Ud(a, b, c) {\n    a && c && c.dispatchConfig.registrationName && (b = Td(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = sa(c._dispatchListeners, b), c._dispatchInstances = sa(c._dispatchInstances, a));\n  }function rf(a) {\n    a && a.dispatchConfig.registrationName && Ud(a._targetInst, null, a);\n  }function Ka(a, b, c, d) {\n    this.dispatchConfig = a;this._targetInst = b;this.nativeEvent = c;a = this.constructor.Interface;for (var e in a) {\n      a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : \"target\" === e ? this.target = d : this[e] = c[e]);\n    }this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? w.thatReturnsTrue : w.thatReturnsFalse;this.isPropagationStopped = w.thatReturnsFalse;return this;\n  }function sf(a, b, c, d) {\n    if (this.eventPool.length) {\n      var e = this.eventPool.pop();this.call(e, a, b, c, d);return e;\n    }return new this(a, b, c, d);\n  }function tf(a) {\n    a instanceof this ? void 0 : m(\"223\");a.destructor();\n    10 > this.eventPool.length && this.eventPool.push(a);\n  }function Vd(a) {\n    a.eventPool = [];a.getPooled = sf;a.release = tf;\n  }function Wd(a, b, c, d) {\n    return O.call(this, a, b, c, d);\n  }function Xd(a, b, c, d) {\n    return O.call(this, a, b, c, d);\n  }function uf() {\n    var a = window.opera;return \"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && \"function\" === typeof a.version && 12 >= parseInt(a.version(), 10);\n  }function Yd(a, b) {\n    switch (a) {case \"topKeyUp\":\n        return -1 !== vf.indexOf(b.keyCode);case \"topKeyDown\":\n        return 229 !== b.keyCode;case \"topKeyPress\":case \"topMouseDown\":case \"topBlur\":\n        return !0;\n      default:\n        return !1;}\n  }function Zd(a) {\n    a = a.detail;return \"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && \"data\" in a ? a.data : null;\n  }function wf(a, b) {\n    switch (a) {case \"topCompositionEnd\":\n        return Zd(b);case \"topKeyPress\":\n        if (32 !== b.which) return null;$d = !0;return ae;case \"topTextInput\":\n        return a = b.data, a === ae && $d ? null : a;default:\n        return null;}\n  }function xf(a, b) {\n    if (wa) return \"topCompositionEnd\" === a || !tc && Yd(a, b) ? (a = xb.getData(), xb.reset(), wa = !1, a) : null;switch (a) {case \"topPaste\":\n        return null;case \"topKeyPress\":\n        if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {\n          if (b.char && 1 < b.char.length) return b.char;if (b.which) return String.fromCharCode(b.which);\n        }return null;case \"topCompositionEnd\":\n        return be ? null : b.data;default:\n        return null;}\n  }function ce(a, b, c) {\n    a = O.getPooled(de.change, a, b, c);a.type = \"change\";yb.enqueueStateRestore(c);la.accumulateTwoPhaseDispatches(a);return a;\n  }function yf(a) {\n    X.enqueueEvents(a);X.processEventQueue(!1);\n  }function zb(a) {\n    var b = N.getNodeFromInstance(a);if (xa.updateValueIfChanged(b)) return a;\n  }function zf(a, b) {\n    if (\"topChange\" === a) return b;\n  }\n  function ee() {\n    La && (La.detachEvent(\"onpropertychange\", fe), Ma = La = null);\n  }function fe(a) {\n    \"value\" === a.propertyName && zb(Ma) && (a = ce(Ma, a, jb(a)), Ab.batchedUpdates(yf, a));\n  }function Af(a, b, c) {\n    \"topFocus\" === a ? (ee(), La = b, Ma = c, La.attachEvent(\"onpropertychange\", fe)) : \"topBlur\" === a && ee();\n  }function Bf(a) {\n    if (\"topSelectionChange\" === a || \"topKeyUp\" === a || \"topKeyDown\" === a) return zb(Ma);\n  }function Cf(a, b) {\n    if (\"topClick\" === a) return zb(b);\n  }function Df(a, b) {\n    if (\"topInput\" === a || \"topChange\" === a) return zb(b);\n  }function ge(a, b, c, d) {\n    return O.call(this, a, b, c, d);\n  }function Ne(a) {\n    var b = this.nativeEvent;return b.getModifierState ? b.getModifierState(a) : (a = Ef[a]) ? !!b[a] : !1;\n  }function he(a, b, c, d) {\n    return Y.call(this, a, b, c, d);\n  }function ie(a, b) {\n    if (uc || null == ya || ya !== Qb()) return null;var c = ya;\"selectionStart\" in c && vc.hasSelectionCapabilities(c) ? c = { start: c.selectionStart, end: c.selectionEnd } : window.getSelection ? (c = window.getSelection(), c = { anchorNode: c.anchorNode, anchorOffset: c.anchorOffset, focusNode: c.focusNode, focusOffset: c.focusOffset }) : c = void 0;return Na && bc(Na, c) ? null : (Na = c, a = O.getPooled(je.select, wc, a, b), a.type = \"select\", a.target = ya, la.accumulateTwoPhaseDispatches(a), a);\n  }function ke(a, b, c, d) {\n    return O.call(this, a, b, c, d);\n  }function le(a, b, c, d) {\n    return O.call(this, a, b, c, d);\n  }function me(a, b, c, d) {\n    return Y.call(this, a, b, c, d);\n  }function ne(a, b, c, d) {\n    return Y.call(this, a, b, c, d);\n  }function oe(a, b, c, d) {\n    return ma.call(this, a, b, c, d);\n  }function pe(a, b, c, d) {\n    return Y.call(this, a, b, c, d);\n  }function qe(a, b, c, d) {\n    return O.call(this, a, b, c, d);\n  }function re(a, b, c, d) {\n    return ma.call(this, a, b, c, d);\n  }function xc(a) {\n    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || \" react-mount-point-unstable \" !== a.nodeValue));\n  }function Ff(a) {\n    a = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null;return !(!a || 1 !== a.nodeType || !a.hasAttribute(Gf));\n  }function Bb(a, b, c, d, e) {\n    xc(c) ? void 0 : m(\"200\");var f = c._reactRootContainer;if (f) B.updateContainer(b, f, a, e);else {\n      if (!d && !Ff(c)) for (d = void 0; d = c.lastChild;) {\n        c.removeChild(d);\n      }var g = B.createContainer(c);f = c._reactRootContainer = g;B.unbatchedUpdates(function () {\n        B.updateContainer(b, g, a, e);\n      });\n    }return B.getPublicRootInstance(f);\n  }function se(a, b) {\n    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;xc(b) ? void 0 : m(\"200\");return te.createPortal(a, b, null, c);\n  }Za ? void 0 : m(\"227\");var z = !(\"undefined\" === typeof window || !window.document || !window.document.createElement),\n      q = Za.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.assign,\n      kb = null,\n      ta = {},\n      ha = { plugins: [], eventNameDispatchConfigs: {}, registrationNameModules: {}, registrationNameDependencies: {}, possibleRegistrationNames: null, injectEventPluginOrder: function injectEventPluginOrder(a) {\n      kb ? m(\"101\") : void 0;kb = Array.prototype.slice.call(a);ud();\n    }, injectEventPluginsByName: function injectEventPluginsByName(a) {\n      var b = !1,\n          c;for (c in a) {\n        if (a.hasOwnProperty(c)) {\n          var d = a[c];ta.hasOwnProperty(c) && ta[c] === d || (ta[c] ? m(\"102\", c) : void 0, ta[c] = d, b = !0);\n        }\n      }b && ud();\n    } },\n      na = ha;ka.thatReturns = lb;ka.thatReturnsFalse = lb(!1);ka.thatReturnsTrue = lb(!0);ka.thatReturnsNull = lb(null);ka.thatReturnsThis = function () {\n    return this;\n  };ka.thatReturnsArgument = function (a) {\n    return a;\n  };var w = ka,\n      ue = { listen: function listen(a, b, c) {\n      if (a.addEventListener) return a.addEventListener(b, c, !1), { remove: function remove() {\n          a.removeEventListener(b, c, !1);\n        } };if (a.attachEvent) return a.attachEvent(\"on\" + b, c), { remove: function remove() {\n          a.detachEvent(\"on\" + b, c);\n        } };\n    }, capture: function capture(a, b, c) {\n      return a.addEventListener ? (a.addEventListener(b, c, !0), { remove: function remove() {\n          a.removeEventListener(b, c, !0);\n        } }) : { remove: w };\n    }, registerDefault: function registerDefault() {} },\n      Hf = { children: !0, dangerouslySetInnerHTML: !0, autoFocus: !0, defaultValue: !0, defaultChecked: !0, innerHTML: !0, suppressContentEditableWarning: !0, style: !0 },\n      ve = { MUST_USE_PROPERTY: 1, HAS_BOOLEAN_VALUE: 4,\n    HAS_NUMERIC_VALUE: 8, HAS_POSITIVE_NUMERIC_VALUE: 24, HAS_OVERLOADED_BOOLEAN_VALUE: 32, HAS_STRING_BOOLEAN_VALUE: 64, injectDOMPropertyConfig: function injectDOMPropertyConfig(a) {\n      var b = ve,\n          c = a.Properties || {},\n          d = a.DOMAttributeNamespaces || {},\n          e = a.DOMAttributeNames || {};a = a.DOMMutationMethods || {};for (var f in c) {\n        aa.properties.hasOwnProperty(f) ? m(\"48\", f) : void 0;var g = f.toLowerCase(),\n            h = c[f];g = { attributeName: g, attributeNamespace: null, propertyName: f, mutationMethod: null, mustUseProperty: ua(h, b.MUST_USE_PROPERTY), hasBooleanValue: ua(h, b.HAS_BOOLEAN_VALUE),\n          hasNumericValue: ua(h, b.HAS_NUMERIC_VALUE), hasPositiveNumericValue: ua(h, b.HAS_POSITIVE_NUMERIC_VALUE), hasOverloadedBooleanValue: ua(h, b.HAS_OVERLOADED_BOOLEAN_VALUE), hasStringBooleanValue: ua(h, b.HAS_STRING_BOOLEAN_VALUE) };1 >= g.hasBooleanValue + g.hasNumericValue + g.hasOverloadedBooleanValue ? void 0 : m(\"50\", f);e.hasOwnProperty(f) && (g.attributeName = e[f]);d.hasOwnProperty(f) && (g.attributeNamespace = d[f]);a.hasOwnProperty(f) && (g.mutationMethod = a[f]);aa.properties[f] = g;\n      }\n    } },\n      aa = { ID_ATTRIBUTE_NAME: \"data-reactid\",\n    ROOT_ATTRIBUTE_NAME: \"data-reactroot\", ATTRIBUTE_NAME_START_CHAR: \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\", ATTRIBUTE_NAME_CHAR: \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\", properties: {}, shouldSetAttribute: function shouldSetAttribute(a, b) {\n      if (aa.isReservedProp(a) || !(\"o\" !== a[0] && \"O\" !== a[0] || \"n\" !== a[1] && \"N\" !== a[1])) return !1;if (null === b) return !0;switch (typeof b === \"undefined\" ? \"undefined\" : _typeof(b)) {case \"boolean\":\n          return aa.shouldAttributeAcceptBooleanValue(a);case \"undefined\":case \"number\":case \"string\":case \"object\":\n          return !0;default:\n          return !1;}\n    }, getPropertyInfo: function getPropertyInfo(a) {\n      return aa.properties.hasOwnProperty(a) ? aa.properties[a] : null;\n    }, shouldAttributeAcceptBooleanValue: function shouldAttributeAcceptBooleanValue(a) {\n      if (aa.isReservedProp(a)) return !0;var b = aa.getPropertyInfo(a);if (b) return b.hasBooleanValue || b.hasStringBooleanValue || b.hasOverloadedBooleanValue;a = a.toLowerCase().slice(0, 5);return \"data-\" === a || \"aria-\" === a;\n    }, isReservedProp: function isReservedProp(a) {\n      return Hf.hasOwnProperty(a);\n    }, injection: ve },\n      A = aa,\n      gf = A.ID_ATTRIBUTE_NAME,\n      yd = { hasCachedChildNodes: 1 },\n      we = Math.random().toString(36).slice(2),\n      M = \"__reactInternalInstance$\" + we,\n      xe = \"__reactEventHandlers$\" + we,\n      N = { getClosestInstanceFromNode: zd, getInstanceFromNode: function getInstanceFromNode(a) {\n      var b = a[M];if (b) return 5 === b.tag || 6 === b.tag ? b : b._hostNode === a ? b : null;b = zd(a);return null != b && b._hostNode === a ? b : null;\n    }, getNodeFromInstance: function getNodeFromInstance(a) {\n      if (5 === a.tag || 6 === a.tag) return a.stateNode;void 0 === a._hostNode ? m(\"33\") : void 0;if (a._hostNode) return a._hostNode;for (var b = []; !a._hostNode;) {\n        b.push(a), a._hostParent ? void 0 : m(\"34\"), a = a._hostParent;\n      }for (; b.length; a = b.pop()) {\n        lc(a, a._hostNode);\n      }return a._hostNode;\n    }, precacheChildNodes: lc, precacheNode: xd, uncacheNode: function uncacheNode(a) {\n      var b = a._hostNode;b && (delete b[M], a._hostNode = null);\n    }, precacheFiberNode: function precacheFiberNode(a, b) {\n      b[M] = a;\n    }, getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(a) {\n      return a[xe] || null;\n    }, updateFiberProps: function updateFiberProps(a, b) {\n      a[xe] = b;\n    } },\n      fa = { remove: function remove(a) {\n      a._reactInternalFiber = void 0;\n    }, get: function get(a) {\n      return a._reactInternalFiber;\n    }, has: function has(a) {\n      return void 0 !== a._reactInternalFiber;\n    }, set: function set(a, b) {\n      a._reactInternalFiber = b;\n    } },\n      yc = { ReactCurrentOwner: Za.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner },\n      Oa = { isFiberMounted: function isFiberMounted(a) {\n      return 2 === mb(a);\n    }, isMounted: function isMounted(a) {\n      return (a = fa.get(a)) ? 2 === mb(a) : !1;\n    }, findCurrentFiberUsingSlowPath: mc, findCurrentHostFiber: function findCurrentHostFiber(a) {\n      a = mc(a);if (!a) return null;for (var b = a;;) {\n        if (5 === b.tag || 6 === b.tag) return b;if (b.child) b.child[\"return\"] = b, b = b.child;else {\n          if (b === a) break;for (; !b.sibling;) {\n            if (!b[\"return\"] || b[\"return\"] === a) return null;b = b[\"return\"];\n          }b.sibling[\"return\"] = b[\"return\"];b = b.sibling;\n        }\n      }return null;\n    }, findCurrentHostFiberWithNoPortals: function findCurrentHostFiberWithNoPortals(a) {\n      a = mc(a);if (!a) return null;for (var b = a;;) {\n        if (5 === b.tag || 6 === b.tag) return b;if (b.child && 4 !== b.tag) b.child[\"return\"] = b, b = b.child;else {\n          if (b === a) break;for (; !b.sibling;) {\n            if (!b[\"return\"] || b[\"return\"] === a) return null;b = b[\"return\"];\n          }b.sibling[\"return\"] = b[\"return\"];b = b.sibling;\n        }\n      }return null;\n    } },\n      t = { _caughtError: null, _hasCaughtError: !1, _rethrowError: null, _hasRethrowError: !1, injection: { injectErrorUtils: function injectErrorUtils(a) {\n        \"function\" !== typeof a.invokeGuardedCallback ? m(\"197\") : void 0;td = a.invokeGuardedCallback;\n      } }, invokeGuardedCallback: function invokeGuardedCallback(a, b, c, d, e, f, g, h, k) {\n      td.apply(t, arguments);\n    }, invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(a, b, c, d, e, f, g, h, k) {\n      t.invokeGuardedCallback.apply(this, arguments);if (t.hasCaughtError()) {\n        var l = t.clearCaughtError();t._hasRethrowError || (t._hasRethrowError = !0, t._rethrowError = l);\n      }\n    }, rethrowCaughtError: function rethrowCaughtError() {\n      return ff.apply(t, arguments);\n    }, hasCaughtError: function hasCaughtError() {\n      return t._hasCaughtError;\n    }, clearCaughtError: function clearCaughtError() {\n      if (t._hasCaughtError) {\n        var a = t._caughtError;t._caughtError = null;t._hasCaughtError = !1;return a;\n      }m(\"198\");\n    } },\n      Cd = t,\n      Cb,\n      nc = { isEndish: function isEndish(a) {\n      return \"topMouseUp\" === a || \"topTouchEnd\" === a || \"topTouchCancel\" === a;\n    }, isMoveish: function isMoveish(a) {\n      return \"topMouseMove\" === a || \"topTouchMove\" === a;\n    }, isStartish: function isStartish(a) {\n      return \"topMouseDown\" === a || \"topTouchStart\" === a;\n    }, executeDirectDispatch: function executeDirectDispatch(a) {\n      var b = a._dispatchListeners,\n          c = a._dispatchInstances;Array.isArray(b) ? m(\"103\") : void 0;a.currentTarget = b ? nc.getNodeFromInstance(c) : null;b = b ? b(a) : null;a.currentTarget = null;a._dispatchListeners = null;a._dispatchInstances = null;return b;\n    }, executeDispatchesInOrder: function executeDispatchesInOrder(a, b) {\n      var c = a._dispatchListeners,\n          d = a._dispatchInstances;if (Array.isArray(c)) for (var e = 0; e < c.length && !a.isPropagationStopped(); e++) {\n        Bd(a, b, c[e], d[e]);\n      } else c && Bd(a, b, c, d);a._dispatchListeners = null;a._dispatchInstances = null;\n    }, executeDispatchesInOrderStopAtTrue: function executeDispatchesInOrderStopAtTrue(a) {\n      a: {\n        var b = a._dispatchListeners;var c = a._dispatchInstances;if (Array.isArray(b)) for (var d = 0; d < b.length && !a.isPropagationStopped(); d++) {\n          if (b[d](a, c[d])) {\n            b = c[d];break a;\n          }\n        } else if (b && b(a, c)) {\n          b = c;break a;\n        }b = null;\n      }a._dispatchInstances = null;a._dispatchListeners = null;return b;\n    }, hasDispatches: function hasDispatches(a) {\n      return !!a._dispatchListeners;\n    }, getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(a) {\n      return Cb.getFiberCurrentPropsFromNode(a);\n    }, getInstanceFromNode: function getInstanceFromNode(a) {\n      return Cb.getInstanceFromNode(a);\n    },\n    getNodeFromInstance: function getNodeFromInstance(a) {\n      return Cb.getNodeFromInstance(a);\n    }, injection: { injectComponentTree: function injectComponentTree(a) {\n        Cb = a;\n      } } },\n      Ga = nc,\n      nb = null,\n      Pa = null,\n      Qa = null,\n      yb = { injection: { injectFiberControlledHostComponent: function injectFiberControlledHostComponent(a) {\n        nb = a;\n      } }, enqueueStateRestore: function enqueueStateRestore(a) {\n      Pa ? Qa ? Qa.push(a) : Qa = [a] : Pa = a;\n    }, restoreStateIfNeeded: function restoreStateIfNeeded() {\n      if (Pa) {\n        var a = Pa,\n            b = Qa;Qa = Pa = null;Dd(a);if (b) for (a = 0; a < b.length; a++) {\n          Dd(b[a]);\n        }\n      }\n    } },\n      zc = !1,\n      Ab = { batchedUpdates: function batchedUpdates(a, b) {\n      if (zc) return kc(Ed, a, b);zc = !0;try {\n        return kc(Ed, a, b);\n      } finally {\n        zc = !1, yb.restoreStateIfNeeded();\n      }\n    },\n    injection: { injectStackBatchedUpdates: function injectStackBatchedUpdates(a) {\n        kc = a;\n      }, injectFiberBatchedUpdates: function injectFiberBatchedUpdates(a) {\n        sd = a;\n      } } },\n      Db = [],\n      ia = { _enabled: !0, _handleTopLevel: null, setHandleTopLevel: function setHandleTopLevel(a) {\n      ia._handleTopLevel = a;\n    }, setEnabled: function setEnabled(a) {\n      ia._enabled = !!a;\n    }, isEnabled: function isEnabled() {\n      return ia._enabled;\n    }, trapBubbledEvent: function trapBubbledEvent(a, b, c) {\n      return c ? ue.listen(c, b, ia.dispatchEvent.bind(null, a)) : null;\n    }, trapCapturedEvent: function trapCapturedEvent(a, b, c) {\n      return c ? ue.capture(c, b, ia.dispatchEvent.bind(null, a)) : null;\n    }, dispatchEvent: function dispatchEvent(a, b) {\n      if (ia._enabled) {\n        var c = jb(b);c = N.getClosestInstanceFromNode(c);null === c || \"number\" !== typeof c.tag || Oa.isFiberMounted(c) || (c = null);if (Db.length) {\n          var d = Db.pop();d.topLevelType = a;d.nativeEvent = b;d.targetInst = c;a = d;\n        } else a = { topLevelType: a, nativeEvent: b, targetInst: c, ancestors: [] };try {\n          Ab.batchedUpdates(hf, a);\n        } finally {\n          a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, 10 > Db.length && Db.push(a);\n        }\n      }\n    } },\n      G = ia,\n      Ra = null,\n      X = { injection: { injectEventPluginOrder: na.injectEventPluginOrder, injectEventPluginsByName: na.injectEventPluginsByName },\n    getListener: function getListener(a, b) {\n      if (\"number\" === typeof a.tag) {\n        var c = a.stateNode;if (!c) return null;var d = Ga.getFiberCurrentPropsFromNode(c);if (!d) return null;c = d[b];if (Fd(b, a.type, d)) return null;\n      } else {\n        d = a._currentElement;if (\"string\" === typeof d || \"number\" === typeof d || !a._rootNodeID) return null;a = d.props;c = a[b];if (Fd(b, d.type, a)) return null;\n      }c && \"function\" !== typeof c ? m(\"231\", b, typeof c === \"undefined\" ? \"undefined\" : _typeof(c)) : void 0;return c;\n    }, extractEvents: function extractEvents(a, b, c, d) {\n      for (var e, f = na.plugins, g = 0; g < f.length; g++) {\n        var h = f[g];h && (h = h.extractEvents(a, b, c, d)) && (e = sa(e, h));\n      }return e;\n    }, enqueueEvents: function enqueueEvents(a) {\n      a && (Ra = sa(Ra, a));\n    }, processEventQueue: function processEventQueue(a) {\n      var b = Ra;Ra = null;a ? Ha(b, ef) : Ha(b, df);Ra ? m(\"95\") : void 0;Cd.rethrowCaughtError();\n    } },\n      qd;z && (qd = document.implementation && document.implementation.hasFeature && !0 !== document.implementation.hasFeature(\"\", \"\"));var ra = { animationend: ob(\"Animation\", \"AnimationEnd\"), animationiteration: ob(\"Animation\", \"AnimationIteration\"), animationstart: ob(\"Animation\", \"AnimationStart\"), transitionend: ob(\"Transition\", \"TransitionEnd\") },\n      jc = {},\n      pd = {};z && (pd = document.createElement(\"div\").style, \"AnimationEvent\" in window || (delete ra.animationend.animation, delete ra.animationiteration.animation, delete ra.animationstart.animation), \"TransitionEvent\" in window || delete ra.transitionend.transition);var ye = { topAbort: \"abort\", topAnimationEnd: ib(\"animationend\") || \"animationend\", topAnimationIteration: ib(\"animationiteration\") || \"animationiteration\", topAnimationStart: ib(\"animationstart\") || \"animationstart\", topBlur: \"blur\", topCancel: \"cancel\", topCanPlay: \"canplay\",\n    topCanPlayThrough: \"canplaythrough\", topChange: \"change\", topClick: \"click\", topClose: \"close\", topCompositionEnd: \"compositionend\", topCompositionStart: \"compositionstart\", topCompositionUpdate: \"compositionupdate\", topContextMenu: \"contextmenu\", topCopy: \"copy\", topCut: \"cut\", topDoubleClick: \"dblclick\", topDrag: \"drag\", topDragEnd: \"dragend\", topDragEnter: \"dragenter\", topDragExit: \"dragexit\", topDragLeave: \"dragleave\", topDragOver: \"dragover\", topDragStart: \"dragstart\", topDrop: \"drop\", topDurationChange: \"durationchange\", topEmptied: \"emptied\",\n    topEncrypted: \"encrypted\", topEnded: \"ended\", topError: \"error\", topFocus: \"focus\", topInput: \"input\", topKeyDown: \"keydown\", topKeyPress: \"keypress\", topKeyUp: \"keyup\", topLoadedData: \"loadeddata\", topLoad: \"load\", topLoadedMetadata: \"loadedmetadata\", topLoadStart: \"loadstart\", topMouseDown: \"mousedown\", topMouseMove: \"mousemove\", topMouseOut: \"mouseout\", topMouseOver: \"mouseover\", topMouseUp: \"mouseup\", topPaste: \"paste\", topPause: \"pause\", topPlay: \"play\", topPlaying: \"playing\", topProgress: \"progress\", topRateChange: \"ratechange\", topScroll: \"scroll\",\n    topSeeked: \"seeked\", topSeeking: \"seeking\", topSelectionChange: \"selectionchange\", topStalled: \"stalled\", topSuspend: \"suspend\", topTextInput: \"textInput\", topTimeUpdate: \"timeupdate\", topToggle: \"toggle\", topTouchCancel: \"touchcancel\", topTouchEnd: \"touchend\", topTouchMove: \"touchmove\", topTouchStart: \"touchstart\", topTransitionEnd: ib(\"transitionend\") || \"transitionend\", topVolumeChange: \"volumechange\", topWaiting: \"waiting\", topWheel: \"wheel\" },\n      Hd = {},\n      jf = 0,\n      pb = \"_reactListenersID\" + (\"\" + Math.random()).slice(2),\n      l = q({}, { handleTopLevel: function handleTopLevel(a, b, c, d) {\n      a = X.extractEvents(a, b, c, d);X.enqueueEvents(a);X.processEventQueue(!1);\n    } }, { setEnabled: function setEnabled(a) {\n      G && G.setEnabled(a);\n    }, isEnabled: function isEnabled() {\n      return !(!G || !G.isEnabled());\n    }, listenTo: function listenTo(a, b) {\n      var c = Gd(b);a = na.registrationNameDependencies[a];for (var d = 0; d < a.length; d++) {\n        var e = a[d];c.hasOwnProperty(e) && c[e] || (\"topWheel\" === e ? Fa(\"wheel\") ? G.trapBubbledEvent(\"topWheel\", \"wheel\", b) : Fa(\"mousewheel\") ? G.trapBubbledEvent(\"topWheel\", \"mousewheel\", b) : G.trapBubbledEvent(\"topWheel\", \"DOMMouseScroll\", b) : \"topScroll\" === e ? G.trapCapturedEvent(\"topScroll\", \"scroll\", b) : \"topFocus\" === e || \"topBlur\" === e ? (G.trapCapturedEvent(\"topFocus\", \"focus\", b), G.trapCapturedEvent(\"topBlur\", \"blur\", b), c.topBlur = !0, c.topFocus = !0) : \"topCancel\" === e ? (Fa(\"cancel\", !0) && G.trapCapturedEvent(\"topCancel\", \"cancel\", b), c.topCancel = !0) : \"topClose\" === e ? (Fa(\"close\", !0) && G.trapCapturedEvent(\"topClose\", \"close\", b), c.topClose = !0) : ye.hasOwnProperty(e) && G.trapBubbledEvent(e, ye[e], b), c[e] = !0);\n      }\n    }, isListeningToAllDependencies: function isListeningToAllDependencies(a, b) {\n      b = Gd(b);a = na.registrationNameDependencies[a];\n      for (var c = 0; c < a.length; c++) {\n        var d = a[c];if (!b.hasOwnProperty(d) || !b[d]) return !1;\n      }return !0;\n    }, trapBubbledEvent: function trapBubbledEvent(a, b, c) {\n      return G.trapBubbledEvent(a, b, c);\n    }, trapCapturedEvent: function trapCapturedEvent(a, b, c) {\n      return G.trapCapturedEvent(a, b, c);\n    } }),\n      Sa = { animationIterationCount: !0, borderImageOutset: !0, borderImageSlice: !0, borderImageWidth: !0, boxFlex: !0, boxFlexGroup: !0, boxOrdinalGroup: !0, columnCount: !0, columns: !0, flex: !0, flexGrow: !0, flexPositive: !0, flexShrink: !0, flexNegative: !0, flexOrder: !0, gridRow: !0, gridRowEnd: !0, gridRowSpan: !0,\n    gridRowStart: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnSpan: !0, gridColumnStart: !0, fontWeight: !0, lineClamp: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, tabSize: !0, widows: !0, zIndex: !0, zoom: !0, fillOpacity: !0, floodOpacity: !0, stopOpacity: !0, strokeDasharray: !0, strokeDashoffset: !0, strokeMiterlimit: !0, strokeOpacity: !0, strokeWidth: !0 },\n      If = [\"Webkit\", \"ms\", \"Moz\", \"O\"];Object.keys(Sa).forEach(function (a) {\n    If.forEach(function (b) {\n      b = b + a.charAt(0).toUpperCase() + a.substring(1);Sa[b] = Sa[a];\n    });\n  });var Jf = { background: { backgroundAttachment: !0,\n      backgroundColor: !0, backgroundImage: !0, backgroundPositionX: !0, backgroundPositionY: !0, backgroundRepeat: !0 }, backgroundPosition: { backgroundPositionX: !0, backgroundPositionY: !0 }, border: { borderWidth: !0, borderStyle: !0, borderColor: !0 }, borderBottom: { borderBottomWidth: !0, borderBottomStyle: !0, borderBottomColor: !0 }, borderLeft: { borderLeftWidth: !0, borderLeftStyle: !0, borderLeftColor: !0 }, borderRight: { borderRightWidth: !0, borderRightStyle: !0, borderRightColor: !0 }, borderTop: { borderTopWidth: !0, borderTopStyle: !0, borderTopColor: !0 },\n    font: { fontStyle: !0, fontVariant: !0, fontWeight: !0, fontSize: !0, lineHeight: !0, fontFamily: !0 }, outline: { outlineWidth: !0, outlineStyle: !0, outlineColor: !0 } },\n      ze = !1;if (z) {\n    var Kf = document.createElement(\"div\").style;try {\n      Kf.font = \"\";\n    } catch (a) {\n      ze = !0;\n    }\n  }var Ae = { createDangerousStringForStyles: function createDangerousStringForStyles() {}, setValueForStyles: function setValueForStyles(a, b) {\n      a = a.style;for (var c in b) {\n        if (b.hasOwnProperty(c)) {\n          var d = 0 === c.indexOf(\"--\");var e = c;var f = b[c];e = null == f || \"boolean\" === typeof f || \"\" === f ? \"\" : d || \"number\" !== typeof f || 0 === f || Sa.hasOwnProperty(e) && Sa[e] ? (\"\" + f).trim() : f + \"px\";\"float\" === c && (c = \"cssFloat\");if (d) a.setProperty(c, e);else if (e) a[c] = e;else if (d = ze && Jf[c]) for (var g in d) {\n            a[g] = \"\";\n          } else a[c] = \"\";\n        }\n      }\n    } },\n      lf = new RegExp(\"^[\" + A.ATTRIBUTE_NAME_START_CHAR + \"][\" + A.ATTRIBUTE_NAME_CHAR + \"]*$\"),\n      Jd = {},\n      Id = {},\n      Ac = { setAttributeForID: function setAttributeForID(a, b) {\n      a.setAttribute(A.ID_ATTRIBUTE_NAME, b);\n    }, setAttributeForRoot: function setAttributeForRoot(a) {\n      a.setAttribute(A.ROOT_ATTRIBUTE_NAME, \"\");\n    }, getValueForProperty: function getValueForProperty() {}, getValueForAttribute: function getValueForAttribute() {}, setValueForProperty: function setValueForProperty(a, b, c) {\n      var d = A.getPropertyInfo(b);if (d && A.shouldSetAttribute(b, c)) {\n        var e = d.mutationMethod;e ? e(a, c) : null == c || d.hasBooleanValue && !c || d.hasNumericValue && isNaN(c) || d.hasPositiveNumericValue && 1 > c || d.hasOverloadedBooleanValue && !1 === c ? Ac.deleteValueForProperty(a, b) : d.mustUseProperty ? a[d.propertyName] = c : (b = d.attributeName, (e = d.attributeNamespace) ? a.setAttributeNS(e, b, \"\" + c) : d.hasBooleanValue || d.hasOverloadedBooleanValue && !0 === c ? a.setAttribute(b, \"\") : a.setAttribute(b, \"\" + c));\n      } else Ac.setValueForAttribute(a, b, A.shouldSetAttribute(b, c) ? c : null);\n    }, setValueForAttribute: function setValueForAttribute(a, b, c) {\n      kf(b) && (null == c ? a.removeAttribute(b) : a.setAttribute(b, \"\" + c));\n    }, deleteValueForAttribute: function deleteValueForAttribute(a, b) {\n      a.removeAttribute(b);\n    }, deleteValueForProperty: function deleteValueForProperty(a, b) {\n      var c = A.getPropertyInfo(b);c ? (b = c.mutationMethod) ? b(a, void 0) : c.mustUseProperty ? a[c.propertyName] = c.hasBooleanValue ? !1 : \"\" : a.removeAttribute(c.attributeName) : a.removeAttribute(b);\n    } },\n      oa = Ac,\n      Be = yc.ReactDebugCurrentFrame,\n      Ta = { current: null, phase: null, resetCurrentFiber: function resetCurrentFiber() {\n      Be.getCurrentStack = null;\n      Ta.current = null;Ta.phase = null;\n    }, setCurrentFiber: function setCurrentFiber(a, b) {\n      Be.getCurrentStack = Kd;Ta.current = a;Ta.phase = b;\n    }, getCurrentFiberOwnerName: function getCurrentFiberOwnerName() {\n      return null;\n    }, getCurrentFiberStackAddendum: Kd },\n      Lf = Ta,\n      Bc = { getHostProps: function getHostProps(a, b) {\n      var c = b.value,\n          d = b.checked;return q({ type: void 0, step: void 0, min: void 0, max: void 0 }, b, { defaultChecked: void 0, defaultValue: void 0, value: null != c ? c : a._wrapperState.initialValue, checked: null != d ? d : a._wrapperState.initialChecked });\n    }, initWrapperState: function initWrapperState(a, b) {\n      var c = b.defaultValue;\n      a._wrapperState = { initialChecked: null != b.checked ? b.checked : b.defaultChecked, initialValue: null != b.value ? b.value : c, controlled: \"checkbox\" === b.type || \"radio\" === b.type ? null != b.checked : null != b.value };\n    }, updateWrapper: function updateWrapper(a, b) {\n      var c = b.checked;null != c && oa.setValueForProperty(a, \"checked\", c || !1);c = b.value;if (null != c) {\n        if (0 === c && \"\" === a.value) a.value = \"0\";else if (\"number\" === b.type) {\n          if (b = parseFloat(a.value) || 0, c != b || c == b && a.value != c) a.value = \"\" + c;\n        } else a.value !== \"\" + c && (a.value = \"\" + c);\n      } else null == b.value && null != b.defaultValue && a.defaultValue !== \"\" + b.defaultValue && (a.defaultValue = \"\" + b.defaultValue), null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);\n    }, postMountWrapper: function postMountWrapper(a, b) {\n      switch (b.type) {case \"submit\":case \"reset\":\n          break;case \"color\":case \"date\":case \"datetime\":case \"datetime-local\":case \"month\":case \"time\":case \"week\":\n          a.value = \"\";a.value = a.defaultValue;break;default:\n          a.value = a.value;}b = a.name;\"\" !== b && (a.name = \"\");a.defaultChecked = !a.defaultChecked;a.defaultChecked = !a.defaultChecked;\"\" !== b && (a.name = b);\n    }, restoreControlledState: function restoreControlledState(a, b) {\n      Bc.updateWrapper(a, b);var c = b.name;if (\"radio\" === b.type && null != c) {\n        for (b = a; b.parentNode;) {\n          b = b.parentNode;\n        }c = b.querySelectorAll(\"input[name\\x3d\" + JSON.stringify(\"\" + c) + '][type\\x3d\"radio\"]');for (b = 0; b < c.length; b++) {\n          var d = c[b];if (d !== a && d.form === a.form) {\n            var e = N.getFiberCurrentPropsFromNode(d);e ? void 0 : m(\"90\");Bc.updateWrapper(d, e);\n          }\n        }\n      }\n    } },\n      U = Bc,\n      za = { validateProps: function validateProps() {}, postMountWrapper: function postMountWrapper(a, b) {\n      null != b.value && a.setAttribute(\"value\", b.value);\n    }, getHostProps: function getHostProps(a, b) {\n      a = q({ children: void 0 }, b);if (b = mf(b.children)) a.children = b;return a;\n    } },\n      ja = { getHostProps: function getHostProps(a, b) {\n      return q({}, b, { value: void 0 });\n    }, initWrapperState: function initWrapperState(a, b) {\n      var c = b.value;a._wrapperState = { initialValue: null != c ? c : b.defaultValue, wasMultiple: !!b.multiple };\n    }, postMountWrapper: function postMountWrapper(a, b) {\n      a.multiple = !!b.multiple;var c = b.value;null != c ? va(a, !!b.multiple, c) : null != b.defaultValue && va(a, !!b.multiple, b.defaultValue);\n    }, postUpdateWrapper: function postUpdateWrapper(a, b) {\n      a._wrapperState.initialValue = void 0;var c = a._wrapperState.wasMultiple;\n      a._wrapperState.wasMultiple = !!b.multiple;var d = b.value;null != d ? va(a, !!b.multiple, d) : c !== !!b.multiple && (null != b.defaultValue ? va(a, !!b.multiple, b.defaultValue) : va(a, !!b.multiple, b.multiple ? [] : \"\"));\n    }, restoreControlledState: function restoreControlledState(a, b) {\n      var c = b.value;null != c && va(a, !!b.multiple, c);\n    } },\n      Ce = { getHostProps: function getHostProps(a, b) {\n      null != b.dangerouslySetInnerHTML ? m(\"91\") : void 0;return q({}, b, { value: void 0, defaultValue: void 0, children: \"\" + a._wrapperState.initialValue });\n    }, initWrapperState: function initWrapperState(a, b) {\n      var c = b.value,\n          d = c;null == c && (c = b.defaultValue, b = b.children, null != b && (null != c ? m(\"92\") : void 0, Array.isArray(b) && (1 >= b.length ? void 0 : m(\"93\"), b = b[0]), c = \"\" + b), null == c && (c = \"\"), d = c);a._wrapperState = { initialValue: \"\" + d };\n    }, updateWrapper: function updateWrapper(a, b) {\n      var c = b.value;null != c && (c = \"\" + c, c !== a.value && (a.value = c), null == b.defaultValue && (a.defaultValue = c));null != b.defaultValue && (a.defaultValue = b.defaultValue);\n    }, postMountWrapper: function postMountWrapper(a) {\n      var b = a.textContent;b === a._wrapperState.initialValue && (a.value = b);\n    }, restoreControlledState: function restoreControlledState(a, b) {\n      Ce.updateWrapper(a, b);\n    } },\n      V = Ce,\n      cf = q({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 }),\n      xa = { _getTrackerFromNode: function _getTrackerFromNode(a) {\n      return a._valueTracker;\n    }, track: function track(a) {\n      a._valueTracker || (a._valueTracker = nf(a));\n    }, updateValueIfChanged: function updateValueIfChanged(a) {\n      if (!a) return !1;var b = a._valueTracker;if (!b) return !0;var c = b.getValue();var d = \"\";a && (d = Ld(a) ? a.checked ? \"true\" : \"false\" : a.value);a = d;return a !== c ? (b.setValue(a), !0) : !1;\n    }, stopTracking: function stopTracking(a) {\n      (a = a._valueTracker) && a.stopTracking();\n    } },\n      Eb,\n      Cc = function (a) {\n    return \"undefined\" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {\n      MSApp.execUnsafeLocalFunction(function () {\n        return a(b, c, d, e);\n      });\n    } : a;\n  }(function (a, b) {\n    if (\"http://www.w3.org/2000/svg\" !== a.namespaceURI || \"innerHTML\" in a) a.innerHTML = b;else for (Eb = Eb || document.createElement(\"div\"), Eb.innerHTML = \"\\x3csvg\\x3e\" + b + \"\\x3c/svg\\x3e\", b = Eb.firstChild; b.firstChild;) {\n      a.appendChild(b.firstChild);\n    }\n  }),\n      Mf = /[\"'&<>]/;z && (\"textContent\" in document.documentElement || (od = function od(a, b) {\n    if (3 === a.nodeType) a.nodeValue = b;else {\n      if (\"boolean\" === typeof b || \"number\" === typeof b) b = \"\" + b;else {\n        b = \"\" + b;var c = Mf.exec(b);if (c) {\n          var d = \"\",\n              e,\n              f = 0;for (e = c.index; e < b.length; e++) {\n            switch (b.charCodeAt(e)) {case 34:\n                c = \"\\x26quot;\";break;case 38:\n                c = \"\\x26amp;\";break;case 39:\n                c = \"\\x26#x27;\";break;case 60:\n                c = \"\\x26lt;\";break;case 62:\n                c = \"\\x26gt;\";break;default:\n                continue;}f !== e && (d += b.substring(f, e));f = e + 1;d += c;\n          }b = f !== e ? d + b.substring(f, e) : d;\n        }\n      }Cc(a, b);\n    }\n  }));var Dc = od,\n      Ec = Lf.getCurrentFiberOwnerName,\n      of = l.listenTo,\n      Fb = na.registrationNameModules,\n      Aa = { topAbort: \"abort\", topCanPlay: \"canplay\", topCanPlayThrough: \"canplaythrough\", topDurationChange: \"durationchange\", topEmptied: \"emptied\", topEncrypted: \"encrypted\", topEnded: \"ended\", topError: \"error\", topLoadedData: \"loadeddata\", topLoadedMetadata: \"loadedmetadata\", topLoadStart: \"loadstart\", topPause: \"pause\", topPlay: \"play\", topPlaying: \"playing\", topProgress: \"progress\", topRateChange: \"ratechange\", topSeeked: \"seeked\", topSeeking: \"seeking\", topStalled: \"stalled\", topSuspend: \"suspend\", topTimeUpdate: \"timeupdate\", topVolumeChange: \"volumechange\",\n    topWaiting: \"waiting\" },\n      I = { createElement: function createElement(a, b, c, d) {\n      c = 9 === c.nodeType ? c : c.ownerDocument;\"http://www.w3.org/1999/xhtml\" === d && (d = Sc(a));\"http://www.w3.org/1999/xhtml\" === d ? \"script\" === a ? (a = c.createElement(\"div\"), a.innerHTML = \"\\x3cscript\\x3e\\x3c/script\\x3e\", a = a.removeChild(a.firstChild)) : a = \"string\" === typeof b.is ? c.createElement(a, { is: b.is }) : c.createElement(a) : a = c.createElementNS(d, a);return a;\n    }, createTextNode: function createTextNode(a, b) {\n      return (9 === b.nodeType ? b : b.ownerDocument).createTextNode(a);\n    }, setInitialProperties: function setInitialProperties(a, b, c, d) {\n      var e = hc(b, c);switch (b) {case \"iframe\":case \"object\":\n          l.trapBubbledEvent(\"topLoad\", \"load\", a);var f = c;break;case \"video\":case \"audio\":\n          for (f in Aa) {\n            Aa.hasOwnProperty(f) && l.trapBubbledEvent(f, Aa[f], a);\n          }f = c;break;case \"source\":\n          l.trapBubbledEvent(\"topError\", \"error\", a);f = c;break;case \"img\":case \"image\":\n          l.trapBubbledEvent(\"topError\", \"error\", a);l.trapBubbledEvent(\"topLoad\", \"load\", a);f = c;break;case \"form\":\n          l.trapBubbledEvent(\"topReset\", \"reset\", a);l.trapBubbledEvent(\"topSubmit\", \"submit\", a);f = c;break;case \"details\":\n          l.trapBubbledEvent(\"topToggle\", \"toggle\", a);f = c;break;case \"input\":\n          U.initWrapperState(a, c);f = U.getHostProps(a, c);l.trapBubbledEvent(\"topInvalid\", \"invalid\", a);R(d, \"onChange\");break;case \"option\":\n          za.validateProps(a, c);f = za.getHostProps(a, c);break;case \"select\":\n          ja.initWrapperState(a, c);f = ja.getHostProps(a, c);l.trapBubbledEvent(\"topInvalid\", \"invalid\", a);R(d, \"onChange\");break;case \"textarea\":\n          V.initWrapperState(a, c);f = V.getHostProps(a, c);l.trapBubbledEvent(\"topInvalid\", \"invalid\", a);R(d, \"onChange\");break;default:\n          f = c;}ic(b, f, Ec);var g = f,\n          h;for (h in g) {\n        if (g.hasOwnProperty(h)) {\n          var k = g[h];\"style\" === h ? Ae.setValueForStyles(a, k) : \"dangerouslySetInnerHTML\" === h ? (k = k ? k.__html : void 0, null != k && Cc(a, k)) : \"children\" === h ? \"string\" === typeof k ? Dc(a, k) : \"number\" === typeof k && Dc(a, \"\" + k) : \"suppressContentEditableWarning\" !== h && (Fb.hasOwnProperty(h) ? null != k && R(d, h) : e ? oa.setValueForAttribute(a, h, k) : null != k && oa.setValueForProperty(a, h, k));\n        }\n      }switch (b) {case \"input\":\n          xa.track(a);U.postMountWrapper(a, c);break;case \"textarea\":\n          xa.track(a);V.postMountWrapper(a, c);break;\n        case \"option\":\n          za.postMountWrapper(a, c);break;case \"select\":\n          ja.postMountWrapper(a, c);break;default:\n          \"function\" === typeof f.onClick && (a.onclick = w);}\n    }, diffProperties: function diffProperties(a, b, c, d, e) {\n      var f = null;switch (b) {case \"input\":\n          c = U.getHostProps(a, c);d = U.getHostProps(a, d);f = [];break;case \"option\":\n          c = za.getHostProps(a, c);d = za.getHostProps(a, d);f = [];break;case \"select\":\n          c = ja.getHostProps(a, c);d = ja.getHostProps(a, d);f = [];break;case \"textarea\":\n          c = V.getHostProps(a, c);d = V.getHostProps(a, d);f = [];break;default:\n          \"function\" !== typeof c.onClick && \"function\" === typeof d.onClick && (a.onclick = w);}ic(b, d, Ec);var g, h;a = null;for (g in c) {\n        if (!d.hasOwnProperty(g) && c.hasOwnProperty(g) && null != c[g]) if (\"style\" === g) for (h in b = c[g], b) {\n          b.hasOwnProperty(h) && (a || (a = {}), a[h] = \"\");\n        } else \"dangerouslySetInnerHTML\" !== g && \"children\" !== g && \"suppressContentEditableWarning\" !== g && (Fb.hasOwnProperty(g) ? f || (f = []) : (f = f || []).push(g, null));\n      }for (g in d) {\n        var k = d[g];b = null != c ? c[g] : void 0;if (d.hasOwnProperty(g) && k !== b && (null != k || null != b)) if (\"style\" === g) {\n          if (b) {\n            for (h in b) {\n              !b.hasOwnProperty(h) || k && k.hasOwnProperty(h) || (a || (a = {}), a[h] = \"\");\n            }for (h in k) {\n              k.hasOwnProperty(h) && b[h] !== k[h] && (a || (a = {}), a[h] = k[h]);\n            }\n          } else a || (f || (f = []), f.push(g, a)), a = k;\n        } else \"dangerouslySetInnerHTML\" === g ? (k = k ? k.__html : void 0, b = b ? b.__html : void 0, null != k && b !== k && (f = f || []).push(g, \"\" + k)) : \"children\" === g ? b === k || \"string\" !== typeof k && \"number\" !== typeof k || (f = f || []).push(g, \"\" + k) : \"suppressContentEditableWarning\" !== g && (Fb.hasOwnProperty(g) ? (null != k && R(e, g), f || b === k || (f = [])) : (f = f || []).push(g, k));\n      }a && (f = f || []).push(\"style\", a);return f;\n    },\n    updateProperties: function updateProperties(a, b, c, d, e) {\n      hc(c, d);d = hc(c, e);for (var f = 0; f < b.length; f += 2) {\n        var g = b[f],\n            h = b[f + 1];\"style\" === g ? Ae.setValueForStyles(a, h) : \"dangerouslySetInnerHTML\" === g ? Cc(a, h) : \"children\" === g ? Dc(a, h) : d ? null != h ? oa.setValueForAttribute(a, g, h) : oa.deleteValueForAttribute(a, g) : null != h ? oa.setValueForProperty(a, g, h) : oa.deleteValueForProperty(a, g);\n      }switch (c) {case \"input\":\n          U.updateWrapper(a, e);xa.updateValueIfChanged(a);break;case \"textarea\":\n          V.updateWrapper(a, e);break;case \"select\":\n          ja.postUpdateWrapper(a, e);}\n    }, diffHydratedProperties: function diffHydratedProperties(a, b, c, d, e) {\n      switch (b) {case \"iframe\":case \"object\":\n          l.trapBubbledEvent(\"topLoad\", \"load\", a);break;case \"video\":case \"audio\":\n          for (var f in Aa) {\n            Aa.hasOwnProperty(f) && l.trapBubbledEvent(f, Aa[f], a);\n          }break;case \"source\":\n          l.trapBubbledEvent(\"topError\", \"error\", a);break;case \"img\":case \"image\":\n          l.trapBubbledEvent(\"topError\", \"error\", a);l.trapBubbledEvent(\"topLoad\", \"load\", a);break;case \"form\":\n          l.trapBubbledEvent(\"topReset\", \"reset\", a);l.trapBubbledEvent(\"topSubmit\", \"submit\", a);break;\n        case \"details\":\n          l.trapBubbledEvent(\"topToggle\", \"toggle\", a);break;case \"input\":\n          U.initWrapperState(a, c);l.trapBubbledEvent(\"topInvalid\", \"invalid\", a);R(e, \"onChange\");break;case \"option\":\n          za.validateProps(a, c);break;case \"select\":\n          ja.initWrapperState(a, c);l.trapBubbledEvent(\"topInvalid\", \"invalid\", a);R(e, \"onChange\");break;case \"textarea\":\n          V.initWrapperState(a, c), l.trapBubbledEvent(\"topInvalid\", \"invalid\", a), R(e, \"onChange\");}ic(b, c, Ec);d = null;for (var g in c) {\n        c.hasOwnProperty(g) && (f = c[g], \"children\" === g ? \"string\" === typeof f ? a.textContent !== f && (d = [\"children\", f]) : \"number\" === typeof f && a.textContent !== \"\" + f && (d = [\"children\", \"\" + f]) : Fb.hasOwnProperty(g) && null != f && R(e, g));\n      }switch (b) {case \"input\":\n          xa.track(a);U.postMountWrapper(a, c);break;case \"textarea\":\n          xa.track(a);V.postMountWrapper(a, c);break;case \"select\":case \"option\":\n          break;default:\n          \"function\" === typeof c.onClick && (a.onclick = w);}return d;\n    }, diffHydratedText: function diffHydratedText(a, b) {\n      return a.nodeValue !== b;\n    }, warnForDeletedHydratableElement: function warnForDeletedHydratableElement() {}, warnForDeletedHydratableText: function warnForDeletedHydratableText() {},\n    warnForInsertedHydratedElement: function warnForInsertedHydratedElement() {}, warnForInsertedHydratedText: function warnForInsertedHydratedText() {}, restoreControlledState: function restoreControlledState(a, b, c) {\n      switch (b) {case \"input\":\n          U.restoreControlledState(a, c);break;case \"textarea\":\n          V.restoreControlledState(a, c);break;case \"select\":\n          ja.restoreControlledState(a, c);}\n    } },\n      Gb = void 0;if (z) {\n    if (\"function\" !== typeof requestIdleCallback) {\n      var De = null,\n          Fc = null,\n          Gc = !1,\n          Hc = !1,\n          Hb = 0,\n          Ib = 33,\n          Ua = 33,\n          Nf = { timeRemaining: \"object\" === (typeof performance === \"undefined\" ? \"undefined\" : _typeof(performance)) && \"function\" === typeof performance.now ? function () {\n          return Hb - performance.now();\n        } : function () {\n          return Hb - Date.now();\n        } },\n          Ee = \"__reactIdleCallback$\" + Math.random().toString(36).slice(2);window.addEventListener(\"message\", function (a) {\n        a.source === window && a.data === Ee && (Gc = !1, a = Fc, Fc = null, null !== a && a(Nf));\n      }, !1);var Of = function Of(a) {\n        Hc = !1;var b = a - Hb + Ua;b < Ua && Ib < Ua ? (8 > b && (b = 8), Ua = b < Ib ? Ib : b) : Ib = b;Hb = a + Ua;Gc || (Gc = !0, window.postMessage(Ee, \"*\"));b = De;De = null;null !== b && b(a);\n      };Gb = function Gb(a) {\n        Fc = a;Hc || (Hc = !0, requestAnimationFrame(Of));return 0;\n      };\n    } else Gb = requestIdleCallback;\n  } else Gb = function Gb(a) {\n    setTimeout(function () {\n      a({ timeRemaining: function timeRemaining() {\n          return Infinity;\n        } });\n    });\n    return 0;\n  };var Pf = Gb,\n      pc = void 0,\n      qc = void 0,\n      ba = {},\n      bb = [],\n      da = -1,\n      Qf = Oa.isFiberMounted,\n      ca = { current: ba },\n      S = { current: !1 },\n      cb = ba;if (\"function\" === typeof Symbol && Symbol[\"for\"]) {\n    var Fe = Symbol[\"for\"](\"react.coroutine\");var Ge = Symbol[\"for\"](\"react.yield\");\n  } else Fe = 60104, Ge = 60105;var Rf = Ge,\n      Sf = Fe,\n      Ic = \"function\" === typeof Symbol && Symbol[\"for\"] && Symbol[\"for\"](\"react.portal\") || 60106,\n      te = { createPortal: function createPortal(a, b, c) {\n      var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;return { $$typeof: Ic, key: null == d ? null : \"\" + d, children: a,\n        containerInfo: b, implementation: c };\n    }, isPortal: function isPortal(a) {\n      return \"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && null !== a && a.$$typeof === Ic;\n    }, REACT_PORTAL_TYPE: Ic },\n      sb = Sf,\n      tb = Rf,\n      ub = te.REACT_PORTAL_TYPE,\n      $b = ad,\n      vb = Array.isArray,\n      Od = \"function\" === typeof Symbol && Symbol.iterator,\n      rb = \"function\" === typeof Symbol && Symbol[\"for\"] && Symbol[\"for\"](\"react.element\") || 60103,\n      Xb = rc(!0, !0),\n      Zb = rc(!1, !0),\n      Yb = rc(!1, !1),\n      bf = Object.prototype.hasOwnProperty,\n      af = Oa.isMounted,\n      Ze = yc.ReactCurrentOwner,\n      Vb = null,\n      Wb = null,\n      qa = {},\n      db = yc.ReactCurrentOwner;sc._injectFiber = function (a) {\n    $c = a;\n  };var Tf = Oa.findCurrentHostFiber,\n      Uf = Oa.findCurrentHostFiberWithNoPortals;sc._injectFiber(function (a) {\n    var b;a: {\n      Qf(a) && 2 === a.tag ? void 0 : m(\"170\");for (b = a; 3 !== b.tag;) {\n        if (Ea(b)) {\n          b = b.stateNode.__reactInternalMemoizedMergedChildContext;break a;\n        }(b = b[\"return\"]) ? void 0 : m(\"171\");\n      }b = b.stateNode.context;\n    }return Ea(a) ? kd(a, b, !1) : b;\n  });var Rb = null,\n      He = { getOffsets: function getOffsets(a) {\n      var b = window.getSelection && window.getSelection();if (!b || 0 === b.rangeCount) return null;var c = b.anchorNode,\n          d = b.anchorOffset,\n          e = b.focusNode,\n          f = b.focusOffset,\n          g = b.getRangeAt(0);try {\n        g.startContainer.nodeType, g.endContainer.nodeType;\n      } catch (k) {\n        return null;\n      }b = b.anchorNode === b.focusNode && b.anchorOffset === b.focusOffset ? 0 : g.toString().length;var h = g.cloneRange();h.selectNodeContents(a);h.setEnd(g.startContainer, g.startOffset);a = h.startContainer === h.endContainer && h.startOffset === h.endOffset ? 0 : h.toString().length;g = a + b;b = document.createRange();b.setStart(c, d);b.setEnd(e, f);c = b.collapsed;return { start: c ? g : a, end: c ? a : g };\n    }, setOffsets: function setOffsets(a, b) {\n      if (window.getSelection) {\n        var c = window.getSelection(),\n            d = a[Xc()].length,\n            e = Math.min(b.start, d);b = void 0 === b.end ? e : Math.min(b.end, d);!c.extend && e > b && (d = b, b = e, e = d);d = Yc(a, e);a = Yc(a, b);if (d && a) {\n          var f = document.createRange();f.setStart(d.node, d.offset);c.removeAllRanges();e > b ? (c.addRange(f), c.extend(a.node, a.offset)) : (f.setEnd(a.node, a.offset), c.addRange(f));\n        }\n      }\n    } },\n      Va = { hasSelectionCapabilities: function hasSelectionCapabilities(a) {\n      var b = a && a.nodeName && a.nodeName.toLowerCase();return b && (\"input\" === b && \"text\" === a.type || \"textarea\" === b || \"true\" === a.contentEditable);\n    }, getSelectionInformation: function getSelectionInformation() {\n      var a = Qb();return { focusedElem: a, selectionRange: Va.hasSelectionCapabilities(a) ? Va.getSelection(a) : null };\n    }, restoreSelection: function restoreSelection(a) {\n      var b = Qb(),\n          c = a.focusedElem;a = a.selectionRange;if (b !== c && Qd(document.documentElement, c)) {\n        Va.hasSelectionCapabilities(c) && Va.setSelection(c, a);b = [];for (a = c; a = a.parentNode;) {\n          1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });\n        }try {\n          c.focus();\n        } catch (d) {}for (c = 0; c < b.length; c++) {\n          a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;\n        }\n      }\n    }, getSelection: function getSelection(a) {\n      return (\"selectionStart\" in a ? { start: a.selectionStart, end: a.selectionEnd } : He.getOffsets(a)) || { start: 0, end: 0 };\n    }, setSelection: function setSelection(a, b) {\n      var c = b.start,\n          d = b.end;void 0 === d && (d = c);\"selectionStart\" in a ? (a.selectionStart = c, a.selectionEnd = Math.min(d, a.value.length)) : He.setOffsets(a, b);\n    } },\n      vc = Va;ab._injectFiber = function (a) {\n    Uc = a;\n  };ab._injectStack = function (a) {\n    Vc = a;\n  };var wb = { isAncestor: function isAncestor(a, b) {\n      for (; b;) {\n        if (a === b || a === b.alternate) return !0;b = C(b);\n      }return !1;\n    }, getLowestCommonAncestor: Rd, getParentInstance: function getParentInstance(a) {\n      return C(a);\n    }, traverseTwoPhase: function traverseTwoPhase(a, b, c) {\n      for (var d = []; a;) {\n        d.push(a), a = C(a);\n      }for (a = d.length; 0 < a--;) {\n        b(d[a], \"captured\", c);\n      }for (a = 0; a < d.length; a++) {\n        b(d[a], \"bubbled\", c);\n      }\n    }, traverseEnterLeave: function traverseEnterLeave(a, b, c, d, e) {\n      for (var f = a && b ? Rd(a, b) : null, g = []; a && a !== f;) {\n        g.push(a), a = C(a);\n      }for (a = []; b && b !== f;) {\n        a.push(b), b = C(b);\n      }for (b = 0; b < g.length; b++) {\n        c(g[b], \"bubbled\", d);\n      }for (b = a.length; 0 < b--;) {\n        c(a[b], \"captured\", e);\n      }\n    } },\n      Td = X.getListener,\n      la = { accumulateTwoPhaseDispatches: function accumulateTwoPhaseDispatches(a) {\n      Ha(a, pf);\n    }, accumulateTwoPhaseDispatchesSkipTarget: function accumulateTwoPhaseDispatchesSkipTarget(a) {\n      Ha(a, qf);\n    }, accumulateDirectDispatches: function accumulateDirectDispatches(a) {\n      Ha(a, rf);\n    }, accumulateEnterLeaveDispatches: function accumulateEnterLeaveDispatches(a, b, c, d) {\n      wb.traverseEnterLeave(c, d, Ud, a, b);\n    } },\n      Wa = null,\n      Jc = null,\n      Jb = null,\n      Kc = { initialize: function initialize(a) {\n      Wa = a;Jc = Kc.getText();return !0;\n    }, reset: function reset() {\n      Jb = Jc = Wa = null;\n    }, getData: function getData() {\n      if (Jb) return Jb;var a,\n          b = Jc,\n          c = b.length,\n          d,\n          e = Kc.getText(),\n          f = e.length;for (a = 0; a < c && b[a] === e[a]; a++) {}var g = c - a;for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {}return Jb = e.slice(a, 1 < d ? 1 - d : void 0);\n    }, getText: function getText() {\n      return \"value\" in Wa ? Wa.value : Wa[Xc()];\n    } },\n      xb = Kc,\n      Ie = \"dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances\".split(\" \"),\n      Vf = { type: null, target: null, currentTarget: w.thatReturnsNull, eventPhase: null, bubbles: null, cancelable: null, timeStamp: function timeStamp(a) {\n      return a.timeStamp || Date.now();\n    }, defaultPrevented: null, isTrusted: null };q(Ka.prototype, { preventDefault: function preventDefault() {\n      this.defaultPrevented = !0;var a = this.nativeEvent;a && (a.preventDefault ? a.preventDefault() : \"unknown\" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = w.thatReturnsTrue);\n    }, stopPropagation: function stopPropagation() {\n      var a = this.nativeEvent;a && (a.stopPropagation ? a.stopPropagation() : \"unknown\" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = w.thatReturnsTrue);\n    }, persist: function persist() {\n      this.isPersistent = w.thatReturnsTrue;\n    }, isPersistent: w.thatReturnsFalse, destructor: function destructor() {\n      var a = this.constructor.Interface,\n          b;for (b in a) {\n        this[b] = null;\n      }for (a = 0; a < Ie.length; a++) {\n        this[Ie[a]] = null;\n      }\n    } });Ka.Interface = Vf;Ka.augmentClass = function (a, b) {\n    function c() {}c.prototype = this.prototype;var d = new c();q(d, a.prototype);a.prototype = d;a.prototype.constructor = a;a.Interface = q({}, this.Interface, b);a.augmentClass = this.augmentClass;Vd(a);\n  };Vd(Ka);var O = Ka;O.augmentClass(Wd, { data: null });O.augmentClass(Xd, { data: null });var vf = [9, 13, 27, 32],\n      tc = z && \"CompositionEvent\" in window,\n      Xa = null;z && \"documentMode\" in document && (Xa = document.documentMode);var Wf = z && \"TextEvent\" in window && !Xa && !uf(),\n      be = z && (!tc || Xa && 8 < Xa && 11 >= Xa),\n      ae = String.fromCharCode(32),\n      ea = { beforeInput: { phasedRegistrationNames: { bubbled: \"onBeforeInput\", captured: \"onBeforeInputCapture\" }, dependencies: [\"topCompositionEnd\", \"topKeyPress\", \"topTextInput\", \"topPaste\"] }, compositionEnd: { phasedRegistrationNames: { bubbled: \"onCompositionEnd\", captured: \"onCompositionEndCapture\" }, dependencies: \"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \") }, compositionStart: { phasedRegistrationNames: { bubbled: \"onCompositionStart\", captured: \"onCompositionStartCapture\" }, dependencies: \"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \") }, compositionUpdate: { phasedRegistrationNames: { bubbled: \"onCompositionUpdate\", captured: \"onCompositionUpdateCapture\" },\n      dependencies: \"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \") } },\n      $d = !1,\n      wa = !1,\n      Xf = { eventTypes: ea, extractEvents: function extractEvents(a, b, c, d) {\n      var e;if (tc) b: {\n        switch (a) {case \"topCompositionStart\":\n            var f = ea.compositionStart;break b;case \"topCompositionEnd\":\n            f = ea.compositionEnd;break b;case \"topCompositionUpdate\":\n            f = ea.compositionUpdate;break b;}f = void 0;\n      } else wa ? Yd(a, c) && (f = ea.compositionEnd) : \"topKeyDown\" === a && 229 === c.keyCode && (f = ea.compositionStart);f ? (be && (wa || f !== ea.compositionStart ? f === ea.compositionEnd && wa && (e = xb.getData()) : wa = xb.initialize(d)), f = Wd.getPooled(f, b, c, d), e ? f.data = e : (e = Zd(c), null !== e && (f.data = e)), la.accumulateTwoPhaseDispatches(f), e = f) : e = null;(a = Wf ? wf(a, c) : xf(a, c)) ? (b = Xd.getPooled(ea.beforeInput, b, c, d), b.data = a, la.accumulateTwoPhaseDispatches(b)) : b = null;return [e, b];\n    } },\n      Oe = { color: !0, date: !0, datetime: !0, \"datetime-local\": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 },\n      de = { change: { phasedRegistrationNames: { bubbled: \"onChange\",\n        captured: \"onChangeCapture\" }, dependencies: \"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange\".split(\" \") } },\n      La = null,\n      Ma = null,\n      Lc = !1;z && (Lc = Fa(\"input\") && (!document.documentMode || 9 < document.documentMode));var Yf = { eventTypes: de, _isInputEventSupported: Lc, extractEvents: function extractEvents(a, b, c, d) {\n      var e = b ? N.getNodeFromInstance(b) : window,\n          f = e.nodeName && e.nodeName.toLowerCase();if (\"select\" === f || \"input\" === f && \"file\" === e.type) var g = zf;else if (Tc(e)) {\n        if (Lc) g = Df;else {\n          g = Bf;var h = Af;\n        }\n      } else f = e.nodeName, !f || \"input\" !== f.toLowerCase() || \"checkbox\" !== e.type && \"radio\" !== e.type || (g = Cf);if (g && (g = g(a, b))) return ce(g, c, d);h && h(a, e, b);\"topBlur\" === a && null != b && (a = b._wrapperState || e._wrapperState) && a.controlled && \"number\" === e.type && (a = \"\" + e.value, e.getAttribute(\"value\") !== a && e.setAttribute(\"value\", a));\n    } };O.augmentClass(ge, { view: function view(a) {\n      if (a.view) return a.view;a = jb(a);return a.window === a ? a : (a = a.ownerDocument) ? a.defaultView || a.parentWindow : window;\n    }, detail: function detail(a) {\n      return a.detail || 0;\n    } });var Y = ge,\n      Ef = { Alt: \"altKey\",\n    Control: \"ctrlKey\", Meta: \"metaKey\", Shift: \"shiftKey\" };Y.augmentClass(he, { screenX: null, screenY: null, clientX: null, clientY: null, pageX: null, pageY: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, getModifierState: Pb, button: null, buttons: null, relatedTarget: function relatedTarget(a) {\n      return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);\n    } });var ma = he,\n      Mc = { mouseEnter: { registrationName: \"onMouseEnter\", dependencies: [\"topMouseOut\", \"topMouseOver\"] }, mouseLeave: { registrationName: \"onMouseLeave\", dependencies: [\"topMouseOut\", \"topMouseOver\"] } },\n      Zf = { eventTypes: Mc, extractEvents: function extractEvents(a, b, c, d) {\n      if (\"topMouseOver\" === a && (c.relatedTarget || c.fromElement) || \"topMouseOut\" !== a && \"topMouseOver\" !== a) return null;var e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;\"topMouseOut\" === a ? (a = b, b = (b = c.relatedTarget || c.toElement) ? N.getClosestInstanceFromNode(b) : null) : a = null;if (a === b) return null;var f = null == a ? e : N.getNodeFromInstance(a);e = null == b ? e : N.getNodeFromInstance(b);var g = ma.getPooled(Mc.mouseLeave, a, c, d);g.type = \"mouseleave\";g.target = f;g.relatedTarget = e;c = ma.getPooled(Mc.mouseEnter, b, c, d);c.type = \"mouseenter\";c.target = e;c.relatedTarget = f;la.accumulateEnterLeaveDispatches(g, c, a, b);return [g, c];\n    } },\n      $f = z && \"documentMode\" in document && 11 >= document.documentMode,\n      je = { select: { phasedRegistrationNames: { bubbled: \"onSelect\", captured: \"onSelectCapture\" }, dependencies: \"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange\".split(\" \") } },\n      ya = null,\n      wc = null,\n      Na = null,\n      uc = !1,\n      ag = l.isListeningToAllDependencies,\n      bg = { eventTypes: je, extractEvents: function extractEvents(a, b, c, d) {\n      var e = d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument;if (!e || !ag(\"onSelect\", e)) return null;e = b ? N.getNodeFromInstance(b) : window;switch (a) {case \"topFocus\":\n          if (Tc(e) || \"true\" === e.contentEditable) ya = e, wc = b, Na = null;break;case \"topBlur\":\n          Na = wc = ya = null;break;case \"topMouseDown\":\n          uc = !0;break;case \"topContextMenu\":case \"topMouseUp\":\n          return uc = !1, ie(c, d);case \"topSelectionChange\":\n          if ($f) break;case \"topKeyDown\":case \"topKeyUp\":\n          return ie(c, d);}return null;\n    } };\n  O.augmentClass(ke, { animationName: null, elapsedTime: null, pseudoElement: null });O.augmentClass(le, { clipboardData: function clipboardData(a) {\n      return \"clipboardData\" in a ? a.clipboardData : window.clipboardData;\n    } });Y.augmentClass(me, { relatedTarget: null });var cg = { Esc: \"Escape\", Spacebar: \" \", Left: \"ArrowLeft\", Up: \"ArrowUp\", Right: \"ArrowRight\", Down: \"ArrowDown\", Del: \"Delete\", Win: \"OS\", Menu: \"ContextMenu\", Apps: \"ContextMenu\", Scroll: \"ScrollLock\", MozPrintableKey: \"Unidentified\" },\n      dg = { 8: \"Backspace\", 9: \"Tab\", 12: \"Clear\", 13: \"Enter\", 16: \"Shift\", 17: \"Control\",\n    18: \"Alt\", 19: \"Pause\", 20: \"CapsLock\", 27: \"Escape\", 32: \" \", 33: \"PageUp\", 34: \"PageDown\", 35: \"End\", 36: \"Home\", 37: \"ArrowLeft\", 38: \"ArrowUp\", 39: \"ArrowRight\", 40: \"ArrowDown\", 45: \"Insert\", 46: \"Delete\", 112: \"F1\", 113: \"F2\", 114: \"F3\", 115: \"F4\", 116: \"F5\", 117: \"F6\", 118: \"F7\", 119: \"F8\", 120: \"F9\", 121: \"F10\", 122: \"F11\", 123: \"F12\", 144: \"NumLock\", 145: \"ScrollLock\", 224: \"Meta\" };Y.augmentClass(ne, { key: function key(a) {\n      if (a.key) {\n        var b = cg[a.key] || a.key;if (\"Unidentified\" !== b) return b;\n      }return \"keypress\" === a.type ? (a = $a(a), 13 === a ? \"Enter\" : String.fromCharCode(a)) : \"keydown\" === a.type || \"keyup\" === a.type ? dg[a.keyCode] || \"Unidentified\" : \"\";\n    }, location: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, repeat: null, locale: null, getModifierState: Pb, charCode: function charCode(a) {\n      return \"keypress\" === a.type ? $a(a) : 0;\n    }, keyCode: function keyCode(a) {\n      return \"keydown\" === a.type || \"keyup\" === a.type ? a.keyCode : 0;\n    }, which: function which(a) {\n      return \"keypress\" === a.type ? $a(a) : \"keydown\" === a.type || \"keyup\" === a.type ? a.keyCode : 0;\n    } });ma.augmentClass(oe, { dataTransfer: null });Y.augmentClass(pe, { touches: null, targetTouches: null,\n    changedTouches: null, altKey: null, metaKey: null, ctrlKey: null, shiftKey: null, getModifierState: Pb });O.augmentClass(qe, { propertyName: null, elapsedTime: null, pseudoElement: null });ma.augmentClass(re, { deltaX: function deltaX(a) {\n      return \"deltaX\" in a ? a.deltaX : \"wheelDeltaX\" in a ? -a.wheelDeltaX : 0;\n    }, deltaY: function deltaY(a) {\n      return \"deltaY\" in a ? a.deltaY : \"wheelDeltaY\" in a ? -a.wheelDeltaY : \"wheelDelta\" in a ? -a.wheelDelta : 0;\n    }, deltaZ: null, deltaMode: null });var Je = {},\n      Ke = {};\"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel\".split(\" \").forEach(function (a) {\n    var b = a[0].toUpperCase() + a.slice(1),\n        c = \"on\" + b;b = \"top\" + b;c = { phasedRegistrationNames: { bubbled: c, captured: c + \"Capture\" }, dependencies: [b] };Je[a] = c;Ke[b] = c;\n  });var eg = { eventTypes: Je, extractEvents: function extractEvents(a, b, c, d) {\n      var e = Ke[a];if (!e) return null;switch (a) {case \"topAbort\":case \"topCancel\":case \"topCanPlay\":case \"topCanPlayThrough\":case \"topClose\":case \"topDurationChange\":case \"topEmptied\":case \"topEncrypted\":case \"topEnded\":case \"topError\":case \"topInput\":case \"topInvalid\":case \"topLoad\":case \"topLoadedData\":case \"topLoadedMetadata\":case \"topLoadStart\":case \"topPause\":case \"topPlay\":case \"topPlaying\":case \"topProgress\":case \"topRateChange\":case \"topReset\":case \"topSeeked\":case \"topSeeking\":case \"topStalled\":case \"topSubmit\":case \"topSuspend\":case \"topTimeUpdate\":case \"topToggle\":case \"topVolumeChange\":case \"topWaiting\":\n          var f = O;break;case \"topKeyPress\":\n          if (0 === $a(c)) return null;case \"topKeyDown\":case \"topKeyUp\":\n          f = ne;break;case \"topBlur\":case \"topFocus\":\n          f = me;break;case \"topClick\":\n          if (2 === c.button) return null;case \"topDoubleClick\":case \"topMouseDown\":case \"topMouseMove\":case \"topMouseUp\":case \"topMouseOut\":case \"topMouseOver\":case \"topContextMenu\":\n          f = ma;break;case \"topDrag\":case \"topDragEnd\":case \"topDragEnter\":case \"topDragExit\":case \"topDragLeave\":case \"topDragOver\":case \"topDragStart\":case \"topDrop\":\n          f = oe;break;case \"topTouchCancel\":case \"topTouchEnd\":case \"topTouchMove\":case \"topTouchStart\":\n          f = pe;break;case \"topAnimationEnd\":case \"topAnimationIteration\":case \"topAnimationStart\":\n          f = ke;break;case \"topTransitionEnd\":\n          f = qe;break;case \"topScroll\":\n          f = Y;break;case \"topWheel\":\n          f = re;break;case \"topCopy\":case \"topCut\":case \"topPaste\":\n          f = le;}f ? void 0 : m(\"86\", a);a = f.getPooled(e, b, c, d);la.accumulateTwoPhaseDispatches(a);return a;\n    } };G.setHandleTopLevel(l.handleTopLevel);X.injection.injectEventPluginOrder(\"ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin\".split(\" \"));\n  Ga.injection.injectComponentTree(N);X.injection.injectEventPluginsByName({ SimpleEventPlugin: eg, EnterLeaveEventPlugin: Zf, ChangeEventPlugin: Yf, SelectEventPlugin: bg, BeforeInputEventPlugin: Xf });var Kb = A.injection.MUST_USE_PROPERTY,\n      r = A.injection.HAS_BOOLEAN_VALUE,\n      Le = A.injection.HAS_NUMERIC_VALUE,\n      Lb = A.injection.HAS_POSITIVE_NUMERIC_VALUE,\n      Ya = A.injection.HAS_STRING_BOOLEAN_VALUE,\n      fg = { Properties: { allowFullScreen: r, allowTransparency: Ya, async: r, autoPlay: r, capture: r, checked: Kb | r, cols: Lb, contentEditable: Ya, controls: r,\n      \"default\": r, defer: r, disabled: r, download: A.injection.HAS_OVERLOADED_BOOLEAN_VALUE, draggable: Ya, formNoValidate: r, hidden: r, loop: r, multiple: Kb | r, muted: Kb | r, noValidate: r, open: r, playsInline: r, readOnly: r, required: r, reversed: r, rows: Lb, rowSpan: Le, scoped: r, seamless: r, selected: Kb | r, size: Lb, start: Le, span: Lb, spellCheck: Ya, style: 0, itemScope: r, acceptCharset: 0, className: 0, htmlFor: 0, httpEquiv: 0, value: Ya }, DOMAttributeNames: { acceptCharset: \"accept-charset\", className: \"class\", htmlFor: \"for\", httpEquiv: \"http-equiv\" }, DOMMutationMethods: { value: function value(a, b) {\n        if (null == b) return a.removeAttribute(\"value\");\"number\" !== a.type || !1 === a.hasAttribute(\"value\") ? a.setAttribute(\"value\", \"\" + b) : a.validity && !a.validity.badInput && a.ownerDocument.activeElement !== a && a.setAttribute(\"value\", \"\" + b);\n      } } },\n      Nc = A.injection.HAS_STRING_BOOLEAN_VALUE,\n      Oc = { Properties: { autoReverse: Nc, externalResourcesRequired: Nc, preserveAlpha: Nc }, DOMAttributeNames: { autoReverse: \"autoReverse\", externalResourcesRequired: \"externalResourcesRequired\", preserveAlpha: \"preserveAlpha\" }, DOMAttributeNamespaces: { xlinkActuate: \"http://www.w3.org/1999/xlink\",\n      xlinkArcrole: \"http://www.w3.org/1999/xlink\", xlinkHref: \"http://www.w3.org/1999/xlink\", xlinkRole: \"http://www.w3.org/1999/xlink\", xlinkShow: \"http://www.w3.org/1999/xlink\", xlinkTitle: \"http://www.w3.org/1999/xlink\", xlinkType: \"http://www.w3.org/1999/xlink\", xmlBase: \"http://www.w3.org/XML/1998/namespace\", xmlLang: \"http://www.w3.org/XML/1998/namespace\", xmlSpace: \"http://www.w3.org/XML/1998/namespace\" } },\n      gg = /[\\-\\:]([a-z])/g;\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space\".split(\" \").forEach(function (a) {\n    var b = a.replace(gg, Me);Oc.Properties[b] = 0;Oc.DOMAttributeNames[b] = a;\n  });A.injection.injectDOMPropertyConfig(fg);A.injection.injectDOMPropertyConfig(Oc);var Gf = A.ROOT_ATTRIBUTE_NAME,\n      hg = I.createElement,\n      ig = I.createTextNode,\n      jg = I.setInitialProperties,\n      kg = I.diffProperties,\n      lg = I.updateProperties,\n      mg = I.diffHydratedProperties,\n      ng = I.diffHydratedText,\n      og = I.warnForDeletedHydratableElement,\n      pg = I.warnForDeletedHydratableText,\n      qg = I.warnForInsertedHydratedElement,\n      rg = I.warnForInsertedHydratedText,\n      Mb = N.precacheFiberNode,\n      Pc = N.updateFiberProps;\n  yb.injection.injectFiberControlledHostComponent(I);ab._injectFiber(function (a) {\n    return B.findHostInstance(a);\n  });var Qc = null,\n      Rc = null,\n      B = function (a) {\n    var b = a.getPublicInstance;a = Pe(a);var c = a.scheduleUpdate,\n        d = a.getPriorityContext;return { createContainer: function createContainer(a) {\n        var b = new F(3, null, 0);a = { current: b, containerInfo: a, isScheduled: !1, nextScheduledRoot: null, context: null, pendingContext: null };return b.stateNode = a;\n      }, updateContainer: function updateContainer(a, b, g, h) {\n        var e = b.current;g = sc(g);null === b.context ? b.context = g : b.pendingContext = g;b = d(e, null != a && null != a.type && null != a.type.prototype && !0 === a.type.prototype.unstable_isAsyncReactComponent);g = { element: a };a = null === g.element;h = { priorityLevel: b, partialState: g, callback: void 0 === h ? null : h, isReplace: !1, isForced: !1, isTopLevelUnmount: a, next: null };g = hb(e, h);if (a) {\n          a = pc;var f = qc;null !== a && null !== h.next && (h.next = null, a.last = h);null !== f && null !== g && null !== g.next && (g.next = null, f.last = h);\n        }c(e, b);\n      }, batchedUpdates: a.batchedUpdates, unbatchedUpdates: a.unbatchedUpdates, deferredUpdates: a.deferredUpdates,\n      flushSync: a.flushSync, getPublicRootInstance: function getPublicRootInstance(a) {\n        a = a.current;if (!a.child) return null;switch (a.child.tag) {case 5:\n            return b(a.child.stateNode);default:\n            return a.child.stateNode;}\n      }, findHostInstance: function findHostInstance(a) {\n        a = Tf(a);return null === a ? null : a.stateNode;\n      }, findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(a) {\n        a = Uf(a);return null === a ? null : a.stateNode;\n      } };\n  }({ getRootHostContext: function getRootHostContext(a) {\n      if (9 === a.nodeType) a = (a = a.documentElement) ? a.namespaceURI : Ob(null, \"\");else {\n        var b = 8 === a.nodeType ? a.parentNode : a;a = b.namespaceURI || null;\n        b = b.tagName;a = Ob(a, b);\n      }return a;\n    }, getChildHostContext: function getChildHostContext(a, b) {\n      return Ob(a, b);\n    }, getPublicInstance: function getPublicInstance(a) {\n      return a;\n    }, prepareForCommit: function prepareForCommit() {\n      Qc = l.isEnabled();Rc = vc.getSelectionInformation();l.setEnabled(!1);\n    }, resetAfterCommit: function resetAfterCommit() {\n      vc.restoreSelection(Rc);Rc = null;l.setEnabled(Qc);Qc = null;\n    }, createInstance: function createInstance(a, b, c, d, e) {\n      a = hg(a, b, c, d);Mb(e, a);Pc(a, b);return a;\n    }, appendInitialChild: function appendInitialChild(a, b) {\n      a.appendChild(b);\n    }, finalizeInitialChildren: function finalizeInitialChildren(a, b, c, d) {\n      jg(a, b, c, d);a: {\n        switch (b) {case \"button\":case \"input\":case \"select\":case \"textarea\":\n            a = !!c.autoFocus;break a;}a = !1;\n      }return a;\n    }, prepareUpdate: function prepareUpdate(a, b, c, d, e) {\n      return kg(a, b, c, d, e);\n    }, commitMount: function commitMount(a) {\n      a.focus();\n    }, commitUpdate: function commitUpdate(a, b, c, d, e) {\n      Pc(a, e);lg(a, b, c, d, e);\n    }, shouldSetTextContent: function shouldSetTextContent(a, b) {\n      return \"textarea\" === a || \"string\" === typeof b.children || \"number\" === typeof b.children || \"object\" === _typeof(b.dangerouslySetInnerHTML) && null !== b.dangerouslySetInnerHTML && \"string\" === typeof b.dangerouslySetInnerHTML.__html;\n    }, resetTextContent: function resetTextContent(a) {\n      a.textContent = \"\";\n    }, shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(a, b) {\n      return !!b.hidden;\n    }, createTextInstance: function createTextInstance(a, b, c, d) {\n      a = ig(a, b);Mb(d, a);return a;\n    }, commitTextUpdate: function commitTextUpdate(a, b, c) {\n      a.nodeValue = c;\n    }, appendChild: function appendChild(a, b) {\n      a.appendChild(b);\n    }, appendChildToContainer: function appendChildToContainer(a, b) {\n      8 === a.nodeType ? a.parentNode.insertBefore(b, a) : a.appendChild(b);\n    }, insertBefore: function insertBefore(a, b, c) {\n      a.insertBefore(b, c);\n    }, insertInContainerBefore: function insertInContainerBefore(a, b, c) {\n      8 === a.nodeType ? a.parentNode.insertBefore(b, c) : a.insertBefore(b, c);\n    }, removeChild: function removeChild(a, b) {\n      a.removeChild(b);\n    }, removeChildFromContainer: function removeChildFromContainer(a, b) {\n      8 === a.nodeType ? a.parentNode.removeChild(b) : a.removeChild(b);\n    }, canHydrateInstance: function canHydrateInstance(a, b) {\n      return 1 === a.nodeType && b === a.nodeName.toLowerCase();\n    }, canHydrateTextInstance: function canHydrateTextInstance(a, b) {\n      return \"\" === b ? !1 : 3 === a.nodeType;\n    }, getNextHydratableSibling: function getNextHydratableSibling(a) {\n      for (a = a.nextSibling; a && 1 !== a.nodeType && 3 !== a.nodeType;) {\n        a = a.nextSibling;\n      }return a;\n    }, getFirstHydratableChild: function getFirstHydratableChild(a) {\n      for (a = a.firstChild; a && 1 !== a.nodeType && 3 !== a.nodeType;) {\n        a = a.nextSibling;\n      }return a;\n    }, hydrateInstance: function hydrateInstance(a, b, c, d, e, f) {\n      Mb(f, a);Pc(a, c);return mg(a, b, c, e, d);\n    }, hydrateTextInstance: function hydrateTextInstance(a, b, c) {\n      Mb(c, a);return ng(a, b);\n    }, didNotHydrateInstance: function didNotHydrateInstance(a, b) {\n      1 === b.nodeType ? og(a, b) : pg(a, b);\n    }, didNotFindHydratableInstance: function didNotFindHydratableInstance(a, b, c) {\n      qg(a, b, c);\n    }, didNotFindHydratableTextInstance: function didNotFindHydratableTextInstance(a, b) {\n      rg(a, b);\n    }, scheduleDeferredCallback: Pf, useSyncScheduling: !0 });Ab.injection.injectFiberBatchedUpdates(B.batchedUpdates);var sg = { createPortal: se, hydrate: function hydrate(a, b, c) {\n      return Bb(null, a, b, !0, c);\n    }, render: function render(a, b, c) {\n      return Bb(null, a, b, !1, c);\n    }, unstable_renderSubtreeIntoContainer: function unstable_renderSubtreeIntoContainer(a, b, c, d) {\n      null != a && fa.has(a) ? void 0 : m(\"38\");return Bb(a, b, c, !1, d);\n    }, unmountComponentAtNode: function unmountComponentAtNode(a) {\n      xc(a) ? void 0 : m(\"40\");return a._reactRootContainer ? (B.unbatchedUpdates(function () {\n        Bb(null, null, a, !1, function () {\n          a._reactRootContainer = null;\n        });\n      }), !0) : !1;\n    }, findDOMNode: ab, unstable_createPortal: se, unstable_batchedUpdates: Ab.batchedUpdates, unstable_deferredUpdates: B.deferredUpdates, flushSync: B.flushSync, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { EventPluginHub: X, EventPluginRegistry: na, EventPropagators: la,\n      ReactControlledComponent: yb, ReactDOMComponentTree: N, ReactDOMEventListener: G } };(function (a) {\n    if (\"undefined\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;if (!b.supportsFiber) return !0;try {\n      var c = b.inject(a);Vb = Pd(function (a) {\n        return b.onCommitFiberRoot(c, a);\n      });Wb = Pd(function (a) {\n        return b.onCommitFiberUnmount(c, a);\n      });\n    } catch (d) {}return !0;\n  })({ findFiberByHostInstance: N.getClosestInstanceFromNode, findHostInstanceByFiber: B.findHostInstance, bundleType: 0, version: \"16.0.0\", rendererPackageName: \"react-dom\" });\n  return sg;\n}\"object\" === (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"undefined\" !== typeof module ? module.exports = Nb(require(\"react\")) : \"function\" === typeof define && define.amd ? define([\"react\"], Nb) : undefined.ReactDOM = Nb(undefined.React);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-components/dist/cjs/header.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-components/dist/cjs/header.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Header = function (_React$PureComponent) {\n  _inherits(Header, _React$PureComponent);\n\n  function Header() {\n    _classCallCheck(this, Header);\n\n    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));\n  }\n\n  Header.prototype.render = function render() {\n    return _react2.default.createElement('div', { className: 'article-header' }, _react2.default.createElement('h1', { className: 'hed' }, this.props.title), this.props.subtitle && _react2.default.createElement('h2', { className: 'dek' }, this.props.subtitle), this.props.author && _react2.default.createElement('div', { className: 'byline' }, 'By: ', _react2.default.createElement('a', { href: this.props.authorLink }, this.props.author)));\n  };\n\n  return Header;\n}(_react2.default.PureComponent);\n\nexports.default = Header;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlYWRlci5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsIl9yZWFjdCIsInJlcXVpcmUiLCJfcmVhY3QyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsImRlZmF1bHQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiSGVhZGVyIiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJhcHBseSIsImFyZ3VtZW50cyIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJwcm9wcyIsInRpdGxlIiwic3VidGl0bGUiLCJhdXRob3IiLCJocmVmIiwiYXV0aG9yTGluayIsIlB1cmVDb21wb25lbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUFBLFFBQVFDLFVBQVIsR0FBcUIsSUFBckI7O0FBRUEsSUFBSUMsU0FBU0MsUUFBUSxPQUFSLENBQWI7O0FBRUEsSUFBSUMsVUFBVUMsdUJBQXVCSCxNQUF2QixDQUFkOztBQUVBLFNBQVNHLHNCQUFULENBQWdDQyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLE9BQU9BLElBQUlMLFVBQVgsR0FBd0JLLEdBQXhCLEdBQThCLEVBQUVDLFNBQVNELEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GLFNBQVNFLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRDtBQUFFLE1BQUksRUFBRUQsb0JBQW9CQyxXQUF0QixDQUFKLEVBQXdDO0FBQUUsVUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUEyRDtBQUFFOztBQUV6SixTQUFTQywwQkFBVCxDQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdEO0FBQUUsTUFBSSxDQUFDRCxJQUFMLEVBQVc7QUFBRSxVQUFNLElBQUlFLGNBQUosQ0FBbUIsMkRBQW5CLENBQU47QUFBd0YsR0FBQyxPQUFPRCxTQUFTLFFBQU9BLElBQVAseUNBQU9BLElBQVAsT0FBZ0IsUUFBaEIsSUFBNEIsT0FBT0EsSUFBUCxLQUFnQixVQUFyRCxJQUFtRUEsSUFBbkUsR0FBMEVELElBQWpGO0FBQXdGOztBQUVoUCxTQUFTRyxTQUFULENBQW1CQyxRQUFuQixFQUE2QkMsVUFBN0IsRUFBeUM7QUFBRSxNQUFJLE9BQU9BLFVBQVAsS0FBc0IsVUFBdEIsSUFBb0NBLGVBQWUsSUFBdkQsRUFBNkQ7QUFBRSxVQUFNLElBQUlQLFNBQUosQ0FBYyxxRUFBb0VPLFVBQXBFLHlDQUFvRUEsVUFBcEUsRUFBZCxDQUFOO0FBQXNHLEdBQUNELFNBQVNFLFNBQVQsR0FBcUJDLE9BQU9DLE1BQVAsQ0FBY0gsY0FBY0EsV0FBV0MsU0FBdkMsRUFBa0QsRUFBRUcsYUFBYSxFQUFFQyxPQUFPTixRQUFULEVBQW1CTyxZQUFZLEtBQS9CLEVBQXNDQyxVQUFVLElBQWhELEVBQXNEQyxjQUFjLElBQXBFLEVBQWYsRUFBbEQsQ0FBckIsQ0FBcUssSUFBSVIsVUFBSixFQUFnQkUsT0FBT08sY0FBUCxHQUF3QlAsT0FBT08sY0FBUCxDQUFzQlYsUUFBdEIsRUFBZ0NDLFVBQWhDLENBQXhCLEdBQXNFRCxTQUFTVyxTQUFULEdBQXFCVixVQUEzRjtBQUF3Rzs7QUFFOWUsSUFBSVcsU0FBUyxVQUFVQyxvQkFBVixFQUFnQztBQUMzQ2QsWUFBVWEsTUFBVixFQUFrQkMsb0JBQWxCOztBQUVBLFdBQVNELE1BQVQsR0FBa0I7QUFDaEJyQixvQkFBZ0IsSUFBaEIsRUFBc0JxQixNQUF0Qjs7QUFFQSxXQUFPakIsMkJBQTJCLElBQTNCLEVBQWlDa0IscUJBQXFCQyxLQUFyQixDQUEyQixJQUEzQixFQUFpQ0MsU0FBakMsQ0FBakMsQ0FBUDtBQUNEOztBQUVESCxTQUFPVixTQUFQLENBQWlCYyxNQUFqQixHQUEwQixTQUFTQSxNQUFULEdBQWtCO0FBQzFDLFdBQU83QixRQUFRRyxPQUFSLENBQWdCMkIsYUFBaEIsQ0FDTCxLQURLLEVBRUwsRUFBRUMsV0FBVyxnQkFBYixFQUZLLEVBR0wvQixRQUFRRyxPQUFSLENBQWdCMkIsYUFBaEIsQ0FDRSxJQURGLEVBRUUsRUFBRUMsV0FBVyxLQUFiLEVBRkYsRUFHRSxLQUFLQyxLQUFMLENBQVdDLEtBSGIsQ0FISyxFQVFMLEtBQUtELEtBQUwsQ0FBV0UsUUFBWCxJQUF1QmxDLFFBQVFHLE9BQVIsQ0FBZ0IyQixhQUFoQixDQUNyQixJQURxQixFQUVyQixFQUFFQyxXQUFXLEtBQWIsRUFGcUIsRUFHckIsS0FBS0MsS0FBTCxDQUFXRSxRQUhVLENBUmxCLEVBYUwsS0FBS0YsS0FBTCxDQUFXRyxNQUFYLElBQXFCbkMsUUFBUUcsT0FBUixDQUFnQjJCLGFBQWhCLENBQ25CLEtBRG1CLEVBRW5CLEVBQUVDLFdBQVcsUUFBYixFQUZtQixFQUduQixNQUhtQixFQUluQi9CLFFBQVFHLE9BQVIsQ0FBZ0IyQixhQUFoQixDQUNFLEdBREYsRUFFRSxFQUFFTSxNQUFNLEtBQUtKLEtBQUwsQ0FBV0ssVUFBbkIsRUFGRixFQUdFLEtBQUtMLEtBQUwsQ0FBV0csTUFIYixDQUptQixDQWJoQixDQUFQO0FBd0JELEdBekJEOztBQTJCQSxTQUFPVixNQUFQO0FBQ0QsQ0FyQ1ksQ0FxQ1h6QixRQUFRRyxPQUFSLENBQWdCbUMsYUFyQ0wsQ0FBYjs7QUF1Q0ExQyxRQUFRTyxPQUFSLEdBQWtCc0IsTUFBbEIiLCJmaWxlIjoiaGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEhlYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGVhZGVyLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGVhZGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWFkZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRQdXJlQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgSGVhZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogJ2FydGljbGUtaGVhZGVyJyB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdoMScsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnaGVkJyB9LFxuICAgICAgICB0aGlzLnByb3BzLnRpdGxlXG4gICAgICApLFxuICAgICAgdGhpcy5wcm9wcy5zdWJ0aXRsZSAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2gyJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdkZWsnIH0sXG4gICAgICAgIHRoaXMucHJvcHMuc3VidGl0bGVcbiAgICAgICksXG4gICAgICB0aGlzLnByb3BzLmF1dGhvciAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnYnlsaW5lJyB9LFxuICAgICAgICAnQnk6ICcsXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdhJyxcbiAgICAgICAgICB7IGhyZWY6IHRoaXMucHJvcHMuYXV0aG9yTGluayB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuYXV0aG9yXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBIZWFkZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5QdXJlQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSGVhZGVyOyJdfQ==","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_2.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/.idyll/_stream_2.js","source":"'use strict';\n\nmodule.exports = {\n\t'header': require('/Users/mathisonian/projects/442/idyll-walkthrough/components/default/header.js'),\n\t'select': require('/Users/mathisonian/projects/442/idyll-walkthrough/components/default/select.js'),\n\t'text-input': require('/Users/mathisonian/projects/442/idyll-walkthrough/components/default/text-input.js'),\n\t'my-d3-component': require('/Users/mathisonian/projects/442/idyll-walkthrough/components/my-d3-component.js'),\n\t'range': require('/Users/mathisonian/projects/442/idyll-walkthrough/components/default/range.js'),\n\t'custom-component': require('/Users/mathisonian/projects/442/idyll-walkthrough/components/custom-component.js')\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdHJlYW1fMi5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNoQixXQUFVQyxRQUFRLGdGQUFSLENBRE07QUFFaEIsV0FBVUEsUUFBUSxnRkFBUixDQUZNO0FBR2hCLGVBQWNBLFFBQVEsb0ZBQVIsQ0FIRTtBQUloQixvQkFBbUJBLFFBQVEsaUZBQVIsQ0FKSDtBQUtoQixVQUFTQSxRQUFRLCtFQUFSLENBTE87QUFNaEIscUJBQW9CQSxRQUFRLGtGQUFSO0FBTkosQ0FBakIiLCJmaWxlIjoiX3N0cmVhbV8yLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG5cdCdoZWFkZXInOiByZXF1aXJlKCcvVXNlcnMvbWF0aGlzb25pYW4vcHJvamVjdHMvNDQyL2lkeWxsLXdhbGt0aHJvdWdoL2NvbXBvbmVudHMvZGVmYXVsdC9oZWFkZXIuanMnKSxcblx0J3NlbGVjdCc6IHJlcXVpcmUoJy9Vc2Vycy9tYXRoaXNvbmlhbi9wcm9qZWN0cy80NDIvaWR5bGwtd2Fsa3Rocm91Z2gvY29tcG9uZW50cy9kZWZhdWx0L3NlbGVjdC5qcycpLFxuXHQndGV4dC1pbnB1dCc6IHJlcXVpcmUoJy9Vc2Vycy9tYXRoaXNvbmlhbi9wcm9qZWN0cy80NDIvaWR5bGwtd2Fsa3Rocm91Z2gvY29tcG9uZW50cy9kZWZhdWx0L3RleHQtaW5wdXQuanMnKSxcblx0J215LWQzLWNvbXBvbmVudCc6IHJlcXVpcmUoJy9Vc2Vycy9tYXRoaXNvbmlhbi9wcm9qZWN0cy80NDIvaWR5bGwtd2Fsa3Rocm91Z2gvY29tcG9uZW50cy9teS1kMy1jb21wb25lbnQuanMnKSxcblx0J3JhbmdlJzogcmVxdWlyZSgnL1VzZXJzL21hdGhpc29uaWFuL3Byb2plY3RzLzQ0Mi9pZHlsbC13YWxrdGhyb3VnaC9jb21wb25lbnRzL2RlZmF1bHQvcmFuZ2UuanMnKSxcblx0J2N1c3RvbS1jb21wb25lbnQnOiByZXF1aXJlKCcvVXNlcnMvbWF0aGlzb25pYW4vcHJvamVjdHMvNDQyL2lkeWxsLXdhbGt0aHJvdWdoL2NvbXBvbmVudHMvY3VzdG9tLWNvbXBvbmVudC5qcycpXG59XG4iXX0=","deps":{"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/header.js":"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/header.js","/Users/mathisonian/projects/442/idyll-walkthrough/components/default/select.js":"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/select.js","/Users/mathisonian/projects/442/idyll-walkthrough/components/default/range.js":"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/range.js","/Users/mathisonian/projects/442/idyll-walkthrough/components/default/text-input.js":"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/text-input.js","/Users/mathisonian/projects/442/idyll-walkthrough/components/my-d3-component.js":"/Users/mathisonian/projects/442/idyll-walkthrough/components/my-d3-component.js","/Users/mathisonian/projects/442/idyll-walkthrough/components/custom-component.js":"/Users/mathisonian/projects/442/idyll-walkthrough/components/custom-component.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/scrollparent/scrollparent.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/scrollparent/scrollparent.js","source":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === \"object\" && module.exports) {\n    module.exports = factory();\n  } else {\n    root.Scrollparent = factory();\n  }\n})(undefined, function () {\n  var regex = /(auto|scroll)/;\n\n  var parents = function parents(node, ps) {\n    if (node.parentNode === null) {\n      return ps;\n    }\n\n    return parents(node.parentNode, ps.concat([node]));\n  };\n\n  var style = function style(node, prop) {\n    return getComputedStyle(node, null).getPropertyValue(prop);\n  };\n\n  var overflow = function overflow(node) {\n    return style(node, \"overflow\") + style(node, \"overflow-y\") + style(node, \"overflow-x\");\n  };\n\n  var scroll = function scroll(node) {\n    return regex.test(overflow(node));\n  };\n\n  var scrollParent = function scrollParent(node) {\n    if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n      return;\n    }\n\n    var ps = parents(node.parentNode, []);\n\n    for (var i = 0; i < ps.length; i += 1) {\n      if (scroll(ps[i])) {\n        return ps[i];\n      }\n    }\n\n    return document.scrollingElement || document.documentElement;\n  };\n\n  return scrollParent;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcm9sbHBhcmVudC5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJTY3JvbGxwYXJlbnQiLCJyZWdleCIsInBhcmVudHMiLCJub2RlIiwicHMiLCJwYXJlbnROb2RlIiwiY29uY2F0Iiwic3R5bGUiLCJwcm9wIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJvdmVyZmxvdyIsInNjcm9sbCIsInRlc3QiLCJzY3JvbGxQYXJlbnQiLCJIVE1MRWxlbWVudCIsIlNWR0VsZW1lbnQiLCJpIiwibGVuZ3RoIiwiZG9jdW1lbnQiLCJzY3JvbGxpbmdFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUMsV0FBVUEsSUFBVixFQUFnQkMsT0FBaEIsRUFBeUI7QUFDeEIsTUFBSSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxPQUFPQyxHQUEzQyxFQUFnRDtBQUM5Q0QsV0FBTyxFQUFQLEVBQVdELE9BQVg7QUFDRCxHQUZELE1BRU8sSUFBSSxRQUFPRyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQWxCLElBQThCQSxPQUFPQyxPQUF6QyxFQUFrRDtBQUN2REQsV0FBT0MsT0FBUCxHQUFpQkosU0FBakI7QUFDRCxHQUZNLE1BRUE7QUFDTEQsU0FBS00sWUFBTCxHQUFvQkwsU0FBcEI7QUFDRDtBQUNGLENBUkEsYUFRTyxZQUFZO0FBQ2xCLE1BQUlNLFFBQVEsZUFBWjs7QUFFQSxNQUFJQyxVQUFVLFNBQVZBLE9BQVUsQ0FBVUMsSUFBVixFQUFnQkMsRUFBaEIsRUFBb0I7QUFDaEMsUUFBSUQsS0FBS0UsVUFBTCxLQUFvQixJQUF4QixFQUE4QjtBQUFFLGFBQU9ELEVBQVA7QUFBWTs7QUFFNUMsV0FBT0YsUUFBUUMsS0FBS0UsVUFBYixFQUF5QkQsR0FBR0UsTUFBSCxDQUFVLENBQUNILElBQUQsQ0FBVixDQUF6QixDQUFQO0FBQ0QsR0FKRDs7QUFNQSxNQUFJSSxRQUFRLFNBQVJBLEtBQVEsQ0FBVUosSUFBVixFQUFnQkssSUFBaEIsRUFBc0I7QUFDaEMsV0FBT0MsaUJBQWlCTixJQUFqQixFQUF1QixJQUF2QixFQUE2Qk8sZ0JBQTdCLENBQThDRixJQUE5QyxDQUFQO0FBQ0QsR0FGRDs7QUFJQSxNQUFJRyxXQUFXLFNBQVhBLFFBQVcsQ0FBVVIsSUFBVixFQUFnQjtBQUM3QixXQUFPSSxNQUFNSixJQUFOLEVBQVksVUFBWixJQUEwQkksTUFBTUosSUFBTixFQUFZLFlBQVosQ0FBMUIsR0FBc0RJLE1BQU1KLElBQU4sRUFBWSxZQUFaLENBQTdEO0FBQ0QsR0FGRDs7QUFJQSxNQUFJUyxTQUFTLFNBQVRBLE1BQVMsQ0FBVVQsSUFBVixFQUFnQjtBQUM1QixXQUFPRixNQUFNWSxJQUFOLENBQVdGLFNBQVNSLElBQVQsQ0FBWCxDQUFQO0FBQ0EsR0FGRDs7QUFJQSxNQUFJVyxlQUFlLFNBQWZBLFlBQWUsQ0FBVVgsSUFBVixFQUFnQjtBQUNqQyxRQUFJLEVBQUVBLGdCQUFnQlksV0FBaEIsSUFBK0JaLGdCQUFnQmEsVUFBakQsQ0FBSixFQUFrRTtBQUNoRTtBQUNEOztBQUVELFFBQUlaLEtBQUtGLFFBQVFDLEtBQUtFLFVBQWIsRUFBeUIsRUFBekIsQ0FBVDs7QUFFQSxTQUFLLElBQUlZLElBQUksQ0FBYixFQUFnQkEsSUFBSWIsR0FBR2MsTUFBdkIsRUFBK0JELEtBQUssQ0FBcEMsRUFBdUM7QUFDckMsVUFBSUwsT0FBT1IsR0FBR2EsQ0FBSCxDQUFQLENBQUosRUFBbUI7QUFDakIsZUFBT2IsR0FBR2EsQ0FBSCxDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPRSxTQUFTQyxnQkFBVCxJQUE2QkQsU0FBU0UsZUFBN0M7QUFDRCxHQWREOztBQWdCQSxTQUFPUCxZQUFQO0FBQ0QsQ0E5Q0EsQ0FBRCIsImZpbGUiOiJzY3JvbGxwYXJlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5TY3JvbGxwYXJlbnQgPSBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuICB2YXIgcmVnZXggPSAvKGF1dG98c2Nyb2xsKS87XG5cbiAgdmFyIHBhcmVudHMgPSBmdW5jdGlvbiAobm9kZSwgcHMpIHtcbiAgICBpZiAobm9kZS5wYXJlbnROb2RlID09PSBudWxsKSB7IHJldHVybiBwczsgfVxuXG4gICAgcmV0dXJuIHBhcmVudHMobm9kZS5wYXJlbnROb2RlLCBwcy5jb25jYXQoW25vZGVdKSk7XG4gIH07XG5cbiAgdmFyIHN0eWxlID0gZnVuY3Rpb24gKG5vZGUsIHByb3ApIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuICB9O1xuXG4gIHZhciBvdmVyZmxvdyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIHN0eWxlKG5vZGUsIFwib3ZlcmZsb3dcIikgKyBzdHlsZShub2RlLCBcIm92ZXJmbG93LXlcIikgKyBzdHlsZShub2RlLCBcIm92ZXJmbG93LXhcIik7XG4gIH07XG5cbiAgdmFyIHNjcm9sbCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICByZXR1cm4gcmVnZXgudGVzdChvdmVyZmxvdyhub2RlKSk7XG4gIH07XG5cbiAgdmFyIHNjcm9sbFBhcmVudCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG5cbiAgICB2YXIgcHMgPSBwYXJlbnRzKG5vZGUucGFyZW50Tm9kZSwgW10pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNjcm9sbChwc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIHBzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfTtcblxuICByZXR1cm4gc2Nyb2xsUGFyZW50O1xufSkpO1xuIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/scrollmonitor/scrollMonitor.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/scrollmonitor/scrollMonitor.js","source":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n!function (t, e) {\n  \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"object\" == (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) ? module.exports = e() : \"function\" == typeof define && define.amd ? define(\"scrollMonitor\", [], e) : \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? exports.scrollMonitor = e() : t.scrollMonitor = e();\n}(undefined, function () {\n  return function (t) {\n    function e(o) {\n      if (i[o]) return i[o].exports;var s = i[o] = { exports: {}, id: o, loaded: !1 };return t[o].call(s.exports, s, s.exports, e), s.loaded = !0, s.exports;\n    }var i = {};return e.m = t, e.c = i, e.p = \"\", e(0);\n  }([function (t, e, i) {\n    \"use strict\";\n    var o = i(1),\n        s = o.isInBrowser,\n        n = i(2),\n        r = new n(s ? document.body : null);r.setStateFromDOM(null), r.listenToDOM(), s && (window.scrollMonitor = r), t.exports = r;\n  }, function (t, e) {\n    \"use strict\";\n    e.VISIBILITYCHANGE = \"visibilityChange\", e.ENTERVIEWPORT = \"enterViewport\", e.FULLYENTERVIEWPORT = \"fullyEnterViewport\", e.EXITVIEWPORT = \"exitViewport\", e.PARTIALLYEXITVIEWPORT = \"partiallyExitViewport\", e.LOCATIONCHANGE = \"locationChange\", e.STATECHANGE = \"stateChange\", e.eventTypes = [e.VISIBILITYCHANGE, e.ENTERVIEWPORT, e.FULLYENTERVIEWPORT, e.EXITVIEWPORT, e.PARTIALLYEXITVIEWPORT, e.LOCATIONCHANGE, e.STATECHANGE], e.isOnServer = \"undefined\" == typeof window, e.isInBrowser = !e.isOnServer, e.defaultOffsets = { top: 0, bottom: 0 };\n  }, function (t, e, i) {\n    \"use strict\";\n    function o(t, e) {\n      if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n    }function s(t) {\n      return c ? 0 : t === document.body ? window.innerHeight || document.documentElement.clientHeight : t.clientHeight;\n    }function n(t) {\n      return c ? 0 : t === document.body ? Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.documentElement.clientHeight) : t.scrollHeight;\n    }function r(t) {\n      return c ? 0 : t === document.body ? window.pageYOffset || document.documentElement && document.documentElement.scrollTop || document.body.scrollTop : t.scrollTop;\n    }var h = i(1),\n        c = h.isOnServer,\n        a = h.isInBrowser,\n        l = h.eventTypes,\n        p = i(3),\n        u = !1;if (a) try {\n      var w = Object.defineProperty({}, \"passive\", { get: function get() {\n          u = !0;\n        } });window.addEventListener(\"test\", null, w);\n    } catch (t) {}var d = !!u && { capture: !1, passive: !0 },\n        f = function () {\n      function t(e, i) {\n        function h() {\n          if (a.viewportTop = r(e), a.viewportBottom = a.viewportTop + a.viewportHeight, a.documentHeight = n(e), a.documentHeight !== p) {\n            for (u = a.watchers.length; u--;) {\n              a.watchers[u].recalculateLocation();\n            }p = a.documentHeight;\n          }\n        }function c() {\n          for (w = a.watchers.length; w--;) {\n            a.watchers[w].update();\n          }for (w = a.watchers.length; w--;) {\n            a.watchers[w].triggerCallbacks();\n          }\n        }o(this, t);var a = this;this.item = e, this.watchers = [], this.viewportTop = null, this.viewportBottom = null, this.documentHeight = n(e), this.viewportHeight = s(e), this.DOMListener = function () {\n          t.prototype.DOMListener.apply(a, arguments);\n        }, this.eventTypes = l, i && (this.containerWatcher = i.create(e));var p, u, w;this.update = function () {\n          h(), c();\n        }, this.recalculateLocations = function () {\n          this.documentHeight = 0, this.update();\n        };\n      }return t.prototype.listenToDOM = function () {\n        a && (window.addEventListener ? (this.item === document.body ? window.addEventListener(\"scroll\", this.DOMListener, d) : this.item.addEventListener(\"scroll\", this.DOMListener, d), window.addEventListener(\"resize\", this.DOMListener)) : (this.item === document.body ? window.attachEvent(\"onscroll\", this.DOMListener) : this.item.attachEvent(\"onscroll\", this.DOMListener), window.attachEvent(\"onresize\", this.DOMListener)), this.destroy = function () {\n          window.addEventListener ? (this.item === document.body ? (window.removeEventListener(\"scroll\", this.DOMListener, d), this.containerWatcher.destroy()) : this.item.removeEventListener(\"scroll\", this.DOMListener, d), window.removeEventListener(\"resize\", this.DOMListener)) : (this.item === document.body ? (window.detachEvent(\"onscroll\", this.DOMListener), this.containerWatcher.destroy()) : this.item.detachEvent(\"onscroll\", this.DOMListener), window.detachEvent(\"onresize\", this.DOMListener));\n        });\n      }, t.prototype.destroy = function () {}, t.prototype.DOMListener = function (t) {\n        this.setStateFromDOM(t);\n      }, t.prototype.setStateFromDOM = function (t) {\n        var e = r(this.item),\n            i = s(this.item),\n            o = n(this.item);this.setState(e, i, o, t);\n      }, t.prototype.setState = function (t, e, i, o) {\n        var s = e !== this.viewportHeight || i !== this.contentHeight;if (this.latestEvent = o, this.viewportTop = t, this.viewportHeight = e, this.viewportBottom = t + e, this.contentHeight = i, s) for (var n = this.watchers.length; n--;) {\n          this.watchers[n].recalculateLocation();\n        }this.updateAndTriggerWatchers(o);\n      }, t.prototype.updateAndTriggerWatchers = function (t) {\n        for (var e = this.watchers.length; e--;) {\n          this.watchers[e].update();\n        }for (e = this.watchers.length; e--;) {\n          this.watchers[e].triggerCallbacks(t);\n        }\n      }, t.prototype.createCustomContainer = function () {\n        return new t();\n      }, t.prototype.createContainer = function (e) {\n        \"string\" == typeof e ? e = document.querySelector(e) : e && e.length > 0 && (e = e[0]);var i = new t(e, this);return i.setStateFromDOM(), i.listenToDOM(), i;\n      }, t.prototype.create = function (t, e) {\n        \"string\" == typeof t ? t = document.querySelector(t) : t && t.length > 0 && (t = t[0]);var i = new p(this, t, e);return this.watchers.push(i), i;\n      }, t.prototype.beget = function (t, e) {\n        return this.create(t, e);\n      }, t;\n    }();t.exports = f;\n  }, function (t, e, i) {\n    \"use strict\";\n    function o(t, e, i) {\n      function o(t, e) {\n        if (0 !== t.length) for (E = t.length; E--;) {\n          y = t[E], y.callback.call(s, e, s), y.isOne && t.splice(E, 1);\n        }\n      }var s = this;this.watchItem = e, this.container = t, i ? i === +i ? this.offsets = { top: i, bottom: i } : this.offsets = { top: i.top || w.top, bottom: i.bottom || w.bottom } : this.offsets = w, this.callbacks = {};for (var d = 0, f = u.length; d < f; d++) {\n        s.callbacks[u[d]] = [];\n      }this.locked = !1;var m, v, b, I, E, y;this.triggerCallbacks = function (t) {\n        switch (this.isInViewport && !m && o(this.callbacks[r], t), this.isFullyInViewport && !v && o(this.callbacks[h], t), this.isAboveViewport !== b && this.isBelowViewport !== I && (o(this.callbacks[n], t), v || this.isFullyInViewport || (o(this.callbacks[h], t), o(this.callbacks[a], t)), m || this.isInViewport || (o(this.callbacks[r], t), o(this.callbacks[c], t))), !this.isFullyInViewport && v && o(this.callbacks[a], t), !this.isInViewport && m && o(this.callbacks[c], t), this.isInViewport !== m && o(this.callbacks[n], t), !0) {case m !== this.isInViewport:case v !== this.isFullyInViewport:case b !== this.isAboveViewport:case I !== this.isBelowViewport:\n            o(this.callbacks[p], t);}m = this.isInViewport, v = this.isFullyInViewport, b = this.isAboveViewport, I = this.isBelowViewport;\n      }, this.recalculateLocation = function () {\n        if (!this.locked) {\n          var t = this.top,\n              e = this.bottom;if (this.watchItem.nodeName) {\n            var i = this.watchItem.style.display;\"none\" === i && (this.watchItem.style.display = \"\");for (var s = 0, n = this.container; n.containerWatcher;) {\n              s += n.containerWatcher.top - n.containerWatcher.container.viewportTop, n = n.containerWatcher.container;\n            }var r = this.watchItem.getBoundingClientRect();this.top = r.top + this.container.viewportTop - s, this.bottom = r.bottom + this.container.viewportTop - s, \"none\" === i && (this.watchItem.style.display = i);\n          } else this.watchItem === +this.watchItem ? this.watchItem > 0 ? this.top = this.bottom = this.watchItem : this.top = this.bottom = this.container.documentHeight - this.watchItem : (this.top = this.watchItem.top, this.bottom = this.watchItem.bottom);this.top -= this.offsets.top, this.bottom += this.offsets.bottom, this.height = this.bottom - this.top, void 0 === t && void 0 === e || this.top === t && this.bottom === e || o(this.callbacks[l], null);\n        }\n      }, this.recalculateLocation(), this.update(), m = this.isInViewport, v = this.isFullyInViewport, b = this.isAboveViewport, I = this.isBelowViewport;\n    }var s = i(1),\n        n = s.VISIBILITYCHANGE,\n        r = s.ENTERVIEWPORT,\n        h = s.FULLYENTERVIEWPORT,\n        c = s.EXITVIEWPORT,\n        a = s.PARTIALLYEXITVIEWPORT,\n        l = s.LOCATIONCHANGE,\n        p = s.STATECHANGE,\n        u = s.eventTypes,\n        w = s.defaultOffsets;o.prototype = { on: function on(t, e, i) {\n        switch (!0) {case t === n && !this.isInViewport && this.isAboveViewport:case t === r && this.isInViewport:case t === h && this.isFullyInViewport:case t === c && this.isAboveViewport && !this.isInViewport:case t === a && this.isInViewport && this.isAboveViewport:\n            if (e.call(this, this.container.latestEvent, this), i) return;}if (!this.callbacks[t]) throw new Error(\"Tried to add a scroll monitor listener of type \" + t + \". Your options are: \" + u.join(\", \"));this.callbacks[t].push({ callback: e, isOne: i || !1 });\n      }, off: function off(t, e) {\n        if (!this.callbacks[t]) throw new Error(\"Tried to remove a scroll monitor listener of type \" + t + \". Your options are: \" + u.join(\", \"));for (var i, o = 0; i = this.callbacks[t][o]; o++) {\n          if (i.callback === e) {\n            this.callbacks[t].splice(o, 1);break;\n          }\n        }\n      }, one: function one(t, e) {\n        this.on(t, e, !0);\n      }, recalculateSize: function recalculateSize() {\n        this.height = this.watchItem.offsetHeight + this.offsets.top + this.offsets.bottom, this.bottom = this.top + this.height;\n      }, update: function update() {\n        this.isAboveViewport = this.top < this.container.viewportTop, this.isBelowViewport = this.bottom > this.container.viewportBottom, this.isInViewport = this.top < this.container.viewportBottom && this.bottom > this.container.viewportTop, this.isFullyInViewport = this.top >= this.container.viewportTop && this.bottom <= this.container.viewportBottom || this.isAboveViewport && this.isBelowViewport;\n      }, destroy: function destroy() {\n        var t = this.container.watchers.indexOf(this),\n            e = this;this.container.watchers.splice(t, 1);for (var i = 0, o = u.length; i < o; i++) {\n          e.callbacks[u[i]].length = 0;\n        }\n      }, lock: function lock() {\n        this.locked = !0;\n      }, unlock: function unlock() {\n        this.locked = !1;\n      } };for (var d = function d(t) {\n      return function (e, i) {\n        this.on.call(this, t, e, i);\n      };\n    }, f = 0, m = u.length; f < m; f++) {\n      var v = u[f];o.prototype[v] = d(v);\n    }t.exports = o;\n  }]);\n});\n//# sourceMappingURL=scrollMonitor.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/polyfill.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/polyfill.js","source":"'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = function getPolyfill() {\n\treturn typeof Object.entries === 'function' ? Object.entries : implementation;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvbHlmaWxsLmpzIl0sIm5hbWVzIjpbImltcGxlbWVudGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRQb2x5ZmlsbCIsIk9iamVjdCIsImVudHJpZXMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGlCQUFpQkMsUUFBUSxrQkFBUixDQUFyQjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxXQUFULEdBQXVCO0FBQ3ZDLFFBQU8sT0FBT0MsT0FBT0MsT0FBZCxLQUEwQixVQUExQixHQUF1Q0QsT0FBT0MsT0FBOUMsR0FBd0ROLGNBQS9EO0FBQ0EsQ0FGRCIsImZpbGUiOiJwb2x5ZmlsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5lbnRyaWVzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmVudHJpZXMgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iXX0=","deps":{"./implementation":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/implementation.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/polyfill.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/polyfill.js","source":"'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = function getPolyfill() {\n\treturn typeof Object.values === 'function' ? Object.values : implementation;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvbHlmaWxsLmpzIl0sIm5hbWVzIjpbImltcGxlbWVudGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRQb2x5ZmlsbCIsIk9iamVjdCIsInZhbHVlcyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsaUJBQWlCQyxRQUFRLGtCQUFSLENBQXJCOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLFdBQVQsR0FBdUI7QUFDdkMsUUFBTyxPQUFPQyxPQUFPQyxNQUFkLEtBQXlCLFVBQXpCLEdBQXNDRCxPQUFPQyxNQUE3QyxHQUFzRE4sY0FBN0Q7QUFDQSxDQUZEIiwiZmlsZSI6InBvbHlmaWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgT2JqZWN0LnZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC52YWx1ZXMgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iXX0=","deps":{"./implementation":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/implementation.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom-factories/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom-factories/index.js","source":"(function (global){\n'use strict';\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function (f) {\n  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined') {\n    module.exports = f(require('react'));\n    /* global define */\n  } else if (typeof define === 'function' && define.amd) {\n    define(['react'], f);\n  } else {\n    var g;\n    if (typeof window !== 'undefined') {\n      g = window;\n    } else if (typeof global !== 'undefined') {\n      g = global;\n    } else if (typeof self !== 'undefined') {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    if (typeof g.React === 'undefined') {\n      throw Error('React module should be required before ReactDOMFactories');\n    }\n\n    g.ReactDOMFactories = f(g.React);\n  }\n})(function (React) {\n  /**\n   * Create a factory that creates HTML tag elements.\n   */\n  function createDOMFactory(type) {\n    var factory = React.createElement.bind(null, type);\n    // Expose the type on the factory and the prototype so that it can be\n    // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n    // This should not be named `constructor` since this may not be the function\n    // that created the element, and it may not even be a constructor.\n    factory.type = type;\n    return factory;\n  };\n\n  /**\n   * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.\n   */\n  var ReactDOMFactories = {\n    a: createDOMFactory('a'),\n    abbr: createDOMFactory('abbr'),\n    address: createDOMFactory('address'),\n    area: createDOMFactory('area'),\n    article: createDOMFactory('article'),\n    aside: createDOMFactory('aside'),\n    audio: createDOMFactory('audio'),\n    b: createDOMFactory('b'),\n    base: createDOMFactory('base'),\n    bdi: createDOMFactory('bdi'),\n    bdo: createDOMFactory('bdo'),\n    big: createDOMFactory('big'),\n    blockquote: createDOMFactory('blockquote'),\n    body: createDOMFactory('body'),\n    br: createDOMFactory('br'),\n    button: createDOMFactory('button'),\n    canvas: createDOMFactory('canvas'),\n    caption: createDOMFactory('caption'),\n    cite: createDOMFactory('cite'),\n    code: createDOMFactory('code'),\n    col: createDOMFactory('col'),\n    colgroup: createDOMFactory('colgroup'),\n    data: createDOMFactory('data'),\n    datalist: createDOMFactory('datalist'),\n    dd: createDOMFactory('dd'),\n    del: createDOMFactory('del'),\n    details: createDOMFactory('details'),\n    dfn: createDOMFactory('dfn'),\n    dialog: createDOMFactory('dialog'),\n    div: createDOMFactory('div'),\n    dl: createDOMFactory('dl'),\n    dt: createDOMFactory('dt'),\n    em: createDOMFactory('em'),\n    embed: createDOMFactory('embed'),\n    fieldset: createDOMFactory('fieldset'),\n    figcaption: createDOMFactory('figcaption'),\n    figure: createDOMFactory('figure'),\n    footer: createDOMFactory('footer'),\n    form: createDOMFactory('form'),\n    h1: createDOMFactory('h1'),\n    h2: createDOMFactory('h2'),\n    h3: createDOMFactory('h3'),\n    h4: createDOMFactory('h4'),\n    h5: createDOMFactory('h5'),\n    h6: createDOMFactory('h6'),\n    head: createDOMFactory('head'),\n    header: createDOMFactory('header'),\n    hgroup: createDOMFactory('hgroup'),\n    hr: createDOMFactory('hr'),\n    html: createDOMFactory('html'),\n    i: createDOMFactory('i'),\n    iframe: createDOMFactory('iframe'),\n    img: createDOMFactory('img'),\n    input: createDOMFactory('input'),\n    ins: createDOMFactory('ins'),\n    kbd: createDOMFactory('kbd'),\n    keygen: createDOMFactory('keygen'),\n    label: createDOMFactory('label'),\n    legend: createDOMFactory('legend'),\n    li: createDOMFactory('li'),\n    link: createDOMFactory('link'),\n    main: createDOMFactory('main'),\n    map: createDOMFactory('map'),\n    mark: createDOMFactory('mark'),\n    menu: createDOMFactory('menu'),\n    menuitem: createDOMFactory('menuitem'),\n    meta: createDOMFactory('meta'),\n    meter: createDOMFactory('meter'),\n    nav: createDOMFactory('nav'),\n    noscript: createDOMFactory('noscript'),\n    object: createDOMFactory('object'),\n    ol: createDOMFactory('ol'),\n    optgroup: createDOMFactory('optgroup'),\n    option: createDOMFactory('option'),\n    output: createDOMFactory('output'),\n    p: createDOMFactory('p'),\n    param: createDOMFactory('param'),\n    picture: createDOMFactory('picture'),\n    pre: createDOMFactory('pre'),\n    progress: createDOMFactory('progress'),\n    q: createDOMFactory('q'),\n    rp: createDOMFactory('rp'),\n    rt: createDOMFactory('rt'),\n    ruby: createDOMFactory('ruby'),\n    s: createDOMFactory('s'),\n    samp: createDOMFactory('samp'),\n    script: createDOMFactory('script'),\n    section: createDOMFactory('section'),\n    select: createDOMFactory('select'),\n    small: createDOMFactory('small'),\n    source: createDOMFactory('source'),\n    span: createDOMFactory('span'),\n    strong: createDOMFactory('strong'),\n    style: createDOMFactory('style'),\n    sub: createDOMFactory('sub'),\n    summary: createDOMFactory('summary'),\n    sup: createDOMFactory('sup'),\n    table: createDOMFactory('table'),\n    tbody: createDOMFactory('tbody'),\n    td: createDOMFactory('td'),\n    textarea: createDOMFactory('textarea'),\n    tfoot: createDOMFactory('tfoot'),\n    th: createDOMFactory('th'),\n    thead: createDOMFactory('thead'),\n    time: createDOMFactory('time'),\n    title: createDOMFactory('title'),\n    tr: createDOMFactory('tr'),\n    track: createDOMFactory('track'),\n    u: createDOMFactory('u'),\n    ul: createDOMFactory('ul'),\n    var: createDOMFactory('var'),\n    video: createDOMFactory('video'),\n    wbr: createDOMFactory('wbr'),\n\n    // SVG\n    circle: createDOMFactory('circle'),\n    clipPath: createDOMFactory('clipPath'),\n    defs: createDOMFactory('defs'),\n    ellipse: createDOMFactory('ellipse'),\n    g: createDOMFactory('g'),\n    image: createDOMFactory('image'),\n    line: createDOMFactory('line'),\n    linearGradient: createDOMFactory('linearGradient'),\n    mask: createDOMFactory('mask'),\n    path: createDOMFactory('path'),\n    pattern: createDOMFactory('pattern'),\n    polygon: createDOMFactory('polygon'),\n    polyline: createDOMFactory('polyline'),\n    radialGradient: createDOMFactory('radialGradient'),\n    rect: createDOMFactory('rect'),\n    stop: createDOMFactory('stop'),\n    svg: createDOMFactory('svg'),\n    text: createDOMFactory('text'),\n    tspan: createDOMFactory('tspan')\n  };\n\n  // due to wrapper and conditionals at the top, this will either become\n  // `module.exports ReactDOMFactories` if that is available,\n  // otherwise it will be defined via `define(['react'], ReactDOMFactories)`\n  // if that is available,\n  // otherwise it will be defined as global variable.\n  return ReactDOMFactories;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/shim.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/shim.js","source":"'use strict';\n\nvar getPolyfill = require('./polyfill');\nvar define = require('define-properties');\n\nmodule.exports = function shimEntries() {\n\tvar polyfill = getPolyfill();\n\tdefine(Object, { entries: polyfill }, {\n\t\tentries: function testEntries() {\n\t\t\treturn Object.entries !== polyfill;\n\t\t}\n\t});\n\treturn polyfill;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoaW0uanMiXSwibmFtZXMiOlsiZ2V0UG9seWZpbGwiLCJyZXF1aXJlIiwiZGVmaW5lIiwibW9kdWxlIiwiZXhwb3J0cyIsInNoaW1FbnRyaWVzIiwicG9seWZpbGwiLCJPYmplY3QiLCJlbnRyaWVzIiwidGVzdEVudHJpZXMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGNBQWNDLFFBQVEsWUFBUixDQUFsQjtBQUNBLElBQUlDLFNBQVNELFFBQVEsbUJBQVIsQ0FBYjs7QUFFQUUsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxXQUFULEdBQXVCO0FBQ3ZDLEtBQUlDLFdBQVdOLGFBQWY7QUFDQUUsUUFBT0ssTUFBUCxFQUFlLEVBQUVDLFNBQVNGLFFBQVgsRUFBZixFQUFzQztBQUNyQ0UsV0FBUyxTQUFTQyxXQUFULEdBQXVCO0FBQy9CLFVBQU9GLE9BQU9DLE9BQVAsS0FBbUJGLFFBQTFCO0FBQ0E7QUFIb0MsRUFBdEM7QUFLQSxRQUFPQSxRQUFQO0FBQ0EsQ0FSRCIsImZpbGUiOiJzaGltLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRW50cmllcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyBlbnRyaWVzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0ZW50cmllczogZnVuY3Rpb24gdGVzdEVudHJpZXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmVudHJpZXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iXX0=","deps":{"./polyfill":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/polyfill.js","define-properties":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/define-properties/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/shim.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/shim.js","source":"'use strict';\n\nvar getPolyfill = require('./polyfill');\nvar define = require('define-properties');\n\nmodule.exports = function shimValues() {\n\tvar polyfill = getPolyfill();\n\tdefine(Object, { values: polyfill }, {\n\t\tvalues: function testValues() {\n\t\t\treturn Object.values !== polyfill;\n\t\t}\n\t});\n\treturn polyfill;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoaW0uanMiXSwibmFtZXMiOlsiZ2V0UG9seWZpbGwiLCJyZXF1aXJlIiwiZGVmaW5lIiwibW9kdWxlIiwiZXhwb3J0cyIsInNoaW1WYWx1ZXMiLCJwb2x5ZmlsbCIsIk9iamVjdCIsInZhbHVlcyIsInRlc3RWYWx1ZXMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGNBQWNDLFFBQVEsWUFBUixDQUFsQjtBQUNBLElBQUlDLFNBQVNELFFBQVEsbUJBQVIsQ0FBYjs7QUFFQUUsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxVQUFULEdBQXNCO0FBQ3RDLEtBQUlDLFdBQVdOLGFBQWY7QUFDQUUsUUFBT0ssTUFBUCxFQUFlLEVBQUVDLFFBQVFGLFFBQVYsRUFBZixFQUFxQztBQUNwQ0UsVUFBUSxTQUFTQyxVQUFULEdBQXNCO0FBQzdCLFVBQU9GLE9BQU9DLE1BQVAsS0FBa0JGLFFBQXpCO0FBQ0E7QUFIbUMsRUFBckM7QUFLQSxRQUFPQSxRQUFQO0FBQ0EsQ0FSRCIsImZpbGUiOiJzaGltLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltVmFsdWVzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IHZhbHVlczogcG9seWZpbGwgfSwge1xuXHRcdHZhbHVlczogZnVuY3Rpb24gdGVzdFZhbHVlcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QudmFsdWVzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIl19","deps":{"define-properties":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/define-properties/index.js","./polyfill":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/polyfill.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/implementation.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/implementation.js","source":"'use strict';\n\nvar ES = require('es-abstract/es7');\nvar has = require('has');\nvar bind = require('function-bind');\nvar isEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);\n\nmodule.exports = function values(O) {\n\tvar obj = ES.RequireObjectCoercible(O);\n\tvar vals = [];\n\tfor (var key in obj) {\n\t\tif (has(obj, key) && isEnumerable(obj, key)) {\n\t\t\tvals.push(obj[key]);\n\t\t}\n\t}\n\treturn vals;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudGF0aW9uLmpzIl0sIm5hbWVzIjpbIkVTIiwicmVxdWlyZSIsImhhcyIsImJpbmQiLCJpc0VudW1lcmFibGUiLCJjYWxsIiwiRnVuY3Rpb24iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZXMiLCJPIiwib2JqIiwiUmVxdWlyZU9iamVjdENvZXJjaWJsZSIsInZhbHMiLCJrZXkiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxLQUFLQyxRQUFRLGlCQUFSLENBQVQ7QUFDQSxJQUFJQyxNQUFNRCxRQUFRLEtBQVIsQ0FBVjtBQUNBLElBQUlFLE9BQU9GLFFBQVEsZUFBUixDQUFYO0FBQ0EsSUFBSUcsZUFBZUQsS0FBS0UsSUFBTCxDQUFVQyxTQUFTRCxJQUFuQixFQUF5QkUsT0FBT0MsU0FBUCxDQUFpQkMsb0JBQTFDLENBQW5COztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ25DLEtBQUlDLE1BQU1kLEdBQUdlLHNCQUFILENBQTBCRixDQUExQixDQUFWO0FBQ0EsS0FBSUcsT0FBTyxFQUFYO0FBQ0EsTUFBSyxJQUFJQyxHQUFULElBQWdCSCxHQUFoQixFQUFxQjtBQUNwQixNQUFJWixJQUFJWSxHQUFKLEVBQVNHLEdBQVQsS0FBaUJiLGFBQWFVLEdBQWIsRUFBa0JHLEdBQWxCLENBQXJCLEVBQTZDO0FBQzVDRCxRQUFLRSxJQUFMLENBQVVKLElBQUlHLEdBQUosQ0FBVjtBQUNBO0FBQ0Q7QUFDRCxRQUFPRCxJQUFQO0FBQ0EsQ0FURCIsImZpbGUiOiJpbXBsZW1lbnRhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEVTID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvZXM3Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBpc0VudW1lcmFibGUgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdmFsdWVzKE8pIHtcblx0dmFyIG9iaiA9IEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUoTyk7XG5cdHZhciB2YWxzID0gW107XG5cdGZvciAodmFyIGtleSBpbiBvYmopIHtcblx0XHRpZiAoaGFzKG9iaiwga2V5KSAmJiBpc0VudW1lcmFibGUob2JqLCBrZXkpKSB7XG5cdFx0XHR2YWxzLnB1c2gob2JqW2tleV0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFscztcbn07XG4iXX0=","deps":{"function-bind":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/index.js","has":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/has/src/index.js","es-abstract/es7":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es7.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/index.js","source":"'use strict';\n\nvar define = require('define-properties');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar shim = require('./shim');\n\nvar polyfill = getPolyfill();\n\ndefine(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRlZmluZSIsInJlcXVpcmUiLCJpbXBsZW1lbnRhdGlvbiIsImdldFBvbHlmaWxsIiwic2hpbSIsInBvbHlmaWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsU0FBU0MsUUFBUSxtQkFBUixDQUFiOztBQUVBLElBQUlDLGlCQUFpQkQsUUFBUSxrQkFBUixDQUFyQjtBQUNBLElBQUlFLGNBQWNGLFFBQVEsWUFBUixDQUFsQjtBQUNBLElBQUlHLE9BQU9ILFFBQVEsUUFBUixDQUFYOztBQUVBLElBQUlJLFdBQVdGLGFBQWY7O0FBRUFILE9BQU9LLFFBQVAsRUFBaUI7QUFDaEJGLGNBQWFBLFdBREc7QUFFaEJELGlCQUFnQkEsY0FGQTtBQUdoQkUsT0FBTUE7QUFIVSxDQUFqQjs7QUFNQUUsT0FBT0MsT0FBUCxHQUFpQkYsUUFBakIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIl19","deps":{"./polyfill":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/polyfill.js","./shim":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/shim.js","define-properties":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/define-properties/index.js","./implementation":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/implementation.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js","source":"'use strict';\n\n/**\n * Special language-specific overrides.\n *\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n *\n * @type {Object}\n */\nvar LANGUAGES = {\n  tr: {\n    regexp: /[\\u0069]/g,\n    map: {\n      'i': '\\u0130'\n    }\n  },\n  az: {\n    regexp: /[\\u0069]/g,\n    map: {\n      'i': '\\u0130'\n    }\n  },\n  lt: {\n    regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n    map: {\n      'i\\u0307': 'I',\n      'j\\u0307': 'J',\n      '\\u012F\\u0307': '\\u012E',\n      'i\\u0307\\u0300': '\\xCC',\n      'i\\u0307\\u0301': '\\xCD',\n      'i\\u0307\\u0303': '\\u0128'\n    }\n  }\n\n  /**\n   * Upper case a string.\n   *\n   * @param  {String} str\n   * @return {String}\n   */\n};module.exports = function (str, locale) {\n  var lang = LANGUAGES[locale];\n\n  str = str == null ? '' : String(str);\n\n  if (lang) {\n    str = str.replace(lang.regexp, function (m) {\n      return lang.map[m];\n    });\n  }\n\n  return str.toUpperCase();\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVwcGVyLWNhc2UuanMiXSwibmFtZXMiOlsiTEFOR1VBR0VTIiwidHIiLCJyZWdleHAiLCJtYXAiLCJheiIsImx0IiwibW9kdWxlIiwiZXhwb3J0cyIsInN0ciIsImxvY2FsZSIsImxhbmciLCJTdHJpbmciLCJyZXBsYWNlIiwibSIsInRvVXBwZXJDYXNlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBT0EsSUFBSUEsWUFBWTtBQUNkQyxNQUFJO0FBQ0ZDLFlBQVEsV0FETjtBQUVGQyxTQUFLO0FBQ0gsV0FBVTtBQURQO0FBRkgsR0FEVTtBQU9kQyxNQUFJO0FBQ0ZGLFlBQVEsV0FETjtBQUVGQyxTQUFLO0FBQ0gsV0FBVTtBQURQO0FBRkgsR0FQVTtBQWFkRSxNQUFJO0FBQ0ZILFlBQVEsOERBRE47QUFFRkMsU0FBSztBQUNILGlCQUFnQixHQURiO0FBRUgsaUJBQWdCLEdBRmI7QUFHSCxzQkFBZ0IsUUFIYjtBQUlILHVCQUFzQixNQUpuQjtBQUtILHVCQUFzQixNQUxuQjtBQU1ILHVCQUFzQjtBQU5uQjtBQUZIOztBQWFOOzs7Ozs7QUExQmdCLENBQWhCLENBZ0NBRyxPQUFPQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZUMsTUFBZixFQUF1QjtBQUN0QyxNQUFJQyxPQUFPVixVQUFVUyxNQUFWLENBQVg7O0FBRUFELFFBQU1BLE9BQU8sSUFBUCxHQUFjLEVBQWQsR0FBbUJHLE9BQU9ILEdBQVAsQ0FBekI7O0FBRUEsTUFBSUUsSUFBSixFQUFVO0FBQ1JGLFVBQU1BLElBQUlJLE9BQUosQ0FBWUYsS0FBS1IsTUFBakIsRUFBeUIsVUFBVVcsQ0FBVixFQUFhO0FBQUUsYUFBT0gsS0FBS1AsR0FBTCxDQUFTVSxDQUFULENBQVA7QUFBb0IsS0FBNUQsQ0FBTjtBQUNEOztBQUVELFNBQU9MLElBQUlNLFdBQUosRUFBUDtBQUNELENBVkQiLCJmaWxlIjoidXBwZXItY2FzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3BlY2lhbCBsYW5ndWFnZS1zcGVjaWZpYyBvdmVycmlkZXMuXG4gKlxuICogU291cmNlOiBmdHA6Ly9mdHAudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL1NwZWNpYWxDYXNpbmcudHh0XG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIExBTkdVQUdFUyA9IHtcbiAgdHI6IHtcbiAgICByZWdleHA6IC9bXFx1MDA2OV0vZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMDY5JzogJ1xcdTAxMzAnXG4gICAgfVxuICB9LFxuICBhejoge1xuICAgIHJlZ2V4cDogL1tcXHUwMDY5XS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAwNjknOiAnXFx1MDEzMCdcbiAgICB9XG4gIH0sXG4gIGx0OiB7XG4gICAgcmVnZXhwOiAvW1xcdTAwNjlcXHUwMDZBXFx1MDEyRl1cXHUwMzA3fFxcdTAwNjlcXHUwMzA3W1xcdTAzMDBcXHUwMzAxXFx1MDMwM10vZyxcbiAgICBtYXA6IHtcbiAgICAgICdcXHUwMDY5XFx1MDMwNyc6ICdcXHUwMDQ5JyxcbiAgICAgICdcXHUwMDZBXFx1MDMwNyc6ICdcXHUwMDRBJyxcbiAgICAgICdcXHUwMTJGXFx1MDMwNyc6ICdcXHUwMTJFJyxcbiAgICAgICdcXHUwMDY5XFx1MDMwN1xcdTAzMDAnOiAnXFx1MDBDQycsXG4gICAgICAnXFx1MDA2OVxcdTAzMDdcXHUwMzAxJzogJ1xcdTAwQ0QnLFxuICAgICAgJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMyc6ICdcXHUwMTI4J1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFVwcGVyIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBsb2NhbGUpIHtcbiAgdmFyIGxhbmcgPSBMQU5HVUFHRVNbbG9jYWxlXVxuXG4gIHN0ciA9IHN0ciA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyKVxuXG4gIGlmIChsYW5nKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UobGFuZy5yZWdleHAsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBsYW5nLm1hcFttXSB9KVxuICB9XG5cbiAgcmV0dXJuIHN0ci50b1VwcGVyQ2FzZSgpXG59XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case/lower-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case/lower-case.js","source":"'use strict';\n\n/**\n * Special language-specific overrides.\n *\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n *\n * @type {Object}\n */\nvar LANGUAGES = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      '\\u0130': 'i',\n      'I': '\\u0131',\n      'I\\u0307': 'i'\n    }\n  },\n  az: {\n    regexp: /[\\u0130]/g,\n    map: {\n      '\\u0130': 'i',\n      'I': '\\u0131',\n      'I\\u0307': 'i'\n    }\n  },\n  lt: {\n    regexp: /[\\u0049\\u004A\\u012E\\u00CC\\u00CD\\u0128]/g,\n    map: {\n      'I': 'i\\u0307',\n      'J': 'j\\u0307',\n      '\\u012E': '\\u012F\\u0307',\n      '\\xCC': 'i\\u0307\\u0300',\n      '\\xCD': 'i\\u0307\\u0301',\n      '\\u0128': 'i\\u0307\\u0303'\n    }\n  }\n\n  /**\n   * Lowercase a string.\n   *\n   * @param  {String} str\n   * @return {String}\n   */\n};module.exports = function (str, locale) {\n  var lang = LANGUAGES[locale];\n\n  str = str == null ? '' : String(str);\n\n  if (lang) {\n    str = str.replace(lang.regexp, function (m) {\n      return lang.map[m];\n    });\n  }\n\n  return str.toLowerCase();\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvd2VyLWNhc2UuanMiXSwibmFtZXMiOlsiTEFOR1VBR0VTIiwidHIiLCJyZWdleHAiLCJtYXAiLCJheiIsImx0IiwibW9kdWxlIiwiZXhwb3J0cyIsInN0ciIsImxvY2FsZSIsImxhbmciLCJTdHJpbmciLCJyZXBsYWNlIiwibSIsInRvTG93ZXJDYXNlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBT0EsSUFBSUEsWUFBWTtBQUNkQyxNQUFJO0FBQ0ZDLFlBQVEsNkJBRE47QUFFRkMsU0FBSztBQUNILGdCQUFVLEdBRFA7QUFFSCxXQUFVLFFBRlA7QUFHSCxpQkFBZ0I7QUFIYjtBQUZILEdBRFU7QUFTZEMsTUFBSTtBQUNGRixZQUFRLFdBRE47QUFFRkMsU0FBSztBQUNILGdCQUFVLEdBRFA7QUFFSCxXQUFVLFFBRlA7QUFHSCxpQkFBZ0I7QUFIYjtBQUZILEdBVFU7QUFpQmRFLE1BQUk7QUFDRkgsWUFBUSx5Q0FETjtBQUVGQyxTQUFLO0FBQ0gsV0FBVSxTQURQO0FBRUgsV0FBVSxTQUZQO0FBR0gsZ0JBQVUsY0FIUDtBQUlILGNBQVUsZUFKUDtBQUtILGNBQVUsZUFMUDtBQU1ILGdCQUFVO0FBTlA7QUFGSDs7QUFhTjs7Ozs7O0FBOUJnQixDQUFoQixDQW9DQUcsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWVDLE1BQWYsRUFBdUI7QUFDdEMsTUFBSUMsT0FBT1YsVUFBVVMsTUFBVixDQUFYOztBQUVBRCxRQUFNQSxPQUFPLElBQVAsR0FBYyxFQUFkLEdBQW1CRyxPQUFPSCxHQUFQLENBQXpCOztBQUVBLE1BQUlFLElBQUosRUFBVTtBQUNSRixVQUFNQSxJQUFJSSxPQUFKLENBQVlGLEtBQUtSLE1BQWpCLEVBQXlCLFVBQVVXLENBQVYsRUFBYTtBQUFFLGFBQU9ILEtBQUtQLEdBQUwsQ0FBU1UsQ0FBVCxDQUFQO0FBQW9CLEtBQTVELENBQU47QUFDRDs7QUFFRCxTQUFPTCxJQUFJTSxXQUFKLEVBQVA7QUFDRCxDQVZEIiwiZmlsZSI6Imxvd2VyLWNhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNwZWNpYWwgbGFuZ3VhZ2Utc3BlY2lmaWMgb3ZlcnJpZGVzLlxuICpcbiAqIFNvdXJjZTogZnRwOi8vZnRwLnVuaWNvZGUub3JnL1B1YmxpYy9VQ0QvbGF0ZXN0L3VjZC9TcGVjaWFsQ2FzaW5nLnR4dFxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBMQU5HVUFHRVMgPSB7XG4gIHRyOiB7XG4gICAgcmVnZXhwOiAvXFx1MDEzMHxcXHUwMDQ5fFxcdTAwNDlcXHUwMzA3L2csXG4gICAgbWFwOiB7XG4gICAgICAnXFx1MDEzMCc6ICdcXHUwMDY5JyxcbiAgICAgICdcXHUwMDQ5JzogJ1xcdTAxMzEnLFxuICAgICAgJ1xcdTAwNDlcXHUwMzA3JzogJ1xcdTAwNjknXG4gICAgfVxuICB9LFxuICBhejoge1xuICAgIHJlZ2V4cDogL1tcXHUwMTMwXS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAxMzAnOiAnXFx1MDA2OScsXG4gICAgICAnXFx1MDA0OSc6ICdcXHUwMTMxJyxcbiAgICAgICdcXHUwMDQ5XFx1MDMwNyc6ICdcXHUwMDY5J1xuICAgIH1cbiAgfSxcbiAgbHQ6IHtcbiAgICByZWdleHA6IC9bXFx1MDA0OVxcdTAwNEFcXHUwMTJFXFx1MDBDQ1xcdTAwQ0RcXHUwMTI4XS9nLFxuICAgIG1hcDoge1xuICAgICAgJ1xcdTAwNDknOiAnXFx1MDA2OVxcdTAzMDcnLFxuICAgICAgJ1xcdTAwNEEnOiAnXFx1MDA2QVxcdTAzMDcnLFxuICAgICAgJ1xcdTAxMkUnOiAnXFx1MDEyRlxcdTAzMDcnLFxuICAgICAgJ1xcdTAwQ0MnOiAnXFx1MDA2OVxcdTAzMDdcXHUwMzAwJyxcbiAgICAgICdcXHUwMENEJzogJ1xcdTAwNjlcXHUwMzA3XFx1MDMwMScsXG4gICAgICAnXFx1MDEyOCc6ICdcXHUwMDY5XFx1MDMwN1xcdTAzMDMnXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTG93ZXJjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlKSB7XG4gIHZhciBsYW5nID0gTEFOR1VBR0VTW2xvY2FsZV1cblxuICBzdHIgPSBzdHIgPT0gbnVsbCA/ICcnIDogU3RyaW5nKHN0cilcblxuICBpZiAobGFuZykge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKGxhbmcucmVnZXhwLCBmdW5jdGlvbiAobSkgeyByZXR1cm4gbGFuZy5tYXBbbV0gfSlcbiAgfVxuXG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKVxufVxuIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/foreach/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/foreach/index.js","source":"'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nmodule.exports = function forEach(obj, fn, ctx) {\n    if (toString.call(fn) !== '[object Function]') {\n        throw new TypeError('iterator must be a function');\n    }\n    var l = obj.length;\n    if (l === +l) {\n        for (var i = 0; i < l; i++) {\n            fn.call(ctx, obj[i], i, obj);\n        }\n    } else {\n        for (var k in obj) {\n            if (hasOwn.call(obj, k)) {\n                fn.call(ctx, obj[k], k, obj);\n            }\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImhhc093biIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwidG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9yRWFjaCIsIm9iaiIsImZuIiwiY3R4IiwiY2FsbCIsIlR5cGVFcnJvciIsImwiLCJsZW5ndGgiLCJpIiwiayJdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFJQSxTQUFTQyxPQUFPQyxTQUFQLENBQWlCQyxjQUE5QjtBQUNBLElBQUlDLFdBQVdILE9BQU9DLFNBQVAsQ0FBaUJFLFFBQWhDOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLE9BQVQsQ0FBa0JDLEdBQWxCLEVBQXVCQyxFQUF2QixFQUEyQkMsR0FBM0IsRUFBZ0M7QUFDN0MsUUFBSU4sU0FBU08sSUFBVCxDQUFjRixFQUFkLE1BQXNCLG1CQUExQixFQUErQztBQUMzQyxjQUFNLElBQUlHLFNBQUosQ0FBYyw2QkFBZCxDQUFOO0FBQ0g7QUFDRCxRQUFJQyxJQUFJTCxJQUFJTSxNQUFaO0FBQ0EsUUFBSUQsTUFBTSxDQUFDQSxDQUFYLEVBQWM7QUFDVixhQUFLLElBQUlFLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsQ0FBcEIsRUFBdUJFLEdBQXZCLEVBQTRCO0FBQ3hCTixlQUFHRSxJQUFILENBQVFELEdBQVIsRUFBYUYsSUFBSU8sQ0FBSixDQUFiLEVBQXFCQSxDQUFyQixFQUF3QlAsR0FBeEI7QUFDSDtBQUNKLEtBSkQsTUFJTztBQUNILGFBQUssSUFBSVEsQ0FBVCxJQUFjUixHQUFkLEVBQW1CO0FBQ2YsZ0JBQUlSLE9BQU9XLElBQVAsQ0FBWUgsR0FBWixFQUFpQlEsQ0FBakIsQ0FBSixFQUF5QjtBQUNyQlAsbUJBQUdFLElBQUgsQ0FBUUQsR0FBUixFQUFhRixJQUFJUSxDQUFKLENBQWIsRUFBcUJBLENBQXJCLEVBQXdCUixHQUF4QjtBQUNIO0FBQ0o7QUFDSjtBQUNKLENBaEJEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZm9yRWFjaCAob2JqLCBmbiwgY3R4KSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwoZm4pICE9PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgbCA9IG9iai5sZW5ndGg7XG4gICAgaWYgKGwgPT09ICtsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBmbi5jYWxsKGN0eCwgb2JqW2ldLCBpLCBvYmopO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgayBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChvYmosIGspKSB7XG4gICAgICAgICAgICAgICAgZm4uY2FsbChjdHgsIG9ialtrXSwgaywgb2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbiJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/implementation.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/implementation.js","source":"'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function binder() {\n        if (this instanceof bound) {\n            var result = target.apply(this, args.concat(slice.call(arguments)));\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(that, args.concat(slice.call(arguments)));\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudGF0aW9uLmpzIl0sIm5hbWVzIjpbIkVSUk9SX01FU1NBR0UiLCJzbGljZSIsIkFycmF5IiwicHJvdG90eXBlIiwidG9TdHIiLCJPYmplY3QiLCJ0b1N0cmluZyIsImZ1bmNUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJ0aGF0IiwidGFyZ2V0IiwiY2FsbCIsIlR5cGVFcnJvciIsImFyZ3MiLCJhcmd1bWVudHMiLCJib3VuZCIsImJpbmRlciIsInJlc3VsdCIsImFwcGx5IiwiY29uY2F0IiwiYm91bmRMZW5ndGgiLCJNYXRoIiwibWF4IiwibGVuZ3RoIiwiYm91bmRBcmdzIiwiaSIsInB1c2giLCJGdW5jdGlvbiIsImpvaW4iLCJFbXB0eSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUEsSUFBSUEsZ0JBQWdCLGlEQUFwQjtBQUNBLElBQUlDLFFBQVFDLE1BQU1DLFNBQU4sQ0FBZ0JGLEtBQTVCO0FBQ0EsSUFBSUcsUUFBUUMsT0FBT0YsU0FBUCxDQUFpQkcsUUFBN0I7QUFDQSxJQUFJQyxXQUFXLG1CQUFmOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLElBQVQsQ0FBY0MsSUFBZCxFQUFvQjtBQUNqQyxRQUFJQyxTQUFTLElBQWI7QUFDQSxRQUFJLE9BQU9BLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0NSLE1BQU1TLElBQU4sQ0FBV0QsTUFBWCxNQUF1QkwsUUFBM0QsRUFBcUU7QUFDakUsY0FBTSxJQUFJTyxTQUFKLENBQWNkLGdCQUFnQlksTUFBOUIsQ0FBTjtBQUNIO0FBQ0QsUUFBSUcsT0FBT2QsTUFBTVksSUFBTixDQUFXRyxTQUFYLEVBQXNCLENBQXRCLENBQVg7O0FBRUEsUUFBSUMsS0FBSjtBQUNBLFFBQUlDLFNBQVMsU0FBVEEsTUFBUyxHQUFZO0FBQ3JCLFlBQUksZ0JBQWdCRCxLQUFwQixFQUEyQjtBQUN2QixnQkFBSUUsU0FBU1AsT0FBT1EsS0FBUCxDQUNULElBRFMsRUFFVEwsS0FBS00sTUFBTCxDQUFZcEIsTUFBTVksSUFBTixDQUFXRyxTQUFYLENBQVosQ0FGUyxDQUFiO0FBSUEsZ0JBQUlYLE9BQU9jLE1BQVAsTUFBbUJBLE1BQXZCLEVBQStCO0FBQzNCLHVCQUFPQSxNQUFQO0FBQ0g7QUFDRCxtQkFBTyxJQUFQO0FBQ0gsU0FURCxNQVNPO0FBQ0gsbUJBQU9QLE9BQU9RLEtBQVAsQ0FDSFQsSUFERyxFQUVISSxLQUFLTSxNQUFMLENBQVlwQixNQUFNWSxJQUFOLENBQVdHLFNBQVgsQ0FBWixDQUZHLENBQVA7QUFJSDtBQUNKLEtBaEJEOztBQWtCQSxRQUFJTSxjQUFjQyxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZWixPQUFPYSxNQUFQLEdBQWdCVixLQUFLVSxNQUFqQyxDQUFsQjtBQUNBLFFBQUlDLFlBQVksRUFBaEI7QUFDQSxTQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUwsV0FBcEIsRUFBaUNLLEdBQWpDLEVBQXNDO0FBQ2xDRCxrQkFBVUUsSUFBVixDQUFlLE1BQU1ELENBQXJCO0FBQ0g7O0FBRURWLFlBQVFZLFNBQVMsUUFBVCxFQUFtQixzQkFBc0JILFVBQVVJLElBQVYsQ0FBZSxHQUFmLENBQXRCLEdBQTRDLDJDQUEvRCxFQUE0R1osTUFBNUcsQ0FBUjs7QUFFQSxRQUFJTixPQUFPVCxTQUFYLEVBQXNCO0FBQ2xCLFlBQUk0QixRQUFRLFNBQVNBLEtBQVQsR0FBaUIsQ0FBRSxDQUEvQjtBQUNBQSxjQUFNNUIsU0FBTixHQUFrQlMsT0FBT1QsU0FBekI7QUFDQWMsY0FBTWQsU0FBTixHQUFrQixJQUFJNEIsS0FBSixFQUFsQjtBQUNBQSxjQUFNNUIsU0FBTixHQUFrQixJQUFsQjtBQUNIOztBQUVELFdBQU9jLEtBQVA7QUFDSCxDQTFDRCIsImZpbGUiOiJpbXBsZW1lbnRhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/index.js","source":"'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImltcGxlbWVudGF0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImJpbmQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGlCQUFpQkMsUUFBUSxrQkFBUixDQUFyQjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQkMsU0FBU0MsU0FBVCxDQUFtQkMsSUFBbkIsSUFBMkJOLGNBQTVDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iXX0=","deps":{"./implementation":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/implementation.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/non-word-regexp.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/non-word-regexp.js","source":"\"use strict\";\n\nmodule.exports = /[^A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]+/g;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/camel-case-regexp.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/camel-case-regexp.js","source":"\"use strict\";\n\nmodule.exports = /([a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19])([A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A])/g;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbWVsLWNhc2UtcmVnZXhwLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIseWpSQUFqQiIsImZpbGUiOiJjYW1lbC1jYXNlLXJlZ2V4cC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gLyhbYS16XFx4QjVcXHhERi1cXHhGNlxceEY4LVxceEZGXFx1MDEwMVxcdTAxMDNcXHUwMTA1XFx1MDEwN1xcdTAxMDlcXHUwMTBCXFx1MDEwRFxcdTAxMEZcXHUwMTExXFx1MDExM1xcdTAxMTVcXHUwMTE3XFx1MDExOVxcdTAxMUJcXHUwMTFEXFx1MDExRlxcdTAxMjFcXHUwMTIzXFx1MDEyNVxcdTAxMjdcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMTJGXFx1MDEzMVxcdTAxMzNcXHUwMTM1XFx1MDEzN1xcdTAxMzhcXHUwMTNBXFx1MDEzQ1xcdTAxM0VcXHUwMTQwXFx1MDE0MlxcdTAxNDRcXHUwMTQ2XFx1MDE0OFxcdTAxNDlcXHUwMTRCXFx1MDE0RFxcdTAxNEZcXHUwMTUxXFx1MDE1M1xcdTAxNTVcXHUwMTU3XFx1MDE1OVxcdTAxNUJcXHUwMTVEXFx1MDE1RlxcdTAxNjFcXHUwMTYzXFx1MDE2NVxcdTAxNjdcXHUwMTY5XFx1MDE2QlxcdTAxNkRcXHUwMTZGXFx1MDE3MVxcdTAxNzNcXHUwMTc1XFx1MDE3N1xcdTAxN0FcXHUwMTdDXFx1MDE3RS1cXHUwMTgwXFx1MDE4M1xcdTAxODVcXHUwMTg4XFx1MDE4Q1xcdTAxOERcXHUwMTkyXFx1MDE5NVxcdTAxOTktXFx1MDE5QlxcdTAxOUVcXHUwMUExXFx1MDFBM1xcdTAxQTVcXHUwMUE4XFx1MDFBQVxcdTAxQUJcXHUwMUFEXFx1MDFCMFxcdTAxQjRcXHUwMUI2XFx1MDFCOVxcdTAxQkFcXHUwMUJELVxcdTAxQkZcXHUwMUM2XFx1MDFDOVxcdTAxQ0NcXHUwMUNFXFx1MDFEMFxcdTAxRDJcXHUwMUQ0XFx1MDFENlxcdTAxRDhcXHUwMURBXFx1MDFEQ1xcdTAxRERcXHUwMURGXFx1MDFFMVxcdTAxRTNcXHUwMUU1XFx1MDFFN1xcdTAxRTlcXHUwMUVCXFx1MDFFRFxcdTAxRUZcXHUwMUYwXFx1MDFGM1xcdTAxRjVcXHUwMUY5XFx1MDFGQlxcdTAxRkRcXHUwMUZGXFx1MDIwMVxcdTAyMDNcXHUwMjA1XFx1MDIwN1xcdTAyMDlcXHUwMjBCXFx1MDIwRFxcdTAyMEZcXHUwMjExXFx1MDIxM1xcdTAyMTVcXHUwMjE3XFx1MDIxOVxcdTAyMUJcXHUwMjFEXFx1MDIxRlxcdTAyMjFcXHUwMjIzXFx1MDIyNVxcdTAyMjdcXHUwMjI5XFx1MDIyQlxcdTAyMkRcXHUwMjJGXFx1MDIzMVxcdTAyMzMtXFx1MDIzOVxcdTAyM0NcXHUwMjNGXFx1MDI0MFxcdTAyNDJcXHUwMjQ3XFx1MDI0OVxcdTAyNEJcXHUwMjREXFx1MDI0Ri1cXHUwMjkzXFx1MDI5NS1cXHUwMkFGXFx1MDM3MVxcdTAzNzNcXHUwMzc3XFx1MDM3Qi1cXHUwMzdEXFx1MDM5MFxcdTAzQUMtXFx1MDNDRVxcdTAzRDBcXHUwM0QxXFx1MDNENS1cXHUwM0Q3XFx1MDNEOVxcdTAzREJcXHUwM0REXFx1MDNERlxcdTAzRTFcXHUwM0UzXFx1MDNFNVxcdTAzRTdcXHUwM0U5XFx1MDNFQlxcdTAzRURcXHUwM0VGLVxcdTAzRjNcXHUwM0Y1XFx1MDNGOFxcdTAzRkJcXHUwM0ZDXFx1MDQzMC1cXHUwNDVGXFx1MDQ2MVxcdTA0NjNcXHUwNDY1XFx1MDQ2N1xcdTA0NjlcXHUwNDZCXFx1MDQ2RFxcdTA0NkZcXHUwNDcxXFx1MDQ3M1xcdTA0NzVcXHUwNDc3XFx1MDQ3OVxcdTA0N0JcXHUwNDdEXFx1MDQ3RlxcdTA0ODFcXHUwNDhCXFx1MDQ4RFxcdTA0OEZcXHUwNDkxXFx1MDQ5M1xcdTA0OTVcXHUwNDk3XFx1MDQ5OVxcdTA0OUJcXHUwNDlEXFx1MDQ5RlxcdTA0QTFcXHUwNEEzXFx1MDRBNVxcdTA0QTdcXHUwNEE5XFx1MDRBQlxcdTA0QURcXHUwNEFGXFx1MDRCMVxcdTA0QjNcXHUwNEI1XFx1MDRCN1xcdTA0QjlcXHUwNEJCXFx1MDRCRFxcdTA0QkZcXHUwNEMyXFx1MDRDNFxcdTA0QzZcXHUwNEM4XFx1MDRDQVxcdTA0Q0NcXHUwNENFXFx1MDRDRlxcdTA0RDFcXHUwNEQzXFx1MDRENVxcdTA0RDdcXHUwNEQ5XFx1MDREQlxcdTA0RERcXHUwNERGXFx1MDRFMVxcdTA0RTNcXHUwNEU1XFx1MDRFN1xcdTA0RTlcXHUwNEVCXFx1MDRFRFxcdTA0RUZcXHUwNEYxXFx1MDRGM1xcdTA0RjVcXHUwNEY3XFx1MDRGOVxcdTA0RkJcXHUwNEZEXFx1MDRGRlxcdTA1MDFcXHUwNTAzXFx1MDUwNVxcdTA1MDdcXHUwNTA5XFx1MDUwQlxcdTA1MERcXHUwNTBGXFx1MDUxMVxcdTA1MTNcXHUwNTE1XFx1MDUxN1xcdTA1MTlcXHUwNTFCXFx1MDUxRFxcdTA1MUZcXHUwNTIxXFx1MDUyM1xcdTA1MjVcXHUwNTI3XFx1MDUyOVxcdTA1MkJcXHUwNTJEXFx1MDUyRlxcdTA1NjEtXFx1MDU4N1xcdTEzRjgtXFx1MTNGRFxcdTFEMDAtXFx1MUQyQlxcdTFENkItXFx1MUQ3N1xcdTFENzktXFx1MUQ5QVxcdTFFMDFcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUxRTA5XFx1MUUwQlxcdTFFMERcXHUxRTBGXFx1MUUxMVxcdTFFMTNcXHUxRTE1XFx1MUUxN1xcdTFFMTlcXHUxRTFCXFx1MUUxRFxcdTFFMUZcXHUxRTIxXFx1MUUyM1xcdTFFMjVcXHUxRTI3XFx1MUUyOVxcdTFFMkJcXHUxRTJEXFx1MUUyRlxcdTFFMzFcXHUxRTMzXFx1MUUzNVxcdTFFMzdcXHUxRTM5XFx1MUUzQlxcdTFFM0RcXHUxRTNGXFx1MUU0MVxcdTFFNDNcXHUxRTQ1XFx1MUU0N1xcdTFFNDlcXHUxRTRCXFx1MUU0RFxcdTFFNEZcXHUxRTUxXFx1MUU1M1xcdTFFNTVcXHUxRTU3XFx1MUU1OVxcdTFFNUJcXHUxRTVEXFx1MUU1RlxcdTFFNjFcXHUxRTYzXFx1MUU2NVxcdTFFNjdcXHUxRTY5XFx1MUU2QlxcdTFFNkRcXHUxRTZGXFx1MUU3MVxcdTFFNzNcXHUxRTc1XFx1MUU3N1xcdTFFNzlcXHUxRTdCXFx1MUU3RFxcdTFFN0ZcXHUxRTgxXFx1MUU4M1xcdTFFODVcXHUxRTg3XFx1MUU4OVxcdTFFOEJcXHUxRThEXFx1MUU4RlxcdTFFOTFcXHUxRTkzXFx1MUU5NS1cXHUxRTlEXFx1MUU5RlxcdTFFQTFcXHUxRUEzXFx1MUVBNVxcdTFFQTdcXHUxRUE5XFx1MUVBQlxcdTFFQURcXHUxRUFGXFx1MUVCMVxcdTFFQjNcXHUxRUI1XFx1MUVCN1xcdTFFQjlcXHUxRUJCXFx1MUVCRFxcdTFFQkZcXHUxRUMxXFx1MUVDM1xcdTFFQzVcXHUxRUM3XFx1MUVDOVxcdTFFQ0JcXHUxRUNEXFx1MUVDRlxcdTFFRDFcXHUxRUQzXFx1MUVENVxcdTFFRDdcXHUxRUQ5XFx1MUVEQlxcdTFFRERcXHUxRURGXFx1MUVFMVxcdTFFRTNcXHUxRUU1XFx1MUVFN1xcdTFFRTlcXHUxRUVCXFx1MUVFRFxcdTFFRUZcXHUxRUYxXFx1MUVGM1xcdTFFRjVcXHUxRUY3XFx1MUVGOVxcdTFFRkJcXHUxRUZEXFx1MUVGRi1cXHUxRjA3XFx1MUYxMC1cXHUxRjE1XFx1MUYyMC1cXHUxRjI3XFx1MUYzMC1cXHUxRjM3XFx1MUY0MC1cXHUxRjQ1XFx1MUY1MC1cXHUxRjU3XFx1MUY2MC1cXHUxRjY3XFx1MUY3MC1cXHUxRjdEXFx1MUY4MC1cXHUxRjg3XFx1MUY5MC1cXHUxRjk3XFx1MUZBMC1cXHUxRkE3XFx1MUZCMC1cXHUxRkI0XFx1MUZCNlxcdTFGQjdcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNlxcdTFGQzdcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2XFx1MUZEN1xcdTFGRTAtXFx1MUZFN1xcdTFGRjItXFx1MUZGNFxcdTFGRjZcXHUxRkY3XFx1MjEwQVxcdTIxMEVcXHUyMTBGXFx1MjExM1xcdTIxMkZcXHUyMTM0XFx1MjEzOVxcdTIxM0NcXHUyMTNEXFx1MjE0Ni1cXHUyMTQ5XFx1MjE0RVxcdTIxODRcXHUyQzMwLVxcdTJDNUVcXHUyQzYxXFx1MkM2NVxcdTJDNjZcXHUyQzY4XFx1MkM2QVxcdTJDNkNcXHUyQzcxXFx1MkM3M1xcdTJDNzRcXHUyQzc2LVxcdTJDN0JcXHUyQzgxXFx1MkM4M1xcdTJDODVcXHUyQzg3XFx1MkM4OVxcdTJDOEJcXHUyQzhEXFx1MkM4RlxcdTJDOTFcXHUyQzkzXFx1MkM5NVxcdTJDOTdcXHUyQzk5XFx1MkM5QlxcdTJDOURcXHUyQzlGXFx1MkNBMVxcdTJDQTNcXHUyQ0E1XFx1MkNBN1xcdTJDQTlcXHUyQ0FCXFx1MkNBRFxcdTJDQUZcXHUyQ0IxXFx1MkNCM1xcdTJDQjVcXHUyQ0I3XFx1MkNCOVxcdTJDQkJcXHUyQ0JEXFx1MkNCRlxcdTJDQzFcXHUyQ0MzXFx1MkNDNVxcdTJDQzdcXHUyQ0M5XFx1MkNDQlxcdTJDQ0RcXHUyQ0NGXFx1MkNEMVxcdTJDRDNcXHUyQ0Q1XFx1MkNEN1xcdTJDRDlcXHUyQ0RCXFx1MkNERFxcdTJDREZcXHUyQ0UxXFx1MkNFM1xcdTJDRTRcXHUyQ0VDXFx1MkNFRVxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdUE2NDFcXHVBNjQzXFx1QTY0NVxcdUE2NDdcXHVBNjQ5XFx1QTY0QlxcdUE2NERcXHVBNjRGXFx1QTY1MVxcdUE2NTNcXHVBNjU1XFx1QTY1N1xcdUE2NTlcXHVBNjVCXFx1QTY1RFxcdUE2NUZcXHVBNjYxXFx1QTY2M1xcdUE2NjVcXHVBNjY3XFx1QTY2OVxcdUE2NkJcXHVBNjZEXFx1QTY4MVxcdUE2ODNcXHVBNjg1XFx1QTY4N1xcdUE2ODlcXHVBNjhCXFx1QTY4RFxcdUE2OEZcXHVBNjkxXFx1QTY5M1xcdUE2OTVcXHVBNjk3XFx1QTY5OVxcdUE2OUJcXHVBNzIzXFx1QTcyNVxcdUE3MjdcXHVBNzI5XFx1QTcyQlxcdUE3MkRcXHVBNzJGLVxcdUE3MzFcXHVBNzMzXFx1QTczNVxcdUE3MzdcXHVBNzM5XFx1QTczQlxcdUE3M0RcXHVBNzNGXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTc0N1xcdUE3NDlcXHVBNzRCXFx1QTc0RFxcdUE3NEZcXHVBNzUxXFx1QTc1M1xcdUE3NTVcXHVBNzU3XFx1QTc1OVxcdUE3NUJcXHVBNzVEXFx1QTc1RlxcdUE3NjFcXHVBNzYzXFx1QTc2NVxcdUE3NjdcXHVBNzY5XFx1QTc2QlxcdUE3NkRcXHVBNzZGXFx1QTc3MS1cXHVBNzc4XFx1QTc3QVxcdUE3N0NcXHVBNzdGXFx1QTc4MVxcdUE3ODNcXHVBNzg1XFx1QTc4N1xcdUE3OENcXHVBNzhFXFx1QTc5MVxcdUE3OTMtXFx1QTc5NVxcdUE3OTdcXHVBNzk5XFx1QTc5QlxcdUE3OURcXHVBNzlGXFx1QTdBMVxcdUE3QTNcXHVBN0E1XFx1QTdBN1xcdUE3QTlcXHVBN0I1XFx1QTdCN1xcdUE3RkFcXHVBQjMwLVxcdUFCNUFcXHVBQjYwLVxcdUFCNjVcXHVBQjcwLVxcdUFCQkZcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGRjQxLVxcdUZGNUEwLTlcXHhCMlxceEIzXFx4QjlcXHhCQy1cXHhCRVxcdTA2NjAtXFx1MDY2OVxcdTA2RjAtXFx1MDZGOVxcdTA3QzAtXFx1MDdDOVxcdTA5NjYtXFx1MDk2RlxcdTA5RTYtXFx1MDlFRlxcdTA5RjQtXFx1MDlGOVxcdTBBNjYtXFx1MEE2RlxcdTBBRTYtXFx1MEFFRlxcdTBCNjYtXFx1MEI2RlxcdTBCNzItXFx1MEI3N1xcdTBCRTYtXFx1MEJGMlxcdTBDNjYtXFx1MEM2RlxcdTBDNzgtXFx1MEM3RVxcdTBDRTYtXFx1MENFRlxcdTBENjYtXFx1MEQ3NVxcdTBERTYtXFx1MERFRlxcdTBFNTAtXFx1MEU1OVxcdTBFRDAtXFx1MEVEOVxcdTBGMjAtXFx1MEYzM1xcdTEwNDAtXFx1MTA0OVxcdTEwOTAtXFx1MTA5OVxcdTEzNjktXFx1MTM3Q1xcdTE2RUUtXFx1MTZGMFxcdTE3RTAtXFx1MTdFOVxcdTE3RjAtXFx1MTdGOVxcdTE4MTAtXFx1MTgxOVxcdTE5NDYtXFx1MTk0RlxcdTE5RDAtXFx1MTlEQVxcdTFBODAtXFx1MUE4OVxcdTFBOTAtXFx1MUE5OVxcdTFCNTAtXFx1MUI1OVxcdTFCQjAtXFx1MUJCOVxcdTFDNDAtXFx1MUM0OVxcdTFDNTAtXFx1MUM1OVxcdTIwNzBcXHUyMDc0LVxcdTIwNzlcXHUyMDgwLVxcdTIwODlcXHUyMTUwLVxcdTIxODJcXHUyMTg1LVxcdTIxODlcXHUyNDYwLVxcdTI0OUJcXHUyNEVBLVxcdTI0RkZcXHUyNzc2LVxcdTI3OTNcXHUyQ0ZEXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzgtXFx1MzAzQVxcdTMxOTItXFx1MzE5NVxcdTMyMjAtXFx1MzIyOVxcdTMyNDgtXFx1MzI0RlxcdTMyNTEtXFx1MzI1RlxcdTMyODAtXFx1MzI4OVxcdTMyQjEtXFx1MzJCRlxcdUE2MjAtXFx1QTYyOVxcdUE2RTYtXFx1QTZFRlxcdUE4MzAtXFx1QTgzNVxcdUE4RDAtXFx1QThEOVxcdUE5MDAtXFx1QTkwOVxcdUE5RDAtXFx1QTlEOVxcdUE5RjAtXFx1QTlGOVxcdUFBNTAtXFx1QUE1OVxcdUFCRjAtXFx1QUJGOVxcdUZGMTAtXFx1RkYxOV0pKFtBLVpcXHhDMC1cXHhENlxceEQ4LVxceERFXFx1MDEwMFxcdTAxMDJcXHUwMTA0XFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAxMEVcXHUwMTEwXFx1MDExMlxcdTAxMTRcXHUwMTE2XFx1MDExOFxcdTAxMUFcXHUwMTFDXFx1MDExRVxcdTAxMjBcXHUwMTIyXFx1MDEyNFxcdTAxMjZcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTJFXFx1MDEzMFxcdTAxMzJcXHUwMTM0XFx1MDEzNlxcdTAxMzlcXHUwMTNCXFx1MDEzRFxcdTAxM0ZcXHUwMTQxXFx1MDE0M1xcdTAxNDVcXHUwMTQ3XFx1MDE0QVxcdTAxNENcXHUwMTRFXFx1MDE1MFxcdTAxNTJcXHUwMTU0XFx1MDE1NlxcdTAxNThcXHUwMTVBXFx1MDE1Q1xcdTAxNUVcXHUwMTYwXFx1MDE2MlxcdTAxNjRcXHUwMTY2XFx1MDE2OFxcdTAxNkFcXHUwMTZDXFx1MDE2RVxcdTAxNzBcXHUwMTcyXFx1MDE3NFxcdTAxNzZcXHUwMTc4XFx1MDE3OVxcdTAxN0JcXHUwMTdEXFx1MDE4MVxcdTAxODJcXHUwMTg0XFx1MDE4NlxcdTAxODdcXHUwMTg5LVxcdTAxOEJcXHUwMThFLVxcdTAxOTFcXHUwMTkzXFx1MDE5NFxcdTAxOTYtXFx1MDE5OFxcdTAxOUNcXHUwMTlEXFx1MDE5RlxcdTAxQTBcXHUwMUEyXFx1MDFBNFxcdTAxQTZcXHUwMUE3XFx1MDFBOVxcdTAxQUNcXHUwMUFFXFx1MDFBRlxcdTAxQjEtXFx1MDFCM1xcdTAxQjVcXHUwMUI3XFx1MDFCOFxcdTAxQkNcXHUwMUM0XFx1MDFDN1xcdTAxQ0FcXHUwMUNEXFx1MDFDRlxcdTAxRDFcXHUwMUQzXFx1MDFENVxcdTAxRDdcXHUwMUQ5XFx1MDFEQlxcdTAxREVcXHUwMUUwXFx1MDFFMlxcdTAxRTRcXHUwMUU2XFx1MDFFOFxcdTAxRUFcXHUwMUVDXFx1MDFFRVxcdTAxRjFcXHUwMUY0XFx1MDFGNi1cXHUwMUY4XFx1MDFGQVxcdTAxRkNcXHUwMUZFXFx1MDIwMFxcdTAyMDJcXHUwMjA0XFx1MDIwNlxcdTAyMDhcXHUwMjBBXFx1MDIwQ1xcdTAyMEVcXHUwMjEwXFx1MDIxMlxcdTAyMTRcXHUwMjE2XFx1MDIxOFxcdTAyMUFcXHUwMjFDXFx1MDIxRVxcdTAyMjBcXHUwMjIyXFx1MDIyNFxcdTAyMjZcXHUwMjI4XFx1MDIyQVxcdTAyMkNcXHUwMjJFXFx1MDIzMFxcdTAyMzJcXHUwMjNBXFx1MDIzQlxcdTAyM0RcXHUwMjNFXFx1MDI0MVxcdTAyNDMtXFx1MDI0NlxcdTAyNDhcXHUwMjRBXFx1MDI0Q1xcdTAyNEVcXHUwMzcwXFx1MDM3MlxcdTAzNzZcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFXFx1MDM4RlxcdTAzOTEtXFx1MDNBMVxcdTAzQTMtXFx1MDNBQlxcdTAzQ0ZcXHUwM0QyLVxcdTAzRDRcXHUwM0Q4XFx1MDNEQVxcdTAzRENcXHUwM0RFXFx1MDNFMFxcdTAzRTJcXHUwM0U0XFx1MDNFNlxcdTAzRThcXHUwM0VBXFx1MDNFQ1xcdTAzRUVcXHUwM0Y0XFx1MDNGN1xcdTAzRjlcXHUwM0ZBXFx1MDNGRC1cXHUwNDJGXFx1MDQ2MFxcdTA0NjJcXHUwNDY0XFx1MDQ2NlxcdTA0NjhcXHUwNDZBXFx1MDQ2Q1xcdTA0NkVcXHUwNDcwXFx1MDQ3MlxcdTA0NzRcXHUwNDc2XFx1MDQ3OFxcdTA0N0FcXHUwNDdDXFx1MDQ3RVxcdTA0ODBcXHUwNDhBXFx1MDQ4Q1xcdTA0OEVcXHUwNDkwXFx1MDQ5MlxcdTA0OTRcXHUwNDk2XFx1MDQ5OFxcdTA0OUFcXHUwNDlDXFx1MDQ5RVxcdTA0QTBcXHUwNEEyXFx1MDRBNFxcdTA0QTZcXHUwNEE4XFx1MDRBQVxcdTA0QUNcXHUwNEFFXFx1MDRCMFxcdTA0QjJcXHUwNEI0XFx1MDRCNlxcdTA0QjhcXHUwNEJBXFx1MDRCQ1xcdTA0QkVcXHUwNEMwXFx1MDRDMVxcdTA0QzNcXHUwNEM1XFx1MDRDN1xcdTA0QzlcXHUwNENCXFx1MDRDRFxcdTA0RDBcXHUwNEQyXFx1MDRENFxcdTA0RDZcXHUwNEQ4XFx1MDREQVxcdTA0RENcXHUwNERFXFx1MDRFMFxcdTA0RTJcXHUwNEU0XFx1MDRFNlxcdTA0RThcXHUwNEVBXFx1MDRFQ1xcdTA0RUVcXHUwNEYwXFx1MDRGMlxcdTA0RjRcXHUwNEY2XFx1MDRGOFxcdTA0RkFcXHUwNEZDXFx1MDRGRVxcdTA1MDBcXHUwNTAyXFx1MDUwNFxcdTA1MDZcXHUwNTA4XFx1MDUwQVxcdTA1MENcXHUwNTBFXFx1MDUxMFxcdTA1MTJcXHUwNTE0XFx1MDUxNlxcdTA1MThcXHUwNTFBXFx1MDUxQ1xcdTA1MUVcXHUwNTIwXFx1MDUyMlxcdTA1MjRcXHUwNTI2XFx1MDUyOFxcdTA1MkFcXHUwNTJDXFx1MDUyRVxcdTA1MzEtXFx1MDU1NlxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTNBMC1cXHUxM0Y1XFx1MUUwMFxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTFFMDhcXHUxRTBBXFx1MUUwQ1xcdTFFMEVcXHUxRTEwXFx1MUUxMlxcdTFFMTRcXHUxRTE2XFx1MUUxOFxcdTFFMUFcXHUxRTFDXFx1MUUxRVxcdTFFMjBcXHUxRTIyXFx1MUUyNFxcdTFFMjZcXHUxRTI4XFx1MUUyQVxcdTFFMkNcXHUxRTJFXFx1MUUzMFxcdTFFMzJcXHUxRTM0XFx1MUUzNlxcdTFFMzhcXHUxRTNBXFx1MUUzQ1xcdTFFM0VcXHUxRTQwXFx1MUU0MlxcdTFFNDRcXHUxRTQ2XFx1MUU0OFxcdTFFNEFcXHUxRTRDXFx1MUU0RVxcdTFFNTBcXHUxRTUyXFx1MUU1NFxcdTFFNTZcXHUxRTU4XFx1MUU1QVxcdTFFNUNcXHUxRTVFXFx1MUU2MFxcdTFFNjJcXHUxRTY0XFx1MUU2NlxcdTFFNjhcXHUxRTZBXFx1MUU2Q1xcdTFFNkVcXHUxRTcwXFx1MUU3MlxcdTFFNzRcXHUxRTc2XFx1MUU3OFxcdTFFN0FcXHUxRTdDXFx1MUU3RVxcdTFFODBcXHUxRTgyXFx1MUU4NFxcdTFFODZcXHUxRTg4XFx1MUU4QVxcdTFFOENcXHUxRThFXFx1MUU5MFxcdTFFOTJcXHUxRTk0XFx1MUU5RVxcdTFFQTBcXHUxRUEyXFx1MUVBNFxcdTFFQTZcXHUxRUE4XFx1MUVBQVxcdTFFQUNcXHUxRUFFXFx1MUVCMFxcdTFFQjJcXHUxRUI0XFx1MUVCNlxcdTFFQjhcXHUxRUJBXFx1MUVCQ1xcdTFFQkVcXHUxRUMwXFx1MUVDMlxcdTFFQzRcXHUxRUM2XFx1MUVDOFxcdTFFQ0FcXHUxRUNDXFx1MUVDRVxcdTFFRDBcXHUxRUQyXFx1MUVENFxcdTFFRDZcXHUxRUQ4XFx1MUVEQVxcdTFFRENcXHUxRURFXFx1MUVFMFxcdTFFRTJcXHUxRUU0XFx1MUVFNlxcdTFFRThcXHUxRUVBXFx1MUVFQ1xcdTFFRUVcXHUxRUYwXFx1MUVGMlxcdTFFRjRcXHUxRUY2XFx1MUVGOFxcdTFFRkFcXHUxRUZDXFx1MUVGRVxcdTFGMDgtXFx1MUYwRlxcdTFGMTgtXFx1MUYxRFxcdTFGMjgtXFx1MUYyRlxcdTFGMzgtXFx1MUYzRlxcdTFGNDgtXFx1MUY0RFxcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUZcXHUxRjY4LVxcdTFGNkZcXHUxRkI4LVxcdTFGQkJcXHUxRkM4LVxcdTFGQ0JcXHUxRkQ4LVxcdTFGREJcXHUxRkU4LVxcdTFGRUNcXHUxRkY4LVxcdTFGRkJcXHUyMTAyXFx1MjEwN1xcdTIxMEItXFx1MjEwRFxcdTIxMTAtXFx1MjExMlxcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTMwLVxcdTIxMzNcXHUyMTNFXFx1MjEzRlxcdTIxNDVcXHUyMTgzXFx1MkMwMC1cXHUyQzJFXFx1MkM2MFxcdTJDNjItXFx1MkM2NFxcdTJDNjdcXHUyQzY5XFx1MkM2QlxcdTJDNkQtXFx1MkM3MFxcdTJDNzJcXHUyQzc1XFx1MkM3RS1cXHUyQzgwXFx1MkM4MlxcdTJDODRcXHUyQzg2XFx1MkM4OFxcdTJDOEFcXHUyQzhDXFx1MkM4RVxcdTJDOTBcXHUyQzkyXFx1MkM5NFxcdTJDOTZcXHUyQzk4XFx1MkM5QVxcdTJDOUNcXHUyQzlFXFx1MkNBMFxcdTJDQTJcXHUyQ0E0XFx1MkNBNlxcdTJDQThcXHUyQ0FBXFx1MkNBQ1xcdTJDQUVcXHUyQ0IwXFx1MkNCMlxcdTJDQjRcXHUyQ0I2XFx1MkNCOFxcdTJDQkFcXHUyQ0JDXFx1MkNCRVxcdTJDQzBcXHUyQ0MyXFx1MkNDNFxcdTJDQzZcXHUyQ0M4XFx1MkNDQVxcdTJDQ0NcXHUyQ0NFXFx1MkNEMFxcdTJDRDJcXHUyQ0Q0XFx1MkNENlxcdTJDRDhcXHUyQ0RBXFx1MkNEQ1xcdTJDREVcXHUyQ0UwXFx1MkNFMlxcdTJDRUJcXHUyQ0VEXFx1MkNGMlxcdUE2NDBcXHVBNjQyXFx1QTY0NFxcdUE2NDZcXHVBNjQ4XFx1QTY0QVxcdUE2NENcXHVBNjRFXFx1QTY1MFxcdUE2NTJcXHVBNjU0XFx1QTY1NlxcdUE2NThcXHVBNjVBXFx1QTY1Q1xcdUE2NUVcXHVBNjYwXFx1QTY2MlxcdUE2NjRcXHVBNjY2XFx1QTY2OFxcdUE2NkFcXHVBNjZDXFx1QTY4MFxcdUE2ODJcXHVBNjg0XFx1QTY4NlxcdUE2ODhcXHVBNjhBXFx1QTY4Q1xcdUE2OEVcXHVBNjkwXFx1QTY5MlxcdUE2OTRcXHVBNjk2XFx1QTY5OFxcdUE2OUFcXHVBNzIyXFx1QTcyNFxcdUE3MjZcXHVBNzI4XFx1QTcyQVxcdUE3MkNcXHVBNzJFXFx1QTczMlxcdUE3MzRcXHVBNzM2XFx1QTczOFxcdUE3M0FcXHVBNzNDXFx1QTczRVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3NDZcXHVBNzQ4XFx1QTc0QVxcdUE3NENcXHVBNzRFXFx1QTc1MFxcdUE3NTJcXHVBNzU0XFx1QTc1NlxcdUE3NThcXHVBNzVBXFx1QTc1Q1xcdUE3NUVcXHVBNzYwXFx1QTc2MlxcdUE3NjRcXHVBNzY2XFx1QTc2OFxcdUE3NkFcXHVBNzZDXFx1QTc2RVxcdUE3NzlcXHVBNzdCXFx1QTc3RFxcdUE3N0VcXHVBNzgwXFx1QTc4MlxcdUE3ODRcXHVBNzg2XFx1QTc4QlxcdUE3OERcXHVBNzkwXFx1QTc5MlxcdUE3OTZcXHVBNzk4XFx1QTc5QVxcdUE3OUNcXHVBNzlFXFx1QTdBMFxcdUE3QTJcXHVBN0E0XFx1QTdBNlxcdUE3QThcXHVBN0FBLVxcdUE3QURcXHVBN0IwLVxcdUE3QjRcXHVBN0I2XFx1RkYyMS1cXHVGRjNBXSkvZ1xuIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/camel-case-upper-regexp.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/camel-case-upper-regexp.js","source":"\"use strict\";\n\nmodule.exports = /([A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A])([A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A][a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A])/g;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbWVsLWNhc2UtdXBwZXItcmVnZXhwLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsa2xYQUFqQiIsImZpbGUiOiJjYW1lbC1jYXNlLXVwcGVyLXJlZ2V4cC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gLyhbQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERVxcdTAxMDBcXHUwMTAyXFx1MDEwNFxcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMTBFXFx1MDExMFxcdTAxMTJcXHUwMTE0XFx1MDExNlxcdTAxMThcXHUwMTFBXFx1MDExQ1xcdTAxMUVcXHUwMTIwXFx1MDEyMlxcdTAxMjRcXHUwMTI2XFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEyRVxcdTAxMzBcXHUwMTMyXFx1MDEzNFxcdTAxMzZcXHUwMTM5XFx1MDEzQlxcdTAxM0RcXHUwMTNGXFx1MDE0MVxcdTAxNDNcXHUwMTQ1XFx1MDE0N1xcdTAxNEFcXHUwMTRDXFx1MDE0RVxcdTAxNTBcXHUwMTUyXFx1MDE1NFxcdTAxNTZcXHUwMTU4XFx1MDE1QVxcdTAxNUNcXHUwMTVFXFx1MDE2MFxcdTAxNjJcXHUwMTY0XFx1MDE2NlxcdTAxNjhcXHUwMTZBXFx1MDE2Q1xcdTAxNkVcXHUwMTcwXFx1MDE3MlxcdTAxNzRcXHUwMTc2XFx1MDE3OFxcdTAxNzlcXHUwMTdCXFx1MDE3RFxcdTAxODFcXHUwMTgyXFx1MDE4NFxcdTAxODZcXHUwMTg3XFx1MDE4OS1cXHUwMThCXFx1MDE4RS1cXHUwMTkxXFx1MDE5M1xcdTAxOTRcXHUwMTk2LVxcdTAxOThcXHUwMTlDXFx1MDE5RFxcdTAxOUZcXHUwMUEwXFx1MDFBMlxcdTAxQTRcXHUwMUE2XFx1MDFBN1xcdTAxQTlcXHUwMUFDXFx1MDFBRVxcdTAxQUZcXHUwMUIxLVxcdTAxQjNcXHUwMUI1XFx1MDFCN1xcdTAxQjhcXHUwMUJDXFx1MDFDNFxcdTAxQzdcXHUwMUNBXFx1MDFDRFxcdTAxQ0ZcXHUwMUQxXFx1MDFEM1xcdTAxRDVcXHUwMUQ3XFx1MDFEOVxcdTAxREJcXHUwMURFXFx1MDFFMFxcdTAxRTJcXHUwMUU0XFx1MDFFNlxcdTAxRThcXHUwMUVBXFx1MDFFQ1xcdTAxRUVcXHUwMUYxXFx1MDFGNFxcdTAxRjYtXFx1MDFGOFxcdTAxRkFcXHUwMUZDXFx1MDFGRVxcdTAyMDBcXHUwMjAyXFx1MDIwNFxcdTAyMDZcXHUwMjA4XFx1MDIwQVxcdTAyMENcXHUwMjBFXFx1MDIxMFxcdTAyMTJcXHUwMjE0XFx1MDIxNlxcdTAyMThcXHUwMjFBXFx1MDIxQ1xcdTAyMUVcXHUwMjIwXFx1MDIyMlxcdTAyMjRcXHUwMjI2XFx1MDIyOFxcdTAyMkFcXHUwMjJDXFx1MDIyRVxcdTAyMzBcXHUwMjMyXFx1MDIzQVxcdTAyM0JcXHUwMjNEXFx1MDIzRVxcdTAyNDFcXHUwMjQzLVxcdTAyNDZcXHUwMjQ4XFx1MDI0QVxcdTAyNENcXHUwMjRFXFx1MDM3MFxcdTAzNzJcXHUwMzc2XFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RVxcdTAzOEZcXHUwMzkxLVxcdTAzQTFcXHUwM0EzLVxcdTAzQUJcXHUwM0NGXFx1MDNEMi1cXHUwM0Q0XFx1MDNEOFxcdTAzREFcXHUwM0RDXFx1MDNERVxcdTAzRTBcXHUwM0UyXFx1MDNFNFxcdTAzRTZcXHUwM0U4XFx1MDNFQVxcdTAzRUNcXHUwM0VFXFx1MDNGNFxcdTAzRjdcXHUwM0Y5XFx1MDNGQVxcdTAzRkQtXFx1MDQyRlxcdTA0NjBcXHUwNDYyXFx1MDQ2NFxcdTA0NjZcXHUwNDY4XFx1MDQ2QVxcdTA0NkNcXHUwNDZFXFx1MDQ3MFxcdTA0NzJcXHUwNDc0XFx1MDQ3NlxcdTA0NzhcXHUwNDdBXFx1MDQ3Q1xcdTA0N0VcXHUwNDgwXFx1MDQ4QVxcdTA0OENcXHUwNDhFXFx1MDQ5MFxcdTA0OTJcXHUwNDk0XFx1MDQ5NlxcdTA0OThcXHUwNDlBXFx1MDQ5Q1xcdTA0OUVcXHUwNEEwXFx1MDRBMlxcdTA0QTRcXHUwNEE2XFx1MDRBOFxcdTA0QUFcXHUwNEFDXFx1MDRBRVxcdTA0QjBcXHUwNEIyXFx1MDRCNFxcdTA0QjZcXHUwNEI4XFx1MDRCQVxcdTA0QkNcXHUwNEJFXFx1MDRDMFxcdTA0QzFcXHUwNEMzXFx1MDRDNVxcdTA0QzdcXHUwNEM5XFx1MDRDQlxcdTA0Q0RcXHUwNEQwXFx1MDREMlxcdTA0RDRcXHUwNEQ2XFx1MDREOFxcdTA0REFcXHUwNERDXFx1MDRERVxcdTA0RTBcXHUwNEUyXFx1MDRFNFxcdTA0RTZcXHUwNEU4XFx1MDRFQVxcdTA0RUNcXHUwNEVFXFx1MDRGMFxcdTA0RjJcXHUwNEY0XFx1MDRGNlxcdTA0RjhcXHUwNEZBXFx1MDRGQ1xcdTA0RkVcXHUwNTAwXFx1MDUwMlxcdTA1MDRcXHUwNTA2XFx1MDUwOFxcdTA1MEFcXHUwNTBDXFx1MDUwRVxcdTA1MTBcXHUwNTEyXFx1MDUxNFxcdTA1MTZcXHUwNTE4XFx1MDUxQVxcdTA1MUNcXHUwNTFFXFx1MDUyMFxcdTA1MjJcXHUwNTI0XFx1MDUyNlxcdTA1MjhcXHUwNTJBXFx1MDUyQ1xcdTA1MkVcXHUwNTMxLVxcdTA1NTZcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEzQTAtXFx1MTNGNVxcdTFFMDBcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUxRTA4XFx1MUUwQVxcdTFFMENcXHUxRTBFXFx1MUUxMFxcdTFFMTJcXHUxRTE0XFx1MUUxNlxcdTFFMThcXHUxRTFBXFx1MUUxQ1xcdTFFMUVcXHUxRTIwXFx1MUUyMlxcdTFFMjRcXHUxRTI2XFx1MUUyOFxcdTFFMkFcXHUxRTJDXFx1MUUyRVxcdTFFMzBcXHUxRTMyXFx1MUUzNFxcdTFFMzZcXHUxRTM4XFx1MUUzQVxcdTFFM0NcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUxRTQ0XFx1MUU0NlxcdTFFNDhcXHUxRTRBXFx1MUU0Q1xcdTFFNEVcXHUxRTUwXFx1MUU1MlxcdTFFNTRcXHUxRTU2XFx1MUU1OFxcdTFFNUFcXHUxRTVDXFx1MUU1RVxcdTFFNjBcXHUxRTYyXFx1MUU2NFxcdTFFNjZcXHUxRTY4XFx1MUU2QVxcdTFFNkNcXHUxRTZFXFx1MUU3MFxcdTFFNzJcXHUxRTc0XFx1MUU3NlxcdTFFNzhcXHUxRTdBXFx1MUU3Q1xcdTFFN0VcXHUxRTgwXFx1MUU4MlxcdTFFODRcXHUxRTg2XFx1MUU4OFxcdTFFOEFcXHUxRThDXFx1MUU4RVxcdTFFOTBcXHUxRTkyXFx1MUU5NFxcdTFFOUVcXHUxRUEwXFx1MUVBMlxcdTFFQTRcXHUxRUE2XFx1MUVBOFxcdTFFQUFcXHUxRUFDXFx1MUVBRVxcdTFFQjBcXHUxRUIyXFx1MUVCNFxcdTFFQjZcXHUxRUI4XFx1MUVCQVxcdTFFQkNcXHUxRUJFXFx1MUVDMFxcdTFFQzJcXHUxRUM0XFx1MUVDNlxcdTFFQzhcXHUxRUNBXFx1MUVDQ1xcdTFFQ0VcXHUxRUQwXFx1MUVEMlxcdTFFRDRcXHUxRUQ2XFx1MUVEOFxcdTFFREFcXHUxRURDXFx1MUVERVxcdTFFRTBcXHUxRUUyXFx1MUVFNFxcdTFFRTZcXHUxRUU4XFx1MUVFQVxcdTFFRUNcXHUxRUVFXFx1MUVGMFxcdTFFRjJcXHUxRUY0XFx1MUVGNlxcdTFFRjhcXHUxRUZBXFx1MUVGQ1xcdTFFRkVcXHUxRjA4LVxcdTFGMEZcXHUxRjE4LVxcdTFGMURcXHUxRjI4LVxcdTFGMkZcXHUxRjM4LVxcdTFGM0ZcXHUxRjQ4LVxcdTFGNERcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGXFx1MUY2OC1cXHUxRjZGXFx1MUZCOC1cXHUxRkJCXFx1MUZDOC1cXHUxRkNCXFx1MUZEOC1cXHUxRkRCXFx1MUZFOC1cXHUxRkVDXFx1MUZGOC1cXHUxRkZCXFx1MjEwMlxcdTIxMDdcXHUyMTBCLVxcdTIxMERcXHUyMTEwLVxcdTIxMTJcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEzMC1cXHUyMTMzXFx1MjEzRVxcdTIxM0ZcXHUyMTQ1XFx1MjE4M1xcdTJDMDAtXFx1MkMyRVxcdTJDNjBcXHUyQzYyLVxcdTJDNjRcXHUyQzY3XFx1MkM2OVxcdTJDNkJcXHUyQzZELVxcdTJDNzBcXHUyQzcyXFx1MkM3NVxcdTJDN0UtXFx1MkM4MFxcdTJDODJcXHUyQzg0XFx1MkM4NlxcdTJDODhcXHUyQzhBXFx1MkM4Q1xcdTJDOEVcXHUyQzkwXFx1MkM5MlxcdTJDOTRcXHUyQzk2XFx1MkM5OFxcdTJDOUFcXHUyQzlDXFx1MkM5RVxcdTJDQTBcXHUyQ0EyXFx1MkNBNFxcdTJDQTZcXHUyQ0E4XFx1MkNBQVxcdTJDQUNcXHUyQ0FFXFx1MkNCMFxcdTJDQjJcXHUyQ0I0XFx1MkNCNlxcdTJDQjhcXHUyQ0JBXFx1MkNCQ1xcdTJDQkVcXHUyQ0MwXFx1MkNDMlxcdTJDQzRcXHUyQ0M2XFx1MkNDOFxcdTJDQ0FcXHUyQ0NDXFx1MkNDRVxcdTJDRDBcXHUyQ0QyXFx1MkNENFxcdTJDRDZcXHUyQ0Q4XFx1MkNEQVxcdTJDRENcXHUyQ0RFXFx1MkNFMFxcdTJDRTJcXHUyQ0VCXFx1MkNFRFxcdTJDRjJcXHVBNjQwXFx1QTY0MlxcdUE2NDRcXHVBNjQ2XFx1QTY0OFxcdUE2NEFcXHVBNjRDXFx1QTY0RVxcdUE2NTBcXHVBNjUyXFx1QTY1NFxcdUE2NTZcXHVBNjU4XFx1QTY1QVxcdUE2NUNcXHVBNjVFXFx1QTY2MFxcdUE2NjJcXHVBNjY0XFx1QTY2NlxcdUE2NjhcXHVBNjZBXFx1QTY2Q1xcdUE2ODBcXHVBNjgyXFx1QTY4NFxcdUE2ODZcXHVBNjg4XFx1QTY4QVxcdUE2OENcXHVBNjhFXFx1QTY5MFxcdUE2OTJcXHVBNjk0XFx1QTY5NlxcdUE2OThcXHVBNjlBXFx1QTcyMlxcdUE3MjRcXHVBNzI2XFx1QTcyOFxcdUE3MkFcXHVBNzJDXFx1QTcyRVxcdUE3MzJcXHVBNzM0XFx1QTczNlxcdUE3MzhcXHVBNzNBXFx1QTczQ1xcdUE3M0VcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBNzQ2XFx1QTc0OFxcdUE3NEFcXHVBNzRDXFx1QTc0RVxcdUE3NTBcXHVBNzUyXFx1QTc1NFxcdUE3NTZcXHVBNzU4XFx1QTc1QVxcdUE3NUNcXHVBNzVFXFx1QTc2MFxcdUE3NjJcXHVBNzY0XFx1QTc2NlxcdUE3NjhcXHVBNzZBXFx1QTc2Q1xcdUE3NkVcXHVBNzc5XFx1QTc3QlxcdUE3N0RcXHVBNzdFXFx1QTc4MFxcdUE3ODJcXHVBNzg0XFx1QTc4NlxcdUE3OEJcXHVBNzhEXFx1QTc5MFxcdUE3OTJcXHVBNzk2XFx1QTc5OFxcdUE3OUFcXHVBNzlDXFx1QTc5RVxcdUE3QTBcXHVBN0EyXFx1QTdBNFxcdUE3QTZcXHVBN0E4XFx1QTdBQS1cXHVBN0FEXFx1QTdCMC1cXHVBN0I0XFx1QTdCNlxcdUZGMjEtXFx1RkYzQV0pKFtBLVpcXHhDMC1cXHhENlxceEQ4LVxceERFXFx1MDEwMFxcdTAxMDJcXHUwMTA0XFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAxMEVcXHUwMTEwXFx1MDExMlxcdTAxMTRcXHUwMTE2XFx1MDExOFxcdTAxMUFcXHUwMTFDXFx1MDExRVxcdTAxMjBcXHUwMTIyXFx1MDEyNFxcdTAxMjZcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTJFXFx1MDEzMFxcdTAxMzJcXHUwMTM0XFx1MDEzNlxcdTAxMzlcXHUwMTNCXFx1MDEzRFxcdTAxM0ZcXHUwMTQxXFx1MDE0M1xcdTAxNDVcXHUwMTQ3XFx1MDE0QVxcdTAxNENcXHUwMTRFXFx1MDE1MFxcdTAxNTJcXHUwMTU0XFx1MDE1NlxcdTAxNThcXHUwMTVBXFx1MDE1Q1xcdTAxNUVcXHUwMTYwXFx1MDE2MlxcdTAxNjRcXHUwMTY2XFx1MDE2OFxcdTAxNkFcXHUwMTZDXFx1MDE2RVxcdTAxNzBcXHUwMTcyXFx1MDE3NFxcdTAxNzZcXHUwMTc4XFx1MDE3OVxcdTAxN0JcXHUwMTdEXFx1MDE4MVxcdTAxODJcXHUwMTg0XFx1MDE4NlxcdTAxODdcXHUwMTg5LVxcdTAxOEJcXHUwMThFLVxcdTAxOTFcXHUwMTkzXFx1MDE5NFxcdTAxOTYtXFx1MDE5OFxcdTAxOUNcXHUwMTlEXFx1MDE5RlxcdTAxQTBcXHUwMUEyXFx1MDFBNFxcdTAxQTZcXHUwMUE3XFx1MDFBOVxcdTAxQUNcXHUwMUFFXFx1MDFBRlxcdTAxQjEtXFx1MDFCM1xcdTAxQjVcXHUwMUI3XFx1MDFCOFxcdTAxQkNcXHUwMUM0XFx1MDFDN1xcdTAxQ0FcXHUwMUNEXFx1MDFDRlxcdTAxRDFcXHUwMUQzXFx1MDFENVxcdTAxRDdcXHUwMUQ5XFx1MDFEQlxcdTAxREVcXHUwMUUwXFx1MDFFMlxcdTAxRTRcXHUwMUU2XFx1MDFFOFxcdTAxRUFcXHUwMUVDXFx1MDFFRVxcdTAxRjFcXHUwMUY0XFx1MDFGNi1cXHUwMUY4XFx1MDFGQVxcdTAxRkNcXHUwMUZFXFx1MDIwMFxcdTAyMDJcXHUwMjA0XFx1MDIwNlxcdTAyMDhcXHUwMjBBXFx1MDIwQ1xcdTAyMEVcXHUwMjEwXFx1MDIxMlxcdTAyMTRcXHUwMjE2XFx1MDIxOFxcdTAyMUFcXHUwMjFDXFx1MDIxRVxcdTAyMjBcXHUwMjIyXFx1MDIyNFxcdTAyMjZcXHUwMjI4XFx1MDIyQVxcdTAyMkNcXHUwMjJFXFx1MDIzMFxcdTAyMzJcXHUwMjNBXFx1MDIzQlxcdTAyM0RcXHUwMjNFXFx1MDI0MVxcdTAyNDMtXFx1MDI0NlxcdTAyNDhcXHUwMjRBXFx1MDI0Q1xcdTAyNEVcXHUwMzcwXFx1MDM3MlxcdTAzNzZcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFXFx1MDM4RlxcdTAzOTEtXFx1MDNBMVxcdTAzQTMtXFx1MDNBQlxcdTAzQ0ZcXHUwM0QyLVxcdTAzRDRcXHUwM0Q4XFx1MDNEQVxcdTAzRENcXHUwM0RFXFx1MDNFMFxcdTAzRTJcXHUwM0U0XFx1MDNFNlxcdTAzRThcXHUwM0VBXFx1MDNFQ1xcdTAzRUVcXHUwM0Y0XFx1MDNGN1xcdTAzRjlcXHUwM0ZBXFx1MDNGRC1cXHUwNDJGXFx1MDQ2MFxcdTA0NjJcXHUwNDY0XFx1MDQ2NlxcdTA0NjhcXHUwNDZBXFx1MDQ2Q1xcdTA0NkVcXHUwNDcwXFx1MDQ3MlxcdTA0NzRcXHUwNDc2XFx1MDQ3OFxcdTA0N0FcXHUwNDdDXFx1MDQ3RVxcdTA0ODBcXHUwNDhBXFx1MDQ4Q1xcdTA0OEVcXHUwNDkwXFx1MDQ5MlxcdTA0OTRcXHUwNDk2XFx1MDQ5OFxcdTA0OUFcXHUwNDlDXFx1MDQ5RVxcdTA0QTBcXHUwNEEyXFx1MDRBNFxcdTA0QTZcXHUwNEE4XFx1MDRBQVxcdTA0QUNcXHUwNEFFXFx1MDRCMFxcdTA0QjJcXHUwNEI0XFx1MDRCNlxcdTA0QjhcXHUwNEJBXFx1MDRCQ1xcdTA0QkVcXHUwNEMwXFx1MDRDMVxcdTA0QzNcXHUwNEM1XFx1MDRDN1xcdTA0QzlcXHUwNENCXFx1MDRDRFxcdTA0RDBcXHUwNEQyXFx1MDRENFxcdTA0RDZcXHUwNEQ4XFx1MDREQVxcdTA0RENcXHUwNERFXFx1MDRFMFxcdTA0RTJcXHUwNEU0XFx1MDRFNlxcdTA0RThcXHUwNEVBXFx1MDRFQ1xcdTA0RUVcXHUwNEYwXFx1MDRGMlxcdTA0RjRcXHUwNEY2XFx1MDRGOFxcdTA0RkFcXHUwNEZDXFx1MDRGRVxcdTA1MDBcXHUwNTAyXFx1MDUwNFxcdTA1MDZcXHUwNTA4XFx1MDUwQVxcdTA1MENcXHUwNTBFXFx1MDUxMFxcdTA1MTJcXHUwNTE0XFx1MDUxNlxcdTA1MThcXHUwNTFBXFx1MDUxQ1xcdTA1MUVcXHUwNTIwXFx1MDUyMlxcdTA1MjRcXHUwNTI2XFx1MDUyOFxcdTA1MkFcXHUwNTJDXFx1MDUyRVxcdTA1MzEtXFx1MDU1NlxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTNBMC1cXHUxM0Y1XFx1MUUwMFxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTFFMDhcXHUxRTBBXFx1MUUwQ1xcdTFFMEVcXHUxRTEwXFx1MUUxMlxcdTFFMTRcXHUxRTE2XFx1MUUxOFxcdTFFMUFcXHUxRTFDXFx1MUUxRVxcdTFFMjBcXHUxRTIyXFx1MUUyNFxcdTFFMjZcXHUxRTI4XFx1MUUyQVxcdTFFMkNcXHUxRTJFXFx1MUUzMFxcdTFFMzJcXHUxRTM0XFx1MUUzNlxcdTFFMzhcXHUxRTNBXFx1MUUzQ1xcdTFFM0VcXHUxRTQwXFx1MUU0MlxcdTFFNDRcXHUxRTQ2XFx1MUU0OFxcdTFFNEFcXHUxRTRDXFx1MUU0RVxcdTFFNTBcXHUxRTUyXFx1MUU1NFxcdTFFNTZcXHUxRTU4XFx1MUU1QVxcdTFFNUNcXHUxRTVFXFx1MUU2MFxcdTFFNjJcXHUxRTY0XFx1MUU2NlxcdTFFNjhcXHUxRTZBXFx1MUU2Q1xcdTFFNkVcXHUxRTcwXFx1MUU3MlxcdTFFNzRcXHUxRTc2XFx1MUU3OFxcdTFFN0FcXHUxRTdDXFx1MUU3RVxcdTFFODBcXHUxRTgyXFx1MUU4NFxcdTFFODZcXHUxRTg4XFx1MUU4QVxcdTFFOENcXHUxRThFXFx1MUU5MFxcdTFFOTJcXHUxRTk0XFx1MUU5RVxcdTFFQTBcXHUxRUEyXFx1MUVBNFxcdTFFQTZcXHUxRUE4XFx1MUVBQVxcdTFFQUNcXHUxRUFFXFx1MUVCMFxcdTFFQjJcXHUxRUI0XFx1MUVCNlxcdTFFQjhcXHUxRUJBXFx1MUVCQ1xcdTFFQkVcXHUxRUMwXFx1MUVDMlxcdTFFQzRcXHUxRUM2XFx1MUVDOFxcdTFFQ0FcXHUxRUNDXFx1MUVDRVxcdTFFRDBcXHUxRUQyXFx1MUVENFxcdTFFRDZcXHUxRUQ4XFx1MUVEQVxcdTFFRENcXHUxRURFXFx1MUVFMFxcdTFFRTJcXHUxRUU0XFx1MUVFNlxcdTFFRThcXHUxRUVBXFx1MUVFQ1xcdTFFRUVcXHUxRUYwXFx1MUVGMlxcdTFFRjRcXHUxRUY2XFx1MUVGOFxcdTFFRkFcXHUxRUZDXFx1MUVGRVxcdTFGMDgtXFx1MUYwRlxcdTFGMTgtXFx1MUYxRFxcdTFGMjgtXFx1MUYyRlxcdTFGMzgtXFx1MUYzRlxcdTFGNDgtXFx1MUY0RFxcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUZcXHUxRjY4LVxcdTFGNkZcXHUxRkI4LVxcdTFGQkJcXHUxRkM4LVxcdTFGQ0JcXHUxRkQ4LVxcdTFGREJcXHUxRkU4LVxcdTFGRUNcXHUxRkY4LVxcdTFGRkJcXHUyMTAyXFx1MjEwN1xcdTIxMEItXFx1MjEwRFxcdTIxMTAtXFx1MjExMlxcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTMwLVxcdTIxMzNcXHUyMTNFXFx1MjEzRlxcdTIxNDVcXHUyMTgzXFx1MkMwMC1cXHUyQzJFXFx1MkM2MFxcdTJDNjItXFx1MkM2NFxcdTJDNjdcXHUyQzY5XFx1MkM2QlxcdTJDNkQtXFx1MkM3MFxcdTJDNzJcXHUyQzc1XFx1MkM3RS1cXHUyQzgwXFx1MkM4MlxcdTJDODRcXHUyQzg2XFx1MkM4OFxcdTJDOEFcXHUyQzhDXFx1MkM4RVxcdTJDOTBcXHUyQzkyXFx1MkM5NFxcdTJDOTZcXHUyQzk4XFx1MkM5QVxcdTJDOUNcXHUyQzlFXFx1MkNBMFxcdTJDQTJcXHUyQ0E0XFx1MkNBNlxcdTJDQThcXHUyQ0FBXFx1MkNBQ1xcdTJDQUVcXHUyQ0IwXFx1MkNCMlxcdTJDQjRcXHUyQ0I2XFx1MkNCOFxcdTJDQkFcXHUyQ0JDXFx1MkNCRVxcdTJDQzBcXHUyQ0MyXFx1MkNDNFxcdTJDQzZcXHUyQ0M4XFx1MkNDQVxcdTJDQ0NcXHUyQ0NFXFx1MkNEMFxcdTJDRDJcXHUyQ0Q0XFx1MkNENlxcdTJDRDhcXHUyQ0RBXFx1MkNEQ1xcdTJDREVcXHUyQ0UwXFx1MkNFMlxcdTJDRUJcXHUyQ0VEXFx1MkNGMlxcdUE2NDBcXHVBNjQyXFx1QTY0NFxcdUE2NDZcXHVBNjQ4XFx1QTY0QVxcdUE2NENcXHVBNjRFXFx1QTY1MFxcdUE2NTJcXHVBNjU0XFx1QTY1NlxcdUE2NThcXHVBNjVBXFx1QTY1Q1xcdUE2NUVcXHVBNjYwXFx1QTY2MlxcdUE2NjRcXHVBNjY2XFx1QTY2OFxcdUE2NkFcXHVBNjZDXFx1QTY4MFxcdUE2ODJcXHVBNjg0XFx1QTY4NlxcdUE2ODhcXHVBNjhBXFx1QTY4Q1xcdUE2OEVcXHVBNjkwXFx1QTY5MlxcdUE2OTRcXHVBNjk2XFx1QTY5OFxcdUE2OUFcXHVBNzIyXFx1QTcyNFxcdUE3MjZcXHVBNzI4XFx1QTcyQVxcdUE3MkNcXHVBNzJFXFx1QTczMlxcdUE3MzRcXHVBNzM2XFx1QTczOFxcdUE3M0FcXHVBNzNDXFx1QTczRVxcdUE3NDBcXHVBNzQyXFx1QTc0NFxcdUE3NDZcXHVBNzQ4XFx1QTc0QVxcdUE3NENcXHVBNzRFXFx1QTc1MFxcdUE3NTJcXHVBNzU0XFx1QTc1NlxcdUE3NThcXHVBNzVBXFx1QTc1Q1xcdUE3NUVcXHVBNzYwXFx1QTc2MlxcdUE3NjRcXHVBNzY2XFx1QTc2OFxcdUE3NkFcXHVBNzZDXFx1QTc2RVxcdUE3NzlcXHVBNzdCXFx1QTc3RFxcdUE3N0VcXHVBNzgwXFx1QTc4MlxcdUE3ODRcXHVBNzg2XFx1QTc4QlxcdUE3OERcXHVBNzkwXFx1QTc5MlxcdUE3OTZcXHVBNzk4XFx1QTc5QVxcdUE3OUNcXHVBNzlFXFx1QTdBMFxcdUE3QTJcXHVBN0E0XFx1QTdBNlxcdUE3QThcXHVBN0FBLVxcdUE3QURcXHVBN0IwLVxcdUE3QjRcXHVBN0I2XFx1RkYyMS1cXHVGRjNBXVthLXpcXHhCNVxceERGLVxceEY2XFx4RjgtXFx4RkZcXHUwMTAxXFx1MDEwM1xcdTAxMDVcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDEwRlxcdTAxMTFcXHUwMTEzXFx1MDExNVxcdTAxMTdcXHUwMTE5XFx1MDExQlxcdTAxMURcXHUwMTFGXFx1MDEyMVxcdTAxMjNcXHUwMTI1XFx1MDEyN1xcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAxMkZcXHUwMTMxXFx1MDEzM1xcdTAxMzVcXHUwMTM3XFx1MDEzOFxcdTAxM0FcXHUwMTNDXFx1MDEzRVxcdTAxNDBcXHUwMTQyXFx1MDE0NFxcdTAxNDZcXHUwMTQ4XFx1MDE0OVxcdTAxNEJcXHUwMTREXFx1MDE0RlxcdTAxNTFcXHUwMTUzXFx1MDE1NVxcdTAxNTdcXHUwMTU5XFx1MDE1QlxcdTAxNURcXHUwMTVGXFx1MDE2MVxcdTAxNjNcXHUwMTY1XFx1MDE2N1xcdTAxNjlcXHUwMTZCXFx1MDE2RFxcdTAxNkZcXHUwMTcxXFx1MDE3M1xcdTAxNzVcXHUwMTc3XFx1MDE3QVxcdTAxN0NcXHUwMTdFLVxcdTAxODBcXHUwMTgzXFx1MDE4NVxcdTAxODhcXHUwMThDXFx1MDE4RFxcdTAxOTJcXHUwMTk1XFx1MDE5OS1cXHUwMTlCXFx1MDE5RVxcdTAxQTFcXHUwMUEzXFx1MDFBNVxcdTAxQThcXHUwMUFBXFx1MDFBQlxcdTAxQURcXHUwMUIwXFx1MDFCNFxcdTAxQjZcXHUwMUI5XFx1MDFCQVxcdTAxQkQtXFx1MDFCRlxcdTAxQzZcXHUwMUM5XFx1MDFDQ1xcdTAxQ0VcXHUwMUQwXFx1MDFEMlxcdTAxRDRcXHUwMUQ2XFx1MDFEOFxcdTAxREFcXHUwMURDXFx1MDFERFxcdTAxREZcXHUwMUUxXFx1MDFFM1xcdTAxRTVcXHUwMUU3XFx1MDFFOVxcdTAxRUJcXHUwMUVEXFx1MDFFRlxcdTAxRjBcXHUwMUYzXFx1MDFGNVxcdTAxRjlcXHUwMUZCXFx1MDFGRFxcdTAxRkZcXHUwMjAxXFx1MDIwM1xcdTAyMDVcXHUwMjA3XFx1MDIwOVxcdTAyMEJcXHUwMjBEXFx1MDIwRlxcdTAyMTFcXHUwMjEzXFx1MDIxNVxcdTAyMTdcXHUwMjE5XFx1MDIxQlxcdTAyMURcXHUwMjFGXFx1MDIyMVxcdTAyMjNcXHUwMjI1XFx1MDIyN1xcdTAyMjlcXHUwMjJCXFx1MDIyRFxcdTAyMkZcXHUwMjMxXFx1MDIzMy1cXHUwMjM5XFx1MDIzQ1xcdTAyM0ZcXHUwMjQwXFx1MDI0MlxcdTAyNDdcXHUwMjQ5XFx1MDI0QlxcdTAyNERcXHUwMjRGLVxcdTAyOTNcXHUwMjk1LVxcdTAyQUZcXHUwMzcxXFx1MDM3M1xcdTAzNzdcXHUwMzdCLVxcdTAzN0RcXHUwMzkwXFx1MDNBQy1cXHUwM0NFXFx1MDNEMFxcdTAzRDFcXHUwM0Q1LVxcdTAzRDdcXHUwM0Q5XFx1MDNEQlxcdTAzRERcXHUwM0RGXFx1MDNFMVxcdTAzRTNcXHUwM0U1XFx1MDNFN1xcdTAzRTlcXHUwM0VCXFx1MDNFRFxcdTAzRUYtXFx1MDNGM1xcdTAzRjVcXHUwM0Y4XFx1MDNGQlxcdTAzRkNcXHUwNDMwLVxcdTA0NUZcXHUwNDYxXFx1MDQ2M1xcdTA0NjVcXHUwNDY3XFx1MDQ2OVxcdTA0NkJcXHUwNDZEXFx1MDQ2RlxcdTA0NzFcXHUwNDczXFx1MDQ3NVxcdTA0NzdcXHUwNDc5XFx1MDQ3QlxcdTA0N0RcXHUwNDdGXFx1MDQ4MVxcdTA0OEJcXHUwNDhEXFx1MDQ4RlxcdTA0OTFcXHUwNDkzXFx1MDQ5NVxcdTA0OTdcXHUwNDk5XFx1MDQ5QlxcdTA0OURcXHUwNDlGXFx1MDRBMVxcdTA0QTNcXHUwNEE1XFx1MDRBN1xcdTA0QTlcXHUwNEFCXFx1MDRBRFxcdTA0QUZcXHUwNEIxXFx1MDRCM1xcdTA0QjVcXHUwNEI3XFx1MDRCOVxcdTA0QkJcXHUwNEJEXFx1MDRCRlxcdTA0QzJcXHUwNEM0XFx1MDRDNlxcdTA0QzhcXHUwNENBXFx1MDRDQ1xcdTA0Q0VcXHUwNENGXFx1MDREMVxcdTA0RDNcXHUwNEQ1XFx1MDREN1xcdTA0RDlcXHUwNERCXFx1MDRERFxcdTA0REZcXHUwNEUxXFx1MDRFM1xcdTA0RTVcXHUwNEU3XFx1MDRFOVxcdTA0RUJcXHUwNEVEXFx1MDRFRlxcdTA0RjFcXHUwNEYzXFx1MDRGNVxcdTA0RjdcXHUwNEY5XFx1MDRGQlxcdTA0RkRcXHUwNEZGXFx1MDUwMVxcdTA1MDNcXHUwNTA1XFx1MDUwN1xcdTA1MDlcXHUwNTBCXFx1MDUwRFxcdTA1MEZcXHUwNTExXFx1MDUxM1xcdTA1MTVcXHUwNTE3XFx1MDUxOVxcdTA1MUJcXHUwNTFEXFx1MDUxRlxcdTA1MjFcXHUwNTIzXFx1MDUyNVxcdTA1MjdcXHUwNTI5XFx1MDUyQlxcdTA1MkRcXHUwNTJGXFx1MDU2MS1cXHUwNTg3XFx1MTNGOC1cXHUxM0ZEXFx1MUQwMC1cXHUxRDJCXFx1MUQ2Qi1cXHUxRDc3XFx1MUQ3OS1cXHUxRDlBXFx1MUUwMVxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTFFMDlcXHUxRTBCXFx1MUUwRFxcdTFFMEZcXHUxRTExXFx1MUUxM1xcdTFFMTVcXHUxRTE3XFx1MUUxOVxcdTFFMUJcXHUxRTFEXFx1MUUxRlxcdTFFMjFcXHUxRTIzXFx1MUUyNVxcdTFFMjdcXHUxRTI5XFx1MUUyQlxcdTFFMkRcXHUxRTJGXFx1MUUzMVxcdTFFMzNcXHUxRTM1XFx1MUUzN1xcdTFFMzlcXHUxRTNCXFx1MUUzRFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTFFNDVcXHUxRTQ3XFx1MUU0OVxcdTFFNEJcXHUxRTREXFx1MUU0RlxcdTFFNTFcXHUxRTUzXFx1MUU1NVxcdTFFNTdcXHUxRTU5XFx1MUU1QlxcdTFFNURcXHUxRTVGXFx1MUU2MVxcdTFFNjNcXHUxRTY1XFx1MUU2N1xcdTFFNjlcXHUxRTZCXFx1MUU2RFxcdTFFNkZcXHUxRTcxXFx1MUU3M1xcdTFFNzVcXHUxRTc3XFx1MUU3OVxcdTFFN0JcXHUxRTdEXFx1MUU3RlxcdTFFODFcXHUxRTgzXFx1MUU4NVxcdTFFODdcXHUxRTg5XFx1MUU4QlxcdTFFOERcXHUxRThGXFx1MUU5MVxcdTFFOTNcXHUxRTk1LVxcdTFFOURcXHUxRTlGXFx1MUVBMVxcdTFFQTNcXHUxRUE1XFx1MUVBN1xcdTFFQTlcXHUxRUFCXFx1MUVBRFxcdTFFQUZcXHUxRUIxXFx1MUVCM1xcdTFFQjVcXHUxRUI3XFx1MUVCOVxcdTFFQkJcXHUxRUJEXFx1MUVCRlxcdTFFQzFcXHUxRUMzXFx1MUVDNVxcdTFFQzdcXHUxRUM5XFx1MUVDQlxcdTFFQ0RcXHUxRUNGXFx1MUVEMVxcdTFFRDNcXHUxRUQ1XFx1MUVEN1xcdTFFRDlcXHUxRURCXFx1MUVERFxcdTFFREZcXHUxRUUxXFx1MUVFM1xcdTFFRTVcXHUxRUU3XFx1MUVFOVxcdTFFRUJcXHUxRUVEXFx1MUVFRlxcdTFFRjFcXHUxRUYzXFx1MUVGNVxcdTFFRjdcXHUxRUY5XFx1MUVGQlxcdTFFRkRcXHUxRUZGLVxcdTFGMDdcXHUxRjEwLVxcdTFGMTVcXHUxRjIwLVxcdTFGMjdcXHUxRjMwLVxcdTFGMzdcXHUxRjQwLVxcdTFGNDVcXHUxRjUwLVxcdTFGNTdcXHUxRjYwLVxcdTFGNjdcXHUxRjcwLVxcdTFGN0RcXHUxRjgwLVxcdTFGODdcXHUxRjkwLVxcdTFGOTdcXHUxRkEwLVxcdTFGQTdcXHUxRkIwLVxcdTFGQjRcXHUxRkI2XFx1MUZCN1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2XFx1MUZDN1xcdTFGRDAtXFx1MUZEM1xcdTFGRDZcXHUxRkQ3XFx1MUZFMC1cXHUxRkU3XFx1MUZGMi1cXHUxRkY0XFx1MUZGNlxcdTFGRjdcXHUyMTBBXFx1MjEwRVxcdTIxMEZcXHUyMTEzXFx1MjEyRlxcdTIxMzRcXHUyMTM5XFx1MjEzQ1xcdTIxM0RcXHUyMTQ2LVxcdTIxNDlcXHUyMTRFXFx1MjE4NFxcdTJDMzAtXFx1MkM1RVxcdTJDNjFcXHUyQzY1XFx1MkM2NlxcdTJDNjhcXHUyQzZBXFx1MkM2Q1xcdTJDNzFcXHUyQzczXFx1MkM3NFxcdTJDNzYtXFx1MkM3QlxcdTJDODFcXHUyQzgzXFx1MkM4NVxcdTJDODdcXHUyQzg5XFx1MkM4QlxcdTJDOERcXHUyQzhGXFx1MkM5MVxcdTJDOTNcXHUyQzk1XFx1MkM5N1xcdTJDOTlcXHUyQzlCXFx1MkM5RFxcdTJDOUZcXHUyQ0ExXFx1MkNBM1xcdTJDQTVcXHUyQ0E3XFx1MkNBOVxcdTJDQUJcXHUyQ0FEXFx1MkNBRlxcdTJDQjFcXHUyQ0IzXFx1MkNCNVxcdTJDQjdcXHUyQ0I5XFx1MkNCQlxcdTJDQkRcXHUyQ0JGXFx1MkNDMVxcdTJDQzNcXHUyQ0M1XFx1MkNDN1xcdTJDQzlcXHUyQ0NCXFx1MkNDRFxcdTJDQ0ZcXHUyQ0QxXFx1MkNEM1xcdTJDRDVcXHUyQ0Q3XFx1MkNEOVxcdTJDREJcXHUyQ0REXFx1MkNERlxcdTJDRTFcXHUyQ0UzXFx1MkNFNFxcdTJDRUNcXHUyQ0VFXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1QTY0MVxcdUE2NDNcXHVBNjQ1XFx1QTY0N1xcdUE2NDlcXHVBNjRCXFx1QTY0RFxcdUE2NEZcXHVBNjUxXFx1QTY1M1xcdUE2NTVcXHVBNjU3XFx1QTY1OVxcdUE2NUJcXHVBNjVEXFx1QTY1RlxcdUE2NjFcXHVBNjYzXFx1QTY2NVxcdUE2NjdcXHVBNjY5XFx1QTY2QlxcdUE2NkRcXHVBNjgxXFx1QTY4M1xcdUE2ODVcXHVBNjg3XFx1QTY4OVxcdUE2OEJcXHVBNjhEXFx1QTY4RlxcdUE2OTFcXHVBNjkzXFx1QTY5NVxcdUE2OTdcXHVBNjk5XFx1QTY5QlxcdUE3MjNcXHVBNzI1XFx1QTcyN1xcdUE3MjlcXHVBNzJCXFx1QTcyRFxcdUE3MkYtXFx1QTczMVxcdUE3MzNcXHVBNzM1XFx1QTczN1xcdUE3MzlcXHVBNzNCXFx1QTczRFxcdUE3M0ZcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBNzQ3XFx1QTc0OVxcdUE3NEJcXHVBNzREXFx1QTc0RlxcdUE3NTFcXHVBNzUzXFx1QTc1NVxcdUE3NTdcXHVBNzU5XFx1QTc1QlxcdUE3NURcXHVBNzVGXFx1QTc2MVxcdUE3NjNcXHVBNzY1XFx1QTc2N1xcdUE3NjlcXHVBNzZCXFx1QTc2RFxcdUE3NkZcXHVBNzcxLVxcdUE3NzhcXHVBNzdBXFx1QTc3Q1xcdUE3N0ZcXHVBNzgxXFx1QTc4M1xcdUE3ODVcXHVBNzg3XFx1QTc4Q1xcdUE3OEVcXHVBNzkxXFx1QTc5My1cXHVBNzk1XFx1QTc5N1xcdUE3OTlcXHVBNzlCXFx1QTc5RFxcdUE3OUZcXHVBN0ExXFx1QTdBM1xcdUE3QTVcXHVBN0E3XFx1QTdBOVxcdUE3QjVcXHVBN0I3XFx1QTdGQVxcdUFCMzAtXFx1QUI1QVxcdUFCNjAtXFx1QUI2NVxcdUFCNzAtXFx1QUJCRlxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZGNDEtXFx1RkY1QV0pL2dcbiJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object-keys/isArguments.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object-keys/isArguments.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar toStr = Object.prototype.toString;\n\nmodule.exports = function isArguments(value) {\n\tvar str = toStr.call(value);\n\tvar isArgs = str === '[object Arguments]';\n\tif (!isArgs) {\n\t\tisArgs = str !== '[object Array]' && value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';\n\t}\n\treturn isArgs;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzQXJndW1lbnRzLmpzIl0sIm5hbWVzIjpbInRvU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNBcmd1bWVudHMiLCJ2YWx1ZSIsInN0ciIsImNhbGwiLCJpc0FyZ3MiLCJsZW5ndGgiLCJjYWxsZWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBSUEsUUFBUUMsT0FBT0MsU0FBUCxDQUFpQkMsUUFBN0I7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFDNUMsS0FBSUMsTUFBTVIsTUFBTVMsSUFBTixDQUFXRixLQUFYLENBQVY7QUFDQSxLQUFJRyxTQUFTRixRQUFRLG9CQUFyQjtBQUNBLEtBQUksQ0FBQ0UsTUFBTCxFQUFhO0FBQ1pBLFdBQVNGLFFBQVEsZ0JBQVIsSUFDUkQsVUFBVSxJQURGLElBRVIsUUFBT0EsS0FBUCx5Q0FBT0EsS0FBUCxPQUFpQixRQUZULElBR1IsT0FBT0EsTUFBTUksTUFBYixLQUF3QixRQUhoQixJQUlSSixNQUFNSSxNQUFOLElBQWdCLENBSlIsSUFLUlgsTUFBTVMsSUFBTixDQUFXRixNQUFNSyxNQUFqQixNQUE2QixtQkFMOUI7QUFNQTtBQUNELFFBQU9GLE1BQVA7QUFDQSxDQVpEIiwiZmlsZSI6ImlzQXJndW1lbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object-keys/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object-keys/index.js","source":"'use strict';\n\n// modified from https://github.com/es-shims/es5-shim\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar has = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar slice = Array.prototype.slice;\nvar isArgs = require('./isArguments');\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\nvar hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');\nvar hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');\nvar dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];\nvar equalsConstructorPrototype = function equalsConstructorPrototype(o) {\n\tvar ctor = o.constructor;\n\treturn ctor && ctor.prototype === o;\n};\nvar excludedKeys = {\n\t$console: true,\n\t$external: true,\n\t$frame: true,\n\t$frameElement: true,\n\t$frames: true,\n\t$innerHeight: true,\n\t$innerWidth: true,\n\t$outerHeight: true,\n\t$outerWidth: true,\n\t$pageXOffset: true,\n\t$pageYOffset: true,\n\t$parent: true,\n\t$scrollLeft: true,\n\t$scrollTop: true,\n\t$scrollX: true,\n\t$scrollY: true,\n\t$self: true,\n\t$webkitIndexedDB: true,\n\t$webkitStorageInfo: true,\n\t$window: true\n};\nvar hasAutomationEqualityBug = function () {\n\t/* global window */\n\tif (typeof window === 'undefined') {\n\t\treturn false;\n\t}\n\tfor (var k in window) {\n\t\ttry {\n\t\t\tif (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && _typeof(window[k]) === 'object') {\n\t\t\t\ttry {\n\t\t\t\t\tequalsConstructorPrototype(window[k]);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}();\nvar equalsConstructorPrototypeIfNotBuggy = function equalsConstructorPrototypeIfNotBuggy(o) {\n\t/* global window */\n\tif (typeof window === 'undefined' || !hasAutomationEqualityBug) {\n\t\treturn equalsConstructorPrototype(o);\n\t}\n\ttry {\n\t\treturn equalsConstructorPrototype(o);\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nvar keysShim = function keys(object) {\n\tvar isObject = object !== null && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object';\n\tvar isFunction = toStr.call(object) === '[object Function]';\n\tvar isArguments = isArgs(object);\n\tvar isString = isObject && toStr.call(object) === '[object String]';\n\tvar theKeys = [];\n\n\tif (!isObject && !isFunction && !isArguments) {\n\t\tthrow new TypeError('Object.keys called on a non-object');\n\t}\n\n\tvar skipProto = hasProtoEnumBug && isFunction;\n\tif (isString && object.length > 0 && !has.call(object, 0)) {\n\t\tfor (var i = 0; i < object.length; ++i) {\n\t\t\ttheKeys.push(String(i));\n\t\t}\n\t}\n\n\tif (isArguments && object.length > 0) {\n\t\tfor (var j = 0; j < object.length; ++j) {\n\t\t\ttheKeys.push(String(j));\n\t\t}\n\t} else {\n\t\tfor (var name in object) {\n\t\t\tif (!(skipProto && name === 'prototype') && has.call(object, name)) {\n\t\t\t\ttheKeys.push(String(name));\n\t\t\t}\n\t\t}\n\t}\n\n\tif (hasDontEnumBug) {\n\t\tvar skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);\n\n\t\tfor (var k = 0; k < dontEnums.length; ++k) {\n\t\t\tif (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {\n\t\t\t\ttheKeys.push(dontEnums[k]);\n\t\t\t}\n\t\t}\n\t}\n\treturn theKeys;\n};\n\nkeysShim.shim = function shimObjectKeys() {\n\tif (Object.keys) {\n\t\tvar keysWorksWithArguments = function () {\n\t\t\t// Safari 5.0 bug\n\t\t\treturn (Object.keys(arguments) || '').length === 2;\n\t\t}(1, 2);\n\t\tif (!keysWorksWithArguments) {\n\t\t\tvar originalKeys = Object.keys;\n\t\t\tObject.keys = function keys(object) {\n\t\t\t\tif (isArgs(object)) {\n\t\t\t\t\treturn originalKeys(slice.call(object));\n\t\t\t\t} else {\n\t\t\t\t\treturn originalKeys(object);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else {\n\t\tObject.keys = keysShim;\n\t}\n\treturn Object.keys || keysShim;\n};\n\nmodule.exports = keysShim;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"./isArguments":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object-keys/isArguments.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/define-properties/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/define-properties/index.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar keys = require('object-keys');\nvar foreach = require('foreach');\nvar hasSymbols = typeof Symbol === 'function' && _typeof(Symbol()) === 'symbol';\n\nvar toStr = Object.prototype.toString;\n\nvar isFunction = function isFunction(fn) {\n\treturn typeof fn === 'function' && toStr.call(fn) === '[object Function]';\n};\n\nvar arePropertyDescriptorsSupported = function arePropertyDescriptorsSupported() {\n\tvar obj = {};\n\ttry {\n\t\tObject.defineProperty(obj, 'x', { enumerable: false, value: obj });\n\t\t/* eslint-disable no-unused-vars, no-restricted-syntax */\n\t\tfor (var _ in obj) {\n\t\t\treturn false;\n\t\t}\n\t\t/* eslint-enable no-unused-vars, no-restricted-syntax */\n\t\treturn obj.x === obj;\n\t} catch (e) {\n\t\t/* this is IE 8. */\n\t\treturn false;\n\t}\n};\nvar supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();\n\nvar defineProperty = function defineProperty(object, name, value, predicate) {\n\tif (name in object && (!isFunction(predicate) || !predicate())) {\n\t\treturn;\n\t}\n\tif (supportsDescriptors) {\n\t\tObject.defineProperty(object, name, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: value,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\tobject[name] = value;\n\t}\n};\n\nvar defineProperties = function defineProperties(object, map) {\n\tvar predicates = arguments.length > 2 ? arguments[2] : {};\n\tvar props = keys(map);\n\tif (hasSymbols) {\n\t\tprops = props.concat(Object.getOwnPropertySymbols(map));\n\t}\n\tforeach(props, function (name) {\n\t\tdefineProperty(object, name, map[name], predicates[name]);\n\t});\n};\n\ndefineProperties.supportsDescriptors = !!supportsDescriptors;\n\nmodule.exports = defineProperties;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImtleXMiLCJyZXF1aXJlIiwiZm9yZWFjaCIsImhhc1N5bWJvbHMiLCJTeW1ib2wiLCJ0b1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiaXNGdW5jdGlvbiIsImZuIiwiY2FsbCIsImFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQiLCJvYmoiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJ2YWx1ZSIsIl8iLCJ4IiwiZSIsInN1cHBvcnRzRGVzY3JpcHRvcnMiLCJvYmplY3QiLCJuYW1lIiwicHJlZGljYXRlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwibWFwIiwicHJlZGljYXRlcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInByb3BzIiwiY29uY2F0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFJQSxPQUFPQyxRQUFRLGFBQVIsQ0FBWDtBQUNBLElBQUlDLFVBQVVELFFBQVEsU0FBUixDQUFkO0FBQ0EsSUFBSUUsYUFBYSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLFFBQU9BLFFBQVAsTUFBb0IsUUFBckU7O0FBRUEsSUFBSUMsUUFBUUMsT0FBT0MsU0FBUCxDQUFpQkMsUUFBN0I7O0FBRUEsSUFBSUMsYUFBYSxTQUFiQSxVQUFhLENBQVVDLEVBQVYsRUFBYztBQUM5QixRQUFPLE9BQU9BLEVBQVAsS0FBYyxVQUFkLElBQTRCTCxNQUFNTSxJQUFOLENBQVdELEVBQVgsTUFBbUIsbUJBQXREO0FBQ0EsQ0FGRDs7QUFJQSxJQUFJRSxrQ0FBa0MsU0FBbENBLCtCQUFrQyxHQUFZO0FBQ2pELEtBQUlDLE1BQU0sRUFBVjtBQUNBLEtBQUk7QUFDSFAsU0FBT1EsY0FBUCxDQUFzQkQsR0FBdEIsRUFBMkIsR0FBM0IsRUFBZ0MsRUFBRUUsWUFBWSxLQUFkLEVBQXFCQyxPQUFPSCxHQUE1QixFQUFoQztBQUNNO0FBQ0EsT0FBSyxJQUFJSSxDQUFULElBQWNKLEdBQWQsRUFBbUI7QUFBRSxVQUFPLEtBQVA7QUFBZTtBQUNwQztBQUNOLFNBQU9BLElBQUlLLENBQUosS0FBVUwsR0FBakI7QUFDQSxFQU5ELENBTUUsT0FBT00sQ0FBUCxFQUFVO0FBQUU7QUFDYixTQUFPLEtBQVA7QUFDQTtBQUNELENBWEQ7QUFZQSxJQUFJQyxzQkFBc0JkLE9BQU9RLGNBQVAsSUFBeUJGLGlDQUFuRDs7QUFFQSxJQUFJRSxpQkFBaUIsU0FBakJBLGNBQWlCLENBQVVPLE1BQVYsRUFBa0JDLElBQWxCLEVBQXdCTixLQUF4QixFQUErQk8sU0FBL0IsRUFBMEM7QUFDOUQsS0FBSUQsUUFBUUQsTUFBUixLQUFtQixDQUFDWixXQUFXYyxTQUFYLENBQUQsSUFBMEIsQ0FBQ0EsV0FBOUMsQ0FBSixFQUFnRTtBQUMvRDtBQUNBO0FBQ0QsS0FBSUgsbUJBQUosRUFBeUI7QUFDeEJkLFNBQU9RLGNBQVAsQ0FBc0JPLE1BQXRCLEVBQThCQyxJQUE5QixFQUFvQztBQUNuQ0UsaUJBQWMsSUFEcUI7QUFFbkNULGVBQVksS0FGdUI7QUFHbkNDLFVBQU9BLEtBSDRCO0FBSW5DUyxhQUFVO0FBSnlCLEdBQXBDO0FBTUEsRUFQRCxNQU9PO0FBQ05KLFNBQU9DLElBQVAsSUFBZU4sS0FBZjtBQUNBO0FBQ0QsQ0FkRDs7QUFnQkEsSUFBSVUsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBVUwsTUFBVixFQUFrQk0sR0FBbEIsRUFBdUI7QUFDN0MsS0FBSUMsYUFBYUMsVUFBVUMsTUFBVixHQUFtQixDQUFuQixHQUF1QkQsVUFBVSxDQUFWLENBQXZCLEdBQXNDLEVBQXZEO0FBQ0EsS0FBSUUsUUFBUS9CLEtBQUsyQixHQUFMLENBQVo7QUFDQSxLQUFJeEIsVUFBSixFQUFnQjtBQUNmNEIsVUFBUUEsTUFBTUMsTUFBTixDQUFhMUIsT0FBTzJCLHFCQUFQLENBQTZCTixHQUE3QixDQUFiLENBQVI7QUFDQTtBQUNEekIsU0FBUTZCLEtBQVIsRUFBZSxVQUFVVCxJQUFWLEVBQWdCO0FBQzlCUixpQkFBZU8sTUFBZixFQUF1QkMsSUFBdkIsRUFBNkJLLElBQUlMLElBQUosQ0FBN0IsRUFBd0NNLFdBQVdOLElBQVgsQ0FBeEM7QUFDQSxFQUZEO0FBR0EsQ0FURDs7QUFXQUksaUJBQWlCTixtQkFBakIsR0FBdUMsQ0FBQyxDQUFDQSxtQkFBekM7O0FBRUFjLE9BQU9DLE9BQVAsR0FBaUJULGdCQUFqQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGZvcmVhY2ggPSByZXF1aXJlKCdmb3JlYWNoJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgpID09PSAnc3ltYm9sJztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgb2JqID0ge307XG5cdHRyeSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ3gnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb2JqIH0pO1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycywgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbiAgICAgICAgZm9yICh2YXIgXyBpbiBvYmopIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5cdFx0cmV0dXJuIG9iai54ID09PSBvYmo7XG5cdH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBJRSA4LiAqL1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QgJiYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBwcm9wcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3JlYWNoKHByb3BzLCBmdW5jdGlvbiAobmFtZSkge1xuXHRcdGRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwgbWFwW25hbWVdLCBwcmVkaWNhdGVzW25hbWVdKTtcblx0fSk7XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiJdfQ==","deps":{"foreach":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/foreach/index.js","object-keys":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object-keys/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/assign.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/assign.js","source":"\"use strict\";\n\nvar has = Object.prototype.hasOwnProperty;\nmodule.exports = function assign(target, source) {\n\tif (Object.assign) {\n\t\treturn Object.assign(target, source);\n\t}\n\tfor (var key in source) {\n\t\tif (has.call(source, key)) {\n\t\t\ttarget[key] = source[key];\n\t\t}\n\t}\n\treturn target;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2lnbi5qcyJdLCJuYW1lcyI6WyJoYXMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJzb3VyY2UiLCJrZXkiLCJjYWxsIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLE1BQU1DLE9BQU9DLFNBQVAsQ0FBaUJDLGNBQTNCO0FBQ0FDLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsTUFBVCxDQUFnQkMsTUFBaEIsRUFBd0JDLE1BQXhCLEVBQWdDO0FBQ2hELEtBQUlQLE9BQU9LLE1BQVgsRUFBbUI7QUFDbEIsU0FBT0wsT0FBT0ssTUFBUCxDQUFjQyxNQUFkLEVBQXNCQyxNQUF0QixDQUFQO0FBQ0E7QUFDRCxNQUFLLElBQUlDLEdBQVQsSUFBZ0JELE1BQWhCLEVBQXdCO0FBQ3ZCLE1BQUlSLElBQUlVLElBQUosQ0FBU0YsTUFBVCxFQUFpQkMsR0FBakIsQ0FBSixFQUEyQjtBQUMxQkYsVUFBT0UsR0FBUCxJQUFjRCxPQUFPQyxHQUFQLENBQWQ7QUFDQTtBQUNEO0FBQ0QsUUFBT0YsTUFBUDtBQUNBLENBVkQiLCJmaWxlIjoiYXNzaWduLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuXHRpZiAoT2JqZWN0LmFzc2lnbikge1xuXHRcdHJldHVybiBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKTtcblx0fVxuXHRmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG5cdFx0aWYgKGhhcy5jYWxsKHNvdXJjZSwga2V5KSkge1xuXHRcdFx0dGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn07XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/has/src/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/has/src/index.js","source":"'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImJpbmQiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNhbGwiLCJGdW5jdGlvbiIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Il0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLE9BQU9DLFFBQVEsZUFBUixDQUFYOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCSCxLQUFLSSxJQUFMLENBQVVDLFNBQVNELElBQW5CLEVBQXlCRSxPQUFPQyxTQUFQLENBQWlCQyxjQUExQyxDQUFqQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiJdfQ==","deps":{"function-bind":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js","source":"'use strict';\n\nvar lowerCase = require('lower-case');\n\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp');\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp');\nvar CAMEL_CASE_UPPER_REGEXP = require('./vendor/camel-case-upper-regexp');\n\n/**\n * Sentence case a string.\n *\n * @param  {string} str\n * @param  {string} locale\n * @param  {string} replacement\n * @return {string}\n */\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return '';\n  }\n\n  replacement = typeof replacement !== 'string' ? ' ' : replacement;\n\n  function replace(match, index, value) {\n    if (index === 0 || index === value.length - match.length) {\n      return '';\n    }\n\n    return replacement;\n  }\n\n  str = String(str)\n  // Support camel case (\"camelCase\" -> \"camel Case\").\n  .replace(CAMEL_CASE_REGEXP, '$1 $2')\n  // Support odd camel case (\"CAMELCase\" -> \"CAMEL Case\").\n  .replace(CAMEL_CASE_UPPER_REGEXP, '$1 $2')\n  // Remove all non-word characters and replace with a single space.\n  .replace(NON_WORD_REGEXP, replace);\n\n  // Lower case the entire string.\n  return lowerCase(str, locale);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vLWNhc2UuanMiXSwibmFtZXMiOlsibG93ZXJDYXNlIiwicmVxdWlyZSIsIk5PTl9XT1JEX1JFR0VYUCIsIkNBTUVMX0NBU0VfUkVHRVhQIiwiQ0FNRUxfQ0FTRV9VUFBFUl9SRUdFWFAiLCJtb2R1bGUiLCJleHBvcnRzIiwic3RyIiwibG9jYWxlIiwicmVwbGFjZW1lbnQiLCJyZXBsYWNlIiwibWF0Y2giLCJpbmRleCIsInZhbHVlIiwibGVuZ3RoIiwiU3RyaW5nIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFlBQVlDLFFBQVEsWUFBUixDQUFoQjs7QUFFQSxJQUFJQyxrQkFBa0JELFFBQVEsMEJBQVIsQ0FBdEI7QUFDQSxJQUFJRSxvQkFBb0JGLFFBQVEsNEJBQVIsQ0FBeEI7QUFDQSxJQUFJRywwQkFBMEJILFFBQVEsa0NBQVIsQ0FBOUI7O0FBRUE7Ozs7Ozs7O0FBUUFJLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxNQUFmLEVBQXVCQyxXQUF2QixFQUFvQztBQUNuRCxNQUFJRixPQUFPLElBQVgsRUFBaUI7QUFDZixXQUFPLEVBQVA7QUFDRDs7QUFFREUsZ0JBQWMsT0FBT0EsV0FBUCxLQUF1QixRQUF2QixHQUFrQyxHQUFsQyxHQUF3Q0EsV0FBdEQ7O0FBRUEsV0FBU0MsT0FBVCxDQUFrQkMsS0FBbEIsRUFBeUJDLEtBQXpCLEVBQWdDQyxLQUFoQyxFQUF1QztBQUNyQyxRQUFJRCxVQUFVLENBQVYsSUFBZUEsVUFBV0MsTUFBTUMsTUFBTixHQUFlSCxNQUFNRyxNQUFuRCxFQUE0RDtBQUMxRCxhQUFPLEVBQVA7QUFDRDs7QUFFRCxXQUFPTCxXQUFQO0FBQ0Q7O0FBRURGLFFBQU1RLE9BQU9SLEdBQVA7QUFDSjtBQURJLEdBRUhHLE9BRkcsQ0FFS1AsaUJBRkwsRUFFd0IsT0FGeEI7QUFHSjtBQUhJLEdBSUhPLE9BSkcsQ0FJS04sdUJBSkwsRUFJOEIsT0FKOUI7QUFLSjtBQUxJLEdBTUhNLE9BTkcsQ0FNS1IsZUFOTCxFQU1zQlEsT0FOdEIsQ0FBTjs7QUFRQTtBQUNBLFNBQU9WLFVBQVVPLEdBQVYsRUFBZUMsTUFBZixDQUFQO0FBQ0QsQ0F6QkQiLCJmaWxlIjoibm8tY2FzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBsb3dlckNhc2UgPSByZXF1aXJlKCdsb3dlci1jYXNlJylcblxudmFyIE5PTl9XT1JEX1JFR0VYUCA9IHJlcXVpcmUoJy4vdmVuZG9yL25vbi13b3JkLXJlZ2V4cCcpXG52YXIgQ0FNRUxfQ0FTRV9SRUdFWFAgPSByZXF1aXJlKCcuL3ZlbmRvci9jYW1lbC1jYXNlLXJlZ2V4cCcpXG52YXIgQ0FNRUxfQ0FTRV9VUFBFUl9SRUdFWFAgPSByZXF1aXJlKCcuL3ZlbmRvci9jYW1lbC1jYXNlLXVwcGVyLXJlZ2V4cCcpXG5cbi8qKlxuICogU2VudGVuY2UgY2FzZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHBhcmFtICB7c3RyaW5nfSBsb2NhbGVcbiAqIEBwYXJhbSAge3N0cmluZ30gcmVwbGFjZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBsb2NhbGUsIHJlcGxhY2VtZW50KSB7XG4gIGlmIChzdHIgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgcmVwbGFjZW1lbnQgPSB0eXBlb2YgcmVwbGFjZW1lbnQgIT09ICdzdHJpbmcnID8gJyAnIDogcmVwbGFjZW1lbnRcblxuICBmdW5jdGlvbiByZXBsYWNlIChtYXRjaCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgaWYgKGluZGV4ID09PSAwIHx8IGluZGV4ID09PSAodmFsdWUubGVuZ3RoIC0gbWF0Y2gubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcGxhY2VtZW50XG4gIH1cblxuICBzdHIgPSBTdHJpbmcoc3RyKVxuICAgIC8vIFN1cHBvcnQgY2FtZWwgY2FzZSAoXCJjYW1lbENhc2VcIiAtPiBcImNhbWVsIENhc2VcIikuXG4gICAgLnJlcGxhY2UoQ0FNRUxfQ0FTRV9SRUdFWFAsICckMSAkMicpXG4gICAgLy8gU3VwcG9ydCBvZGQgY2FtZWwgY2FzZSAoXCJDQU1FTENhc2VcIiAtPiBcIkNBTUVMIENhc2VcIikuXG4gICAgLnJlcGxhY2UoQ0FNRUxfQ0FTRV9VUFBFUl9SRUdFWFAsICckMSAkMicpXG4gICAgLy8gUmVtb3ZlIGFsbCBub24td29yZCBjaGFyYWN0ZXJzIGFuZCByZXBsYWNlIHdpdGggYSBzaW5nbGUgc3BhY2UuXG4gICAgLnJlcGxhY2UoTk9OX1dPUkRfUkVHRVhQLCByZXBsYWNlKVxuXG4gIC8vIExvd2VyIGNhc2UgdGhlIGVudGlyZSBzdHJpbmcuXG4gIHJldHVybiBsb3dlckNhc2Uoc3RyLCBsb2NhbGUpXG59XG4iXX0=","deps":{"lower-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case/lower-case.js","./vendor/camel-case-regexp":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/camel-case-regexp.js","./vendor/camel-case-upper-regexp":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/camel-case-upper-regexp.js","./vendor/non-word-regexp":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/non-word-regexp.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/swap-case/swap-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/swap-case/swap-case.js","source":"'use strict';\n\nvar upperCase = require('upper-case');\nvar lowerCase = require('lower-case');\n\n/**\n * Swap the case of a string. Manually iterate over every character and check\n * instead of replacing certain characters for better unicode support.\n *\n * @param  {String} str\n * @param  {String} [locale]\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  if (str == null) {\n    return '';\n  }\n\n  var result = '';\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i];\n    var u = upperCase(c, locale);\n\n    result += u === c ? lowerCase(c, locale) : u;\n  }\n\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN3YXAtY2FzZS5qcyJdLCJuYW1lcyI6WyJ1cHBlckNhc2UiLCJyZXF1aXJlIiwibG93ZXJDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0ciIsImxvY2FsZSIsInJlc3VsdCIsImkiLCJsZW5ndGgiLCJjIiwidSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxZQUFZQyxRQUFRLFlBQVIsQ0FBaEI7QUFDQSxJQUFJQyxZQUFZRCxRQUFRLFlBQVIsQ0FBaEI7O0FBRUE7Ozs7Ozs7O0FBUUFFLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlQyxNQUFmLEVBQXVCO0FBQ3RDLE1BQUlELE9BQU8sSUFBWCxFQUFpQjtBQUNmLFdBQU8sRUFBUDtBQUNEOztBQUVELE1BQUlFLFNBQVMsRUFBYjs7QUFFQSxPQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUgsSUFBSUksTUFBeEIsRUFBZ0NELEdBQWhDLEVBQXFDO0FBQ25DLFFBQUlFLElBQUlMLElBQUlHLENBQUosQ0FBUjtBQUNBLFFBQUlHLElBQUlYLFVBQVVVLENBQVYsRUFBYUosTUFBYixDQUFSOztBQUVBQyxjQUFVSSxNQUFNRCxDQUFOLEdBQVVSLFVBQVVRLENBQVYsRUFBYUosTUFBYixDQUFWLEdBQWlDSyxDQUEzQztBQUNEOztBQUVELFNBQU9KLE1BQVA7QUFDRCxDQWZEIiwiZmlsZSI6InN3YXAtY2FzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB1cHBlckNhc2UgPSByZXF1aXJlKCd1cHBlci1jYXNlJylcbnZhciBsb3dlckNhc2UgPSByZXF1aXJlKCdsb3dlci1jYXNlJylcblxuLyoqXG4gKiBTd2FwIHRoZSBjYXNlIG9mIGEgc3RyaW5nLiBNYW51YWxseSBpdGVyYXRlIG92ZXIgZXZlcnkgY2hhcmFjdGVyIGFuZCBjaGVja1xuICogaW5zdGVhZCBvZiByZXBsYWNpbmcgY2VydGFpbiBjaGFyYWN0ZXJzIGZvciBiZXR0ZXIgdW5pY29kZSBzdXBwb3J0LlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IFtsb2NhbGVdXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlKSB7XG4gIGlmIChzdHIgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYyA9IHN0cltpXVxuICAgIHZhciB1ID0gdXBwZXJDYXNlKGMsIGxvY2FsZSlcblxuICAgIHJlc3VsdCArPSB1ID09PSBjID8gbG93ZXJDYXNlKGMsIGxvY2FsZSkgOiB1XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iXX0=","deps":{"upper-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js","lower-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case/lower-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/dot-case/dot-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/dot-case/dot-case.js","source":"'use strict';\n\nvar noCase = require('no-case');\n\n/**\n * Dot case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '.');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvdC1jYXNlLmpzIl0sIm5hbWVzIjpbIm5vQ2FzZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwidmFsdWUiLCJsb2NhbGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsU0FBU0MsUUFBUSxTQUFSLENBQWI7O0FBRUE7Ozs7Ozs7QUFPQUMsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxLQUFWLEVBQWlCQyxNQUFqQixFQUF5QjtBQUN4QyxTQUFPTCxPQUFPSSxLQUFQLEVBQWNDLE1BQWQsRUFBc0IsR0FBdEIsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiZG90LWNhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9DYXNlID0gcmVxdWlyZSgnbm8tY2FzZScpXG5cbi8qKlxuICogRG90IGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtICB7c3RyaW5nfSBbbG9jYWxlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbG9jYWxlKSB7XG4gIHJldHVybiBub0Nhc2UodmFsdWUsIGxvY2FsZSwgJy4nKVxufVxuIl19","deps":{"no-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/path-case/path-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/path-case/path-case.js","source":"'use strict';\n\nvar noCase = require('no-case');\n\n/**\n * Path case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '/');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhdGgtY2FzZS5qcyJdLCJuYW1lcyI6WyJub0Nhc2UiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInZhbHVlIiwibG9jYWxlIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFNBQVNDLFFBQVEsU0FBUixDQUFiOztBQUVBOzs7Ozs7O0FBT0FDLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsS0FBVixFQUFpQkMsTUFBakIsRUFBeUI7QUFDeEMsU0FBT0wsT0FBT0ksS0FBUCxFQUFjQyxNQUFkLEVBQXNCLEdBQXRCLENBQVA7QUFDRCxDQUZEIiwiZmlsZSI6InBhdGgtY2FzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBub0Nhc2UgPSByZXF1aXJlKCduby1jYXNlJylcblxuLyoqXG4gKiBQYXRoIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtICB7c3RyaW5nfSBbbG9jYWxlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbG9jYWxlKSB7XG4gIHJldHVybiBub0Nhc2UodmFsdWUsIGxvY2FsZSwgJy8nKVxufVxuIl19","deps":{"no-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/camel-case/camel-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/camel-case/camel-case.js","source":"'use strict';\n\nvar upperCase = require('upper-case');\nvar noCase = require('no-case');\n\n/**\n * Camel case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale, mergeNumbers) {\n  var result = noCase(value, locale);\n\n  // Replace periods between numeric entities with an underscore.\n  if (!mergeNumbers) {\n    result = result.replace(/ (?=\\d)/g, '_');\n  }\n\n  // Replace spaces between words with an upper cased character.\n  return result.replace(/ (.)/g, function (m, $1) {\n    return upperCase($1, locale);\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbWVsLWNhc2UuanMiXSwibmFtZXMiOlsidXBwZXJDYXNlIiwicmVxdWlyZSIsIm5vQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvY2FsZSIsIm1lcmdlTnVtYmVycyIsInJlc3VsdCIsInJlcGxhY2UiLCJtIiwiJDEiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsWUFBWUMsUUFBUSxZQUFSLENBQWhCO0FBQ0EsSUFBSUMsU0FBU0QsUUFBUSxTQUFSLENBQWI7O0FBRUE7Ozs7Ozs7QUFPQUUsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxLQUFWLEVBQWlCQyxNQUFqQixFQUF5QkMsWUFBekIsRUFBdUM7QUFDdEQsTUFBSUMsU0FBU04sT0FBT0csS0FBUCxFQUFjQyxNQUFkLENBQWI7O0FBRUE7QUFDQSxNQUFJLENBQUNDLFlBQUwsRUFBbUI7QUFDakJDLGFBQVNBLE9BQU9DLE9BQVAsQ0FBZSxVQUFmLEVBQTJCLEdBQTNCLENBQVQ7QUFDRDs7QUFFRDtBQUNBLFNBQU9ELE9BQU9DLE9BQVAsQ0FBZSxPQUFmLEVBQXdCLFVBQVVDLENBQVYsRUFBYUMsRUFBYixFQUFpQjtBQUM5QyxXQUFPWCxVQUFVVyxFQUFWLEVBQWNMLE1BQWQsQ0FBUDtBQUNELEdBRk0sQ0FBUDtBQUdELENBWkQiLCJmaWxlIjoiY2FtZWwtY2FzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB1cHBlckNhc2UgPSByZXF1aXJlKCd1cHBlci1jYXNlJylcbnZhciBub0Nhc2UgPSByZXF1aXJlKCduby1jYXNlJylcblxuLyoqXG4gKiBDYW1lbCBjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSAge3N0cmluZ30gW2xvY2FsZV1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIGxvY2FsZSwgbWVyZ2VOdW1iZXJzKSB7XG4gIHZhciByZXN1bHQgPSBub0Nhc2UodmFsdWUsIGxvY2FsZSlcblxuICAvLyBSZXBsYWNlIHBlcmlvZHMgYmV0d2VlbiBudW1lcmljIGVudGl0aWVzIHdpdGggYW4gdW5kZXJzY29yZS5cbiAgaWYgKCFtZXJnZU51bWJlcnMpIHtcbiAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvICg/PVxcZCkvZywgJ18nKVxuICB9XG5cbiAgLy8gUmVwbGFjZSBzcGFjZXMgYmV0d2VlbiB3b3JkcyB3aXRoIGFuIHVwcGVyIGNhc2VkIGNoYXJhY3Rlci5cbiAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKC8gKC4pL2csIGZ1bmN0aW9uIChtLCAkMSkge1xuICAgIHJldHVybiB1cHBlckNhc2UoJDEsIGxvY2FsZSlcbiAgfSlcbn1cbiJdfQ==","deps":{"upper-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js","no-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/snake-case/snake-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/snake-case/snake-case.js","source":"'use strict';\n\nvar noCase = require('no-case');\n\n/**\n * Snake case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '_');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNuYWtlLWNhc2UuanMiXSwibmFtZXMiOlsibm9DYXNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvY2FsZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxRQUFRLFNBQVIsQ0FBYjs7QUFFQTs7Ozs7OztBQU9BQyxPQUFPQyxPQUFQLEdBQWlCLFVBQVVDLEtBQVYsRUFBaUJDLE1BQWpCLEVBQXlCO0FBQ3hDLFNBQU9MLE9BQU9JLEtBQVAsRUFBY0MsTUFBZCxFQUFzQixHQUF0QixDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiJzbmFrZS1jYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG5vQ2FzZSA9IHJlcXVpcmUoJ25vLWNhc2UnKVxuXG4vKipcbiAqIFNuYWtlIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtICB7c3RyaW5nfSBbbG9jYWxlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbG9jYWxlKSB7XG4gIHJldHVybiBub0Nhc2UodmFsdWUsIGxvY2FsZSwgJ18nKVxufVxuIl19","deps":{"no-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/title-case/title-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/title-case/title-case.js","source":"'use strict';\n\nvar noCase = require('no-case');\nvar upperCase = require('upper-case');\n\n/**\n * Title case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale).replace(/^.| ./g, function (m) {\n    return upperCase(m, locale);\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpdGxlLWNhc2UuanMiXSwibmFtZXMiOlsibm9DYXNlIiwicmVxdWlyZSIsInVwcGVyQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvY2FsZSIsInJlcGxhY2UiLCJtIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFNBQVNDLFFBQVEsU0FBUixDQUFiO0FBQ0EsSUFBSUMsWUFBWUQsUUFBUSxZQUFSLENBQWhCOztBQUVBOzs7Ozs7O0FBT0FFLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsS0FBVixFQUFpQkMsTUFBakIsRUFBeUI7QUFDeEMsU0FBT04sT0FBT0ssS0FBUCxFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixDQUE4QixRQUE5QixFQUF3QyxVQUFVQyxDQUFWLEVBQWE7QUFDMUQsV0FBT04sVUFBVU0sQ0FBVixFQUFhRixNQUFiLENBQVA7QUFDRCxHQUZNLENBQVA7QUFHRCxDQUpEIiwiZmlsZSI6InRpdGxlLWNhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9DYXNlID0gcmVxdWlyZSgnbm8tY2FzZScpXG52YXIgdXBwZXJDYXNlID0gcmVxdWlyZSgndXBwZXItY2FzZScpXG5cbi8qKlxuICogVGl0bGUgY2FzZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IFtsb2NhbGVdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBsb2NhbGUpIHtcbiAgcmV0dXJuIG5vQ2FzZSh2YWx1ZSwgbG9jYWxlKS5yZXBsYWNlKC9eLnwgLi9nLCBmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiB1cHBlckNhc2UobSwgbG9jYWxlKVxuICB9KVxufVxuIl19","deps":{"no-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js","upper-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/param-case/param-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/param-case/param-case.js","source":"'use strict';\n\nvar noCase = require('no-case');\n\n/**\n * Param case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '-');\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcmFtLWNhc2UuanMiXSwibmFtZXMiOlsibm9DYXNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvY2FsZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxRQUFRLFNBQVIsQ0FBYjs7QUFFQTs7Ozs7OztBQU9BQyxPQUFPQyxPQUFQLEdBQWlCLFVBQVVDLEtBQVYsRUFBaUJDLE1BQWpCLEVBQXlCO0FBQ3hDLFNBQU9MLE9BQU9JLEtBQVAsRUFBY0MsTUFBZCxFQUFzQixHQUF0QixDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiJwYXJhbS1jYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG5vQ2FzZSA9IHJlcXVpcmUoJ25vLWNhc2UnKVxuXG4vKipcbiAqIFBhcmFtIGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtICB7c3RyaW5nfSBbbG9jYWxlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbG9jYWxlKSB7XG4gIHJldHVybiBub0Nhc2UodmFsdWUsIGxvY2FsZSwgJy0nKVxufVxuIl19","deps":{"no-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/header-case/header-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/header-case/header-case.js","source":"'use strict';\n\nvar noCase = require('no-case');\nvar upperCase = require('upper-case');\n\n/**\n * Header case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return noCase(value, locale, '-').replace(/^.|-./g, function (m) {\n    return upperCase(m, locale);\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlYWRlci1jYXNlLmpzIl0sIm5hbWVzIjpbIm5vQ2FzZSIsInJlcXVpcmUiLCJ1cHBlckNhc2UiLCJtb2R1bGUiLCJleHBvcnRzIiwidmFsdWUiLCJsb2NhbGUiLCJyZXBsYWNlIiwibSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxRQUFRLFNBQVIsQ0FBYjtBQUNBLElBQUlDLFlBQVlELFFBQVEsWUFBUixDQUFoQjs7QUFFQTs7Ozs7OztBQU9BRSxPQUFPQyxPQUFQLEdBQWlCLFVBQVVDLEtBQVYsRUFBaUJDLE1BQWpCLEVBQXlCO0FBQ3hDLFNBQU9OLE9BQU9LLEtBQVAsRUFBY0MsTUFBZCxFQUFzQixHQUF0QixFQUEyQkMsT0FBM0IsQ0FBbUMsUUFBbkMsRUFBNkMsVUFBVUMsQ0FBVixFQUFhO0FBQy9ELFdBQU9OLFVBQVVNLENBQVYsRUFBYUYsTUFBYixDQUFQO0FBQ0QsR0FGTSxDQUFQO0FBR0QsQ0FKRCIsImZpbGUiOiJoZWFkZXItY2FzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBub0Nhc2UgPSByZXF1aXJlKCduby1jYXNlJylcbnZhciB1cHBlckNhc2UgPSByZXF1aXJlKCd1cHBlci1jYXNlJylcblxuLyoqXG4gKiBIZWFkZXIgY2FzZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IFtsb2NhbGVdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBsb2NhbGUpIHtcbiAgcmV0dXJuIG5vQ2FzZSh2YWx1ZSwgbG9jYWxlLCAnLScpLnJlcGxhY2UoL14ufC0uL2csIGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIHVwcGVyQ2FzZShtLCBsb2NhbGUpXG4gIH0pXG59XG4iXX0=","deps":{"no-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js","upper-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/pascal-case/pascal-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/pascal-case/pascal-case.js","source":"'use strict';\n\nvar camelCase = require('camel-case');\nvar upperCaseFirst = require('upper-case-first');\n\n/**\n * Pascal case a string.\n *\n * @param  {string}  value\n * @param  {string}  [locale]\n * @param  {boolean} [mergeNumbers]\n * @return {string}\n */\nmodule.exports = function (value, locale, mergeNumbers) {\n  return upperCaseFirst(camelCase(value, locale, mergeNumbers), locale);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhc2NhbC1jYXNlLmpzIl0sIm5hbWVzIjpbImNhbWVsQ2FzZSIsInJlcXVpcmUiLCJ1cHBlckNhc2VGaXJzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvY2FsZSIsIm1lcmdlTnVtYmVycyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxZQUFZQyxRQUFRLFlBQVIsQ0FBaEI7QUFDQSxJQUFJQyxpQkFBaUJELFFBQVEsa0JBQVIsQ0FBckI7O0FBRUE7Ozs7Ozs7O0FBUUFFLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsS0FBVixFQUFpQkMsTUFBakIsRUFBeUJDLFlBQXpCLEVBQXVDO0FBQ3RELFNBQU9MLGVBQWVGLFVBQVVLLEtBQVYsRUFBaUJDLE1BQWpCLEVBQXlCQyxZQUF6QixDQUFmLEVBQXVERCxNQUF2RCxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiJwYXNjYWwtY2FzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjYW1lbENhc2UgPSByZXF1aXJlKCdjYW1lbC1jYXNlJylcbnZhciB1cHBlckNhc2VGaXJzdCA9IHJlcXVpcmUoJ3VwcGVyLWNhc2UtZmlyc3QnKVxuXG4vKipcbiAqIFBhc2NhbCBjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHZhbHVlXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBbbG9jYWxlXVxuICogQHBhcmFtICB7Ym9vbGVhbn0gW21lcmdlTnVtYmVyc11cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIGxvY2FsZSwgbWVyZ2VOdW1iZXJzKSB7XG4gIHJldHVybiB1cHBlckNhc2VGaXJzdChjYW1lbENhc2UodmFsdWUsIGxvY2FsZSwgbWVyZ2VOdW1iZXJzKSwgbG9jYWxlKVxufVxuIl19","deps":{"camel-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/camel-case/camel-case.js","upper-case-first":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case-first/upper-case-first.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/constant-case/constant-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/constant-case/constant-case.js","source":"'use strict';\n\nvar upperCase = require('upper-case');\nvar snakeCase = require('snake-case');\n\n/**\n * Constant case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return upperCase(snakeCase(value, locale), locale);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50LWNhc2UuanMiXSwibmFtZXMiOlsidXBwZXJDYXNlIiwicmVxdWlyZSIsInNuYWtlQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvY2FsZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxZQUFZQyxRQUFRLFlBQVIsQ0FBaEI7QUFDQSxJQUFJQyxZQUFZRCxRQUFRLFlBQVIsQ0FBaEI7O0FBRUE7Ozs7Ozs7QUFPQUUsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxLQUFWLEVBQWlCQyxNQUFqQixFQUF5QjtBQUN4QyxTQUFPTixVQUFVRSxVQUFVRyxLQUFWLEVBQWlCQyxNQUFqQixDQUFWLEVBQW9DQSxNQUFwQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiJjb25zdGFudC1jYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHVwcGVyQ2FzZSA9IHJlcXVpcmUoJ3VwcGVyLWNhc2UnKVxudmFyIHNuYWtlQ2FzZSA9IHJlcXVpcmUoJ3NuYWtlLWNhc2UnKVxuXG4vKipcbiAqIENvbnN0YW50IGNhc2UgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtICB7c3RyaW5nfSBbbG9jYWxlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgbG9jYWxlKSB7XG4gIHJldHVybiB1cHBlckNhc2Uoc25ha2VDYXNlKHZhbHVlLCBsb2NhbGUpLCBsb2NhbGUpXG59XG4iXX0=","deps":{"snake-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/snake-case/snake-case.js","upper-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-upper-case/is-upper-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-upper-case/is-upper-case.js","source":"'use strict';\n\nvar upperCase = require('upper-case');\n\n/**\n * Check if a string is upper case.\n *\n * @param  {String}  string\n * @param  {String}  [locale]\n * @return {Boolean}\n */\nmodule.exports = function (string, locale) {\n  return upperCase(string, locale) === string;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzLXVwcGVyLWNhc2UuanMiXSwibmFtZXMiOlsidXBwZXJDYXNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdHJpbmciLCJsb2NhbGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsWUFBWUMsUUFBUSxZQUFSLENBQWhCOztBQUVBOzs7Ozs7O0FBT0FDLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsTUFBVixFQUFrQkMsTUFBbEIsRUFBMEI7QUFDekMsU0FBT0wsVUFBVUksTUFBVixFQUFrQkMsTUFBbEIsTUFBOEJELE1BQXJDO0FBQ0QsQ0FGRCIsImZpbGUiOiJpcy11cHBlci1jYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHVwcGVyQ2FzZSA9IHJlcXVpcmUoJ3VwcGVyLWNhc2UnKVxuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIGlzIHVwcGVyIGNhc2UuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSAgc3RyaW5nXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICBbbG9jYWxlXVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyaW5nLCBsb2NhbGUpIHtcbiAgcmV0dXJuIHVwcGVyQ2FzZShzdHJpbmcsIGxvY2FsZSkgPT09IHN0cmluZ1xufVxuIl19","deps":{"upper-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/sentence-case/sentence-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/sentence-case/sentence-case.js","source":"'use strict';\n\nvar noCase = require('no-case');\nvar upperCaseFirst = require('upper-case-first');\n\n/**\n * Sentence case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale) {\n  return upperCaseFirst(noCase(value, locale), locale);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbnRlbmNlLWNhc2UuanMiXSwibmFtZXMiOlsibm9DYXNlIiwicmVxdWlyZSIsInVwcGVyQ2FzZUZpcnN0IiwibW9kdWxlIiwiZXhwb3J0cyIsInZhbHVlIiwibG9jYWxlIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFNBQVNDLFFBQVEsU0FBUixDQUFiO0FBQ0EsSUFBSUMsaUJBQWlCRCxRQUFRLGtCQUFSLENBQXJCOztBQUVBOzs7Ozs7O0FBT0FFLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsS0FBVixFQUFpQkMsTUFBakIsRUFBeUI7QUFDeEMsU0FBT0osZUFBZUYsT0FBT0ssS0FBUCxFQUFjQyxNQUFkLENBQWYsRUFBc0NBLE1BQXRDLENBQVA7QUFDRCxDQUZEIiwiZmlsZSI6InNlbnRlbmNlLWNhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9DYXNlID0gcmVxdWlyZSgnbm8tY2FzZScpXG52YXIgdXBwZXJDYXNlRmlyc3QgPSByZXF1aXJlKCd1cHBlci1jYXNlLWZpcnN0JylcblxuLyoqXG4gKiBTZW50ZW5jZSBjYXNlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSAge3N0cmluZ30gW2xvY2FsZV1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIGxvY2FsZSkge1xuICByZXR1cm4gdXBwZXJDYXNlRmlyc3Qobm9DYXNlKHZhbHVlLCBsb2NhbGUpLCBsb2NhbGUpXG59XG4iXX0=","deps":{"no-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js","upper-case-first":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case-first/upper-case-first.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-lower-case/is-lower-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-lower-case/is-lower-case.js","source":"'use strict';\n\nvar lowerCase = require('lower-case');\n\n/**\n * Check if a string is lower case.\n *\n * @param  {String}  string\n * @param  {String}  [locale]\n * @return {Boolean}\n */\nmodule.exports = function (string, locale) {\n  return lowerCase(string, locale) === string;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzLWxvd2VyLWNhc2UuanMiXSwibmFtZXMiOlsibG93ZXJDYXNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdHJpbmciLCJsb2NhbGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsWUFBWUMsUUFBUSxZQUFSLENBQWhCOztBQUVBOzs7Ozs7O0FBT0FDLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsTUFBVixFQUFrQkMsTUFBbEIsRUFBMEI7QUFDekMsU0FBT0wsVUFBVUksTUFBVixFQUFrQkMsTUFBbEIsTUFBOEJELE1BQXJDO0FBQ0QsQ0FGRCIsImZpbGUiOiJpcy1sb3dlci1jYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGxvd2VyQ2FzZSA9IHJlcXVpcmUoJ2xvd2VyLWNhc2UnKVxuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIGlzIGxvd2VyIGNhc2UuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSAgc3RyaW5nXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICBbbG9jYWxlXVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyaW5nLCBsb2NhbGUpIHtcbiAgcmV0dXJuIGxvd2VyQ2FzZShzdHJpbmcsIGxvY2FsZSkgPT09IHN0cmluZ1xufVxuIl19","deps":{"lower-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case/lower-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case-first/upper-case-first.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case-first/upper-case-first.js","source":"'use strict';\n\nvar upperCase = require('upper-case');\n\n/**\n * Upper case the first character of a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  if (str == null) {\n    return '';\n  }\n\n  str = String(str);\n\n  return upperCase(str.charAt(0), locale) + str.substr(1);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVwcGVyLWNhc2UtZmlyc3QuanMiXSwibmFtZXMiOlsidXBwZXJDYXNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdHIiLCJsb2NhbGUiLCJTdHJpbmciLCJjaGFyQXQiLCJzdWJzdHIiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsWUFBWUMsUUFBUSxZQUFSLENBQWhCOztBQUVBOzs7Ozs7QUFNQUMsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWVDLE1BQWYsRUFBdUI7QUFDdEMsTUFBSUQsT0FBTyxJQUFYLEVBQWlCO0FBQ2YsV0FBTyxFQUFQO0FBQ0Q7O0FBRURBLFFBQU1FLE9BQU9GLEdBQVAsQ0FBTjs7QUFFQSxTQUFPSixVQUFVSSxJQUFJRyxNQUFKLENBQVcsQ0FBWCxDQUFWLEVBQXlCRixNQUF6QixJQUFtQ0QsSUFBSUksTUFBSixDQUFXLENBQVgsQ0FBMUM7QUFDRCxDQVJEIiwiZmlsZSI6InVwcGVyLWNhc2UtZmlyc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdXBwZXJDYXNlID0gcmVxdWlyZSgndXBwZXItY2FzZScpXG5cbi8qKlxuICogVXBwZXIgY2FzZSB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlKSB7XG4gIGlmIChzdHIgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgc3RyID0gU3RyaW5nKHN0cilcblxuICByZXR1cm4gdXBwZXJDYXNlKHN0ci5jaGFyQXQoMCksIGxvY2FsZSkgKyBzdHIuc3Vic3RyKDEpXG59XG4iXX0=","deps":{"upper-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case-first/lower-case-first.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case-first/lower-case-first.js","source":"'use strict';\n\nvar lowerCase = require('lower-case');\n\n/**\n * Lower case the first character of a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  if (str == null) {\n    return '';\n  }\n\n  str = String(str);\n\n  return lowerCase(str.charAt(0), locale) + str.substr(1);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvd2VyLWNhc2UtZmlyc3QuanMiXSwibmFtZXMiOlsibG93ZXJDYXNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdHIiLCJsb2NhbGUiLCJTdHJpbmciLCJjaGFyQXQiLCJzdWJzdHIiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsWUFBWUMsUUFBUSxZQUFSLENBQWhCOztBQUVBOzs7Ozs7QUFNQUMsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWVDLE1BQWYsRUFBdUI7QUFDdEMsTUFBSUQsT0FBTyxJQUFYLEVBQWlCO0FBQ2YsV0FBTyxFQUFQO0FBQ0Q7O0FBRURBLFFBQU1FLE9BQU9GLEdBQVAsQ0FBTjs7QUFFQSxTQUFPSixVQUFVSSxJQUFJRyxNQUFKLENBQVcsQ0FBWCxDQUFWLEVBQXlCRixNQUF6QixJQUFtQ0QsSUFBSUksTUFBSixDQUFXLENBQVgsQ0FBMUM7QUFDRCxDQVJEIiwiZmlsZSI6Imxvd2VyLWNhc2UtZmlyc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbG93ZXJDYXNlID0gcmVxdWlyZSgnbG93ZXItY2FzZScpXG5cbi8qKlxuICogTG93ZXIgY2FzZSB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgbG9jYWxlKSB7XG4gIGlmIChzdHIgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgc3RyID0gU3RyaW5nKHN0cilcblxuICByZXR1cm4gbG93ZXJDYXNlKHN0ci5jaGFyQXQoMCksIGxvY2FsZSkgKyBzdHIuc3Vic3RyKDEpXG59XG4iXX0=","deps":{"lower-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case/lower-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/change-case/change-case.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/change-case/change-case.js","source":"'use strict';\n\nexports.no = exports.noCase = require('no-case');\nexports.dot = exports.dotCase = require('dot-case');\nexports.swap = exports.swapCase = require('swap-case');\nexports.path = exports.pathCase = require('path-case');\nexports.upper = exports.upperCase = require('upper-case');\nexports.lower = exports.lowerCase = require('lower-case');\nexports.camel = exports.camelCase = require('camel-case');\nexports.snake = exports.snakeCase = require('snake-case');\nexports.title = exports.titleCase = require('title-case');\nexports.param = exports.paramCase = require('param-case');\nexports.header = exports.headerCase = require('header-case');\nexports.pascal = exports.pascalCase = require('pascal-case');\nexports.constant = exports.constantCase = require('constant-case');\nexports.sentence = exports.sentenceCase = require('sentence-case');\nexports.isUpper = exports.isUpperCase = require('is-upper-case');\nexports.isLower = exports.isLowerCase = require('is-lower-case');\nexports.ucFirst = exports.upperCaseFirst = require('upper-case-first');\nexports.lcFirst = exports.lowerCaseFirst = require('lower-case-first');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYW5nZS1jYXNlLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJubyIsIm5vQ2FzZSIsInJlcXVpcmUiLCJkb3QiLCJkb3RDYXNlIiwic3dhcCIsInN3YXBDYXNlIiwicGF0aCIsInBhdGhDYXNlIiwidXBwZXIiLCJ1cHBlckNhc2UiLCJsb3dlciIsImxvd2VyQ2FzZSIsImNhbWVsIiwiY2FtZWxDYXNlIiwic25ha2UiLCJzbmFrZUNhc2UiLCJ0aXRsZSIsInRpdGxlQ2FzZSIsInBhcmFtIiwicGFyYW1DYXNlIiwiaGVhZGVyIiwiaGVhZGVyQ2FzZSIsInBhc2NhbCIsInBhc2NhbENhc2UiLCJjb25zdGFudCIsImNvbnN0YW50Q2FzZSIsInNlbnRlbmNlIiwic2VudGVuY2VDYXNlIiwiaXNVcHBlciIsImlzVXBwZXJDYXNlIiwiaXNMb3dlciIsImlzTG93ZXJDYXNlIiwidWNGaXJzdCIsInVwcGVyQ2FzZUZpcnN0IiwibGNGaXJzdCIsImxvd2VyQ2FzZUZpcnN0Il0sIm1hcHBpbmdzIjoiOztBQUFBQSxRQUFRQyxFQUFSLEdBQWFELFFBQVFFLE1BQVIsR0FBaUJDLFFBQVEsU0FBUixDQUE5QjtBQUNBSCxRQUFRSSxHQUFSLEdBQWNKLFFBQVFLLE9BQVIsR0FBa0JGLFFBQVEsVUFBUixDQUFoQztBQUNBSCxRQUFRTSxJQUFSLEdBQWVOLFFBQVFPLFFBQVIsR0FBbUJKLFFBQVEsV0FBUixDQUFsQztBQUNBSCxRQUFRUSxJQUFSLEdBQWVSLFFBQVFTLFFBQVIsR0FBbUJOLFFBQVEsV0FBUixDQUFsQztBQUNBSCxRQUFRVSxLQUFSLEdBQWdCVixRQUFRVyxTQUFSLEdBQW9CUixRQUFRLFlBQVIsQ0FBcEM7QUFDQUgsUUFBUVksS0FBUixHQUFnQlosUUFBUWEsU0FBUixHQUFvQlYsUUFBUSxZQUFSLENBQXBDO0FBQ0FILFFBQVFjLEtBQVIsR0FBZ0JkLFFBQVFlLFNBQVIsR0FBb0JaLFFBQVEsWUFBUixDQUFwQztBQUNBSCxRQUFRZ0IsS0FBUixHQUFnQmhCLFFBQVFpQixTQUFSLEdBQW9CZCxRQUFRLFlBQVIsQ0FBcEM7QUFDQUgsUUFBUWtCLEtBQVIsR0FBZ0JsQixRQUFRbUIsU0FBUixHQUFvQmhCLFFBQVEsWUFBUixDQUFwQztBQUNBSCxRQUFRb0IsS0FBUixHQUFnQnBCLFFBQVFxQixTQUFSLEdBQW9CbEIsUUFBUSxZQUFSLENBQXBDO0FBQ0FILFFBQVFzQixNQUFSLEdBQWlCdEIsUUFBUXVCLFVBQVIsR0FBcUJwQixRQUFRLGFBQVIsQ0FBdEM7QUFDQUgsUUFBUXdCLE1BQVIsR0FBaUJ4QixRQUFReUIsVUFBUixHQUFxQnRCLFFBQVEsYUFBUixDQUF0QztBQUNBSCxRQUFRMEIsUUFBUixHQUFtQjFCLFFBQVEyQixZQUFSLEdBQXVCeEIsUUFBUSxlQUFSLENBQTFDO0FBQ0FILFFBQVE0QixRQUFSLEdBQW1CNUIsUUFBUTZCLFlBQVIsR0FBdUIxQixRQUFRLGVBQVIsQ0FBMUM7QUFDQUgsUUFBUThCLE9BQVIsR0FBa0I5QixRQUFRK0IsV0FBUixHQUFzQjVCLFFBQVEsZUFBUixDQUF4QztBQUNBSCxRQUFRZ0MsT0FBUixHQUFrQmhDLFFBQVFpQyxXQUFSLEdBQXNCOUIsUUFBUSxlQUFSLENBQXhDO0FBQ0FILFFBQVFrQyxPQUFSLEdBQWtCbEMsUUFBUW1DLGNBQVIsR0FBeUJoQyxRQUFRLGtCQUFSLENBQTNDO0FBQ0FILFFBQVFvQyxPQUFSLEdBQWtCcEMsUUFBUXFDLGNBQVIsR0FBeUJsQyxRQUFRLGtCQUFSLENBQTNDIiwiZmlsZSI6ImNoYW5nZS1jYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5ubyA9IGV4cG9ydHMubm9DYXNlID0gcmVxdWlyZSgnbm8tY2FzZScpXG5leHBvcnRzLmRvdCA9IGV4cG9ydHMuZG90Q2FzZSA9IHJlcXVpcmUoJ2RvdC1jYXNlJylcbmV4cG9ydHMuc3dhcCA9IGV4cG9ydHMuc3dhcENhc2UgPSByZXF1aXJlKCdzd2FwLWNhc2UnKVxuZXhwb3J0cy5wYXRoID0gZXhwb3J0cy5wYXRoQ2FzZSA9IHJlcXVpcmUoJ3BhdGgtY2FzZScpXG5leHBvcnRzLnVwcGVyID0gZXhwb3J0cy51cHBlckNhc2UgPSByZXF1aXJlKCd1cHBlci1jYXNlJylcbmV4cG9ydHMubG93ZXIgPSBleHBvcnRzLmxvd2VyQ2FzZSA9IHJlcXVpcmUoJ2xvd2VyLWNhc2UnKVxuZXhwb3J0cy5jYW1lbCA9IGV4cG9ydHMuY2FtZWxDYXNlID0gcmVxdWlyZSgnY2FtZWwtY2FzZScpXG5leHBvcnRzLnNuYWtlID0gZXhwb3J0cy5zbmFrZUNhc2UgPSByZXF1aXJlKCdzbmFrZS1jYXNlJylcbmV4cG9ydHMudGl0bGUgPSBleHBvcnRzLnRpdGxlQ2FzZSA9IHJlcXVpcmUoJ3RpdGxlLWNhc2UnKVxuZXhwb3J0cy5wYXJhbSA9IGV4cG9ydHMucGFyYW1DYXNlID0gcmVxdWlyZSgncGFyYW0tY2FzZScpXG5leHBvcnRzLmhlYWRlciA9IGV4cG9ydHMuaGVhZGVyQ2FzZSA9IHJlcXVpcmUoJ2hlYWRlci1jYXNlJylcbmV4cG9ydHMucGFzY2FsID0gZXhwb3J0cy5wYXNjYWxDYXNlID0gcmVxdWlyZSgncGFzY2FsLWNhc2UnKVxuZXhwb3J0cy5jb25zdGFudCA9IGV4cG9ydHMuY29uc3RhbnRDYXNlID0gcmVxdWlyZSgnY29uc3RhbnQtY2FzZScpXG5leHBvcnRzLnNlbnRlbmNlID0gZXhwb3J0cy5zZW50ZW5jZUNhc2UgPSByZXF1aXJlKCdzZW50ZW5jZS1jYXNlJylcbmV4cG9ydHMuaXNVcHBlciA9IGV4cG9ydHMuaXNVcHBlckNhc2UgPSByZXF1aXJlKCdpcy11cHBlci1jYXNlJylcbmV4cG9ydHMuaXNMb3dlciA9IGV4cG9ydHMuaXNMb3dlckNhc2UgPSByZXF1aXJlKCdpcy1sb3dlci1jYXNlJylcbmV4cG9ydHMudWNGaXJzdCA9IGV4cG9ydHMudXBwZXJDYXNlRmlyc3QgPSByZXF1aXJlKCd1cHBlci1jYXNlLWZpcnN0JylcbmV4cG9ydHMubGNGaXJzdCA9IGV4cG9ydHMubG93ZXJDYXNlRmlyc3QgPSByZXF1aXJlKCdsb3dlci1jYXNlLWZpcnN0JylcbiJdfQ==","deps":{"upper-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js","lower-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case/lower-case.js","swap-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/swap-case/swap-case.js","dot-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/dot-case/dot-case.js","path-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/path-case/path-case.js","camel-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/camel-case/camel-case.js","snake-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/snake-case/snake-case.js","title-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/title-case/title-case.js","header-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/header-case/header-case.js","param-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/param-case/param-case.js","constant-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/constant-case/constant-case.js","is-upper-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-upper-case/is-upper-case.js","is-lower-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-lower-case/is-lower-case.js","pascal-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/pascal-case/pascal-case.js","sentence-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/sentence-case/sentence-case.js","upper-case-first":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case-first/upper-case-first.js","lower-case-first":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case-first/lower-case-first.js","no-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isNaN.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isNaN.js","source":"\"use strict\";\n\nmodule.exports = Number.isNaN || function isNaN(a) {\n\treturn a !== a;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzTmFOLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJOdW1iZXIiLCJpc05hTiIsImEiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUJDLE9BQU9DLEtBQVAsSUFBZ0IsU0FBU0EsS0FBVCxDQUFlQyxDQUFmLEVBQWtCO0FBQ2xELFFBQU9BLE1BQU1BLENBQWI7QUFDQSxDQUZEIiwiZmlsZSI6ImlzTmFOLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNOYU4oYSkge1xuXHRyZXR1cm4gYSAhPT0gYTtcbn07XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isFinite.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isFinite.js","source":"'use strict';\n\nvar $isNaN = Number.isNaN || function (a) {\n  return a !== a;\n};\n\nmodule.exports = Number.isFinite || function (x) {\n  return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzRmluaXRlLmpzIl0sIm5hbWVzIjpbIiRpc05hTiIsIk51bWJlciIsImlzTmFOIiwiYSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpc0Zpbml0ZSIsIngiLCJJbmZpbml0eSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxPQUFPQyxLQUFQLElBQWdCLFVBQVVDLENBQVYsRUFBYTtBQUFFLFNBQU9BLE1BQU1BLENBQWI7QUFBaUIsQ0FBN0Q7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUJKLE9BQU9LLFFBQVAsSUFBbUIsVUFBVUMsQ0FBVixFQUFhO0FBQUUsU0FBTyxPQUFPQSxDQUFQLEtBQWEsUUFBYixJQUF5QixDQUFDUCxPQUFPTyxDQUFQLENBQTFCLElBQXVDQSxNQUFNQyxRQUE3QyxJQUF5REQsTUFBTSxDQUFDQyxRQUF2RTtBQUFrRixDQUFySSIsImZpbGUiOiJpc0Zpbml0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciAkaXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgIT09IGE7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB0eXBlb2YgeCA9PT0gJ251bWJlcicgJiYgISRpc05hTih4KSAmJiB4ICE9PSBJbmZpbml0eSAmJiB4ICE9PSAtSW5maW5pdHk7IH07XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/sign.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/sign.js","source":"\"use strict\";\n\nmodule.exports = function sign(number) {\n\treturn number >= 0 ? 1 : -1;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZ24uanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInNpZ24iLCJudW1iZXIiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsSUFBVCxDQUFjQyxNQUFkLEVBQXNCO0FBQ3RDLFFBQU9BLFVBQVUsQ0FBVixHQUFjLENBQWQsR0FBa0IsQ0FBQyxDQUExQjtBQUNBLENBRkQiLCJmaWxlIjoic2lnbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2lnbihudW1iZXIpIHtcblx0cmV0dXJuIG51bWJlciA+PSAwID8gMSA6IC0xO1xufTtcbiJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/mod.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/mod.js","source":"\"use strict\";\n\nmodule.exports = function mod(number, modulo) {\n\tvar remain = number % modulo;\n\treturn Math.floor(remain >= 0 ? remain : remain + modulo);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibW9kIiwibnVtYmVyIiwibW9kdWxvIiwicmVtYWluIiwiTWF0aCIsImZsb29yIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLEdBQVQsQ0FBYUMsTUFBYixFQUFxQkMsTUFBckIsRUFBNkI7QUFDN0MsS0FBSUMsU0FBU0YsU0FBU0MsTUFBdEI7QUFDQSxRQUFPRSxLQUFLQyxLQUFMLENBQVdGLFVBQVUsQ0FBVixHQUFjQSxNQUFkLEdBQXVCQSxTQUFTRCxNQUEzQyxDQUFQO0FBQ0EsQ0FIRCIsImZpbGUiOiJtb2QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1vZChudW1iZXIsIG1vZHVsbykge1xuXHR2YXIgcmVtYWluID0gbnVtYmVyICUgbW9kdWxvO1xuXHRyZXR1cm4gTWF0aC5mbG9vcihyZW1haW4gPj0gMCA/IHJlbWFpbiA6IHJlbWFpbiArIG1vZHVsbyk7XG59O1xuIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isPrimitive.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isPrimitive.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nmodule.exports = function isPrimitive(value) {\n\treturn value === null || typeof value !== 'function' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzUHJpbWl0aXZlLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc1ByaW1pdGl2ZSIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFDNUMsUUFBT0EsVUFBVSxJQUFWLElBQW1CLE9BQU9BLEtBQVAsS0FBaUIsVUFBakIsSUFBK0IsUUFBT0EsS0FBUCx5Q0FBT0EsS0FBUCxPQUFpQixRQUExRTtBQUNBLENBRkQiLCJmaWxlIjoiaXNQcmltaXRpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpO1xufTtcbiJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-callable/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-callable/index.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar fnToStr = Function.prototype.toString;\n\nvar constructorRegex = /^\\s*class /;\nvar isES6ClassFn = function isES6ClassFn(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\tvar singleStripped = fnStr.replace(/\\/\\/.*\\n/g, '');\n\t\tvar multiStripped = singleStripped.replace(/\\/\\*[.\\s\\S]*\\*\\//g, '');\n\t\tvar spaceStripped = multiStripped.replace(/\\n/mg, ' ').replace(/ {2}/g, ' ');\n\t\treturn constructorRegex.test(spaceStripped);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionObject(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) {\n\t\t\treturn false;\n\t\t}\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar hasToStringTag = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';\n\nmodule.exports = function isCallable(value) {\n\tif (!value) {\n\t\treturn false;\n\t}\n\tif (typeof value !== 'function' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n\t\treturn false;\n\t}\n\tif (hasToStringTag) {\n\t\treturn tryFunctionObject(value);\n\t}\n\tif (isES6ClassFn(value)) {\n\t\treturn false;\n\t}\n\tvar strClass = toStr.call(value);\n\treturn strClass === fnClass || strClass === genClass;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImZuVG9TdHIiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY29uc3RydWN0b3JSZWdleCIsImlzRVM2Q2xhc3NGbiIsInZhbHVlIiwiZm5TdHIiLCJjYWxsIiwic2luZ2xlU3RyaXBwZWQiLCJyZXBsYWNlIiwibXVsdGlTdHJpcHBlZCIsInNwYWNlU3RyaXBwZWQiLCJ0ZXN0IiwiZSIsInRyeUZ1bmN0aW9uT2JqZWN0IiwidG9TdHIiLCJPYmplY3QiLCJmbkNsYXNzIiwiZ2VuQ2xhc3MiLCJoYXNUb1N0cmluZ1RhZyIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzQ2FsbGFibGUiLCJzdHJDbGFzcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFJQSxVQUFVQyxTQUFTQyxTQUFULENBQW1CQyxRQUFqQzs7QUFFQSxJQUFJQyxtQkFBbUIsWUFBdkI7QUFDQSxJQUFJQyxlQUFlLFNBQVNBLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0FBQy9DLEtBQUk7QUFDSCxNQUFJQyxRQUFRUCxRQUFRUSxJQUFSLENBQWFGLEtBQWIsQ0FBWjtBQUNBLE1BQUlHLGlCQUFpQkYsTUFBTUcsT0FBTixDQUFjLFdBQWQsRUFBMkIsRUFBM0IsQ0FBckI7QUFDQSxNQUFJQyxnQkFBZ0JGLGVBQWVDLE9BQWYsQ0FBdUIsbUJBQXZCLEVBQTRDLEVBQTVDLENBQXBCO0FBQ0EsTUFBSUUsZ0JBQWdCRCxjQUFjRCxPQUFkLENBQXNCLE1BQXRCLEVBQThCLEdBQTlCLEVBQW1DQSxPQUFuQyxDQUEyQyxPQUEzQyxFQUFvRCxHQUFwRCxDQUFwQjtBQUNBLFNBQU9OLGlCQUFpQlMsSUFBakIsQ0FBc0JELGFBQXRCLENBQVA7QUFDQSxFQU5ELENBTUUsT0FBT0UsQ0FBUCxFQUFVO0FBQ1gsU0FBTyxLQUFQLENBRFcsQ0FDRztBQUNkO0FBQ0QsQ0FWRDs7QUFZQSxJQUFJQyxvQkFBb0IsU0FBU0EsaUJBQVQsQ0FBMkJULEtBQTNCLEVBQWtDO0FBQ3pELEtBQUk7QUFDSCxNQUFJRCxhQUFhQyxLQUFiLENBQUosRUFBeUI7QUFBRSxVQUFPLEtBQVA7QUFBZTtBQUMxQ04sVUFBUVEsSUFBUixDQUFhRixLQUFiO0FBQ0EsU0FBTyxJQUFQO0FBQ0EsRUFKRCxDQUlFLE9BQU9RLENBQVAsRUFBVTtBQUNYLFNBQU8sS0FBUDtBQUNBO0FBQ0QsQ0FSRDtBQVNBLElBQUlFLFFBQVFDLE9BQU9mLFNBQVAsQ0FBaUJDLFFBQTdCO0FBQ0EsSUFBSWUsVUFBVSxtQkFBZDtBQUNBLElBQUlDLFdBQVcsNEJBQWY7QUFDQSxJQUFJQyxpQkFBaUIsT0FBT0MsTUFBUCxLQUFrQixVQUFsQixJQUFnQyxRQUFPQSxPQUFPQyxXQUFkLE1BQThCLFFBQW5GOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLFVBQVQsQ0FBb0JuQixLQUFwQixFQUEyQjtBQUMzQyxLQUFJLENBQUNBLEtBQUwsRUFBWTtBQUFFLFNBQU8sS0FBUDtBQUFlO0FBQzdCLEtBQUksT0FBT0EsS0FBUCxLQUFpQixVQUFqQixJQUErQixRQUFPQSxLQUFQLHlDQUFPQSxLQUFQLE9BQWlCLFFBQXBELEVBQThEO0FBQUUsU0FBTyxLQUFQO0FBQWU7QUFDL0UsS0FBSWMsY0FBSixFQUFvQjtBQUFFLFNBQU9MLGtCQUFrQlQsS0FBbEIsQ0FBUDtBQUFrQztBQUN4RCxLQUFJRCxhQUFhQyxLQUFiLENBQUosRUFBeUI7QUFBRSxTQUFPLEtBQVA7QUFBZTtBQUMxQyxLQUFJb0IsV0FBV1YsTUFBTVIsSUFBTixDQUFXRixLQUFYLENBQWY7QUFDQSxRQUFPb0IsYUFBYVIsT0FBYixJQUF3QlEsYUFBYVAsUUFBNUM7QUFDQSxDQVBEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGNvbnN0cnVjdG9yUmVnZXggPSAvXlxccypjbGFzcyAvO1xudmFyIGlzRVM2Q2xhc3NGbiA9IGZ1bmN0aW9uIGlzRVM2Q2xhc3NGbih2YWx1ZSkge1xuXHR0cnkge1xuXHRcdHZhciBmblN0ciA9IGZuVG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0dmFyIHNpbmdsZVN0cmlwcGVkID0gZm5TdHIucmVwbGFjZSgvXFwvXFwvLipcXG4vZywgJycpO1xuXHRcdHZhciBtdWx0aVN0cmlwcGVkID0gc2luZ2xlU3RyaXBwZWQucmVwbGFjZSgvXFwvXFwqWy5cXHNcXFNdKlxcKlxcLy9nLCAnJyk7XG5cdFx0dmFyIHNwYWNlU3RyaXBwZWQgPSBtdWx0aVN0cmlwcGVkLnJlcGxhY2UoL1xcbi9tZywgJyAnKS5yZXBsYWNlKC8gezJ9L2csICcgJyk7XG5cdFx0cmV0dXJuIGNvbnN0cnVjdG9yUmVnZXgudGVzdChzcGFjZVN0cmlwcGVkKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTsgLy8gbm90IGEgZnVuY3Rpb25cblx0fVxufTtcblxudmFyIHRyeUZ1bmN0aW9uT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmbkNsYXNzID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbnZhciBnZW5DbGFzcyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoaGFzVG9TdHJpbmdUYWcpIHsgcmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTsgfVxuXHRpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0dmFyIHN0ckNsYXNzID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHJldHVybiBzdHJDbGFzcyA9PT0gZm5DbGFzcyB8fCBzdHJDbGFzcyA9PT0gZ2VuQ2xhc3M7XG59O1xuIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/helpers/isPrimitive.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/helpers/isPrimitive.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nmodule.exports = function isPrimitive(value) {\n\treturn value === null || typeof value !== 'function' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzUHJpbWl0aXZlLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc1ByaW1pdGl2ZSIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFDNUMsUUFBT0EsVUFBVSxJQUFWLElBQW1CLE9BQU9BLEtBQVAsS0FBaUIsVUFBakIsSUFBK0IsUUFBT0EsS0FBUCx5Q0FBT0EsS0FBUCxPQUFpQixRQUExRTtBQUNBLENBRkQiLCJmaWxlIjoiaXNQcmltaXRpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpO1xufTtcbiJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-regex/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-regex/index.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar has = require('has');\nvar regexExec = RegExp.prototype.exec;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar tryRegexExecCall = function tryRegexExec(value) {\n\ttry {\n\t\tvar lastIndex = value.lastIndex;\n\t\tvalue.lastIndex = 0;\n\n\t\tregexExec.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\tvalue.lastIndex = lastIndex;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar regexClass = '[object RegExp]';\nvar hasToStringTag = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';\n\nmodule.exports = function isRegex(value) {\n\tif (!value || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n\t\treturn false;\n\t}\n\tif (!hasToStringTag) {\n\t\treturn toStr.call(value) === regexClass;\n\t}\n\n\tvar descriptor = gOPD(value, 'lastIndex');\n\tvar hasLastIndexDataProperty = descriptor && has(descriptor, 'value');\n\tif (!hasLastIndexDataProperty) {\n\t\treturn false;\n\t}\n\n\treturn tryRegexExecCall(value);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImhhcyIsInJlcXVpcmUiLCJyZWdleEV4ZWMiLCJSZWdFeHAiLCJwcm90b3R5cGUiLCJleGVjIiwiZ09QRCIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRyeVJlZ2V4RXhlY0NhbGwiLCJ0cnlSZWdleEV4ZWMiLCJ2YWx1ZSIsImxhc3RJbmRleCIsImNhbGwiLCJlIiwidG9TdHIiLCJ0b1N0cmluZyIsInJlZ2V4Q2xhc3MiLCJoYXNUb1N0cmluZ1RhZyIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUmVnZXgiLCJkZXNjcmlwdG9yIiwiaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQUlBLE1BQU1DLFFBQVEsS0FBUixDQUFWO0FBQ0EsSUFBSUMsWUFBWUMsT0FBT0MsU0FBUCxDQUFpQkMsSUFBakM7QUFDQSxJQUFJQyxPQUFPQyxPQUFPQyx3QkFBbEI7O0FBRUEsSUFBSUMsbUJBQW1CLFNBQVNDLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0FBQ25ELEtBQUk7QUFDSCxNQUFJQyxZQUFZRCxNQUFNQyxTQUF0QjtBQUNBRCxRQUFNQyxTQUFOLEdBQWtCLENBQWxCOztBQUVBVixZQUFVVyxJQUFWLENBQWVGLEtBQWY7QUFDQSxTQUFPLElBQVA7QUFDQSxFQU5ELENBTUUsT0FBT0csQ0FBUCxFQUFVO0FBQ1gsU0FBTyxLQUFQO0FBQ0EsRUFSRCxTQVFVO0FBQ1RILFFBQU1DLFNBQU4sR0FBa0JBLFNBQWxCO0FBQ0E7QUFDRCxDQVpEO0FBYUEsSUFBSUcsUUFBUVIsT0FBT0gsU0FBUCxDQUFpQlksUUFBN0I7QUFDQSxJQUFJQyxhQUFhLGlCQUFqQjtBQUNBLElBQUlDLGlCQUFpQixPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLFFBQU9BLE9BQU9DLFdBQWQsTUFBOEIsUUFBbkY7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsT0FBVCxDQUFpQlosS0FBakIsRUFBd0I7QUFDeEMsS0FBSSxDQUFDQSxLQUFELElBQVUsUUFBT0EsS0FBUCx5Q0FBT0EsS0FBUCxPQUFpQixRQUEvQixFQUF5QztBQUN4QyxTQUFPLEtBQVA7QUFDQTtBQUNELEtBQUksQ0FBQ08sY0FBTCxFQUFxQjtBQUNwQixTQUFPSCxNQUFNRixJQUFOLENBQVdGLEtBQVgsTUFBc0JNLFVBQTdCO0FBQ0E7O0FBRUQsS0FBSU8sYUFBYWxCLEtBQUtLLEtBQUwsRUFBWSxXQUFaLENBQWpCO0FBQ0EsS0FBSWMsMkJBQTJCRCxjQUFjeEIsSUFBSXdCLFVBQUosRUFBZ0IsT0FBaEIsQ0FBN0M7QUFDQSxLQUFJLENBQUNDLHdCQUFMLEVBQStCO0FBQzlCLFNBQU8sS0FBUDtBQUNBOztBQUVELFFBQU9oQixpQkFBaUJFLEtBQWpCLENBQVA7QUFDQSxDQWZEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgcmVnZXhFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgdHJ5UmVnZXhFeGVjQ2FsbCA9IGZ1bmN0aW9uIHRyeVJlZ2V4RXhlYyh2YWx1ZSkge1xuXHR0cnkge1xuXHRcdHZhciBsYXN0SW5kZXggPSB2YWx1ZS5sYXN0SW5kZXg7XG5cdFx0dmFsdWUubGFzdEluZGV4ID0gMDtcblxuXHRcdHJlZ2V4RXhlYy5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHR2YWx1ZS5sYXN0SW5kZXggPSBsYXN0SW5kZXg7XG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHJlZ2V4Q2xhc3MgPSAnW29iamVjdCBSZWdFeHBdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHJldHVybiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gcmVnZXhDbGFzcztcblx0fVxuXG5cdHZhciBkZXNjcmlwdG9yID0gZ09QRCh2YWx1ZSwgJ2xhc3RJbmRleCcpO1xuXHR2YXIgaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBoYXMoZGVzY3JpcHRvciwgJ3ZhbHVlJyk7XG5cdGlmICghaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5KSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRyeVJlZ2V4RXhlY0NhbGwodmFsdWUpO1xufTtcbiJdfQ==","deps":{"has":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/has/src/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-symbol/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-symbol/index.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar toStr = Object.prototype.toString;\nvar hasSymbols = typeof Symbol === 'function' && _typeof(Symbol()) === 'symbol';\n\nif (hasSymbols) {\n\tvar symToStr = Symbol.prototype.toString;\n\tvar symStringRegex = /^Symbol\\(.*\\)$/;\n\tvar isSymbolObject = function isSymbolObject(value) {\n\t\tif (_typeof(value.valueOf()) !== 'symbol') {\n\t\t\treturn false;\n\t\t}\n\t\treturn symStringRegex.test(symToStr.call(value));\n\t};\n\tmodule.exports = function isSymbol(value) {\n\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol') {\n\t\t\treturn true;\n\t\t}\n\t\tif (toStr.call(value) !== '[object Symbol]') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn isSymbolObject(value);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n} else {\n\tmodule.exports = function isSymbol(value) {\n\t\t// this environment does not support Symbols.\n\t\treturn false;\n\t};\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInRvU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJoYXNTeW1ib2xzIiwiU3ltYm9sIiwic3ltVG9TdHIiLCJzeW1TdHJpbmdSZWdleCIsImlzU3ltYm9sT2JqZWN0IiwidmFsdWUiLCJ2YWx1ZU9mIiwidGVzdCIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNTeW1ib2wiLCJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQUlBLFFBQVFDLE9BQU9DLFNBQVAsQ0FBaUJDLFFBQTdCO0FBQ0EsSUFBSUMsYUFBYSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLFFBQU9BLFFBQVAsTUFBb0IsUUFBckU7O0FBRUEsSUFBSUQsVUFBSixFQUFnQjtBQUNmLEtBQUlFLFdBQVdELE9BQU9ILFNBQVAsQ0FBaUJDLFFBQWhDO0FBQ0EsS0FBSUksaUJBQWlCLGdCQUFyQjtBQUNBLEtBQUlDLGlCQUFpQixTQUFTQSxjQUFULENBQXdCQyxLQUF4QixFQUErQjtBQUNuRCxNQUFJLFFBQU9BLE1BQU1DLE9BQU4sRUFBUCxNQUEyQixRQUEvQixFQUF5QztBQUFFLFVBQU8sS0FBUDtBQUFlO0FBQzFELFNBQU9ILGVBQWVJLElBQWYsQ0FBb0JMLFNBQVNNLElBQVQsQ0FBY0gsS0FBZCxDQUFwQixDQUFQO0FBQ0EsRUFIRDtBQUlBSSxRQUFPQyxPQUFQLEdBQWlCLFNBQVNDLFFBQVQsQ0FBa0JOLEtBQWxCLEVBQXlCO0FBQ3pDLE1BQUksUUFBT0EsS0FBUCx5Q0FBT0EsS0FBUCxPQUFpQixRQUFyQixFQUErQjtBQUFFLFVBQU8sSUFBUDtBQUFjO0FBQy9DLE1BQUlULE1BQU1ZLElBQU4sQ0FBV0gsS0FBWCxNQUFzQixpQkFBMUIsRUFBNkM7QUFBRSxVQUFPLEtBQVA7QUFBZTtBQUM5RCxNQUFJO0FBQ0gsVUFBT0QsZUFBZUMsS0FBZixDQUFQO0FBQ0EsR0FGRCxDQUVFLE9BQU9PLENBQVAsRUFBVTtBQUNYLFVBQU8sS0FBUDtBQUNBO0FBQ0QsRUFSRDtBQVNBLENBaEJELE1BZ0JPO0FBQ05ILFFBQU9DLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQk4sS0FBbEIsRUFBeUI7QUFDekM7QUFDQSxTQUFPLEtBQVA7QUFDQSxFQUhEO0FBSUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgpID09PSAnc3ltYm9sJztcblxuaWYgKGhhc1N5bWJvbHMpIHtcblx0dmFyIHN5bVRvU3RyID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIHN5bVN0cmluZ1JlZ2V4ID0gL15TeW1ib2xcXCguKlxcKSQvO1xuXHR2YXIgaXNTeW1ib2xPYmplY3QgPSBmdW5jdGlvbiBpc1N5bWJvbE9iamVjdCh2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUudmFsdWVPZigpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRyZXR1cm4gc3ltU3RyaW5nUmVnZXgudGVzdChzeW1Ub1N0ci5jYWxsKHZhbHVlKSk7XG5cdH07XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXHRcdGlmICh0b1N0ci5jYWxsKHZhbHVlKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBpc1N5bWJvbE9iamVjdCh2YWx1ZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHQvLyB0aGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgU3ltYm9scy5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-date-object/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-date-object/index.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar getDay = Date.prototype.getDay;\nvar tryDateObject = function tryDateObject(value) {\n\ttry {\n\t\tgetDay.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nvar toStr = Object.prototype.toString;\nvar dateClass = '[object Date]';\nvar hasToStringTag = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';\n\nmodule.exports = function isDateObject(value) {\n\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\treturn hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImdldERheSIsIkRhdGUiLCJwcm90b3R5cGUiLCJ0cnlEYXRlT2JqZWN0IiwidmFsdWUiLCJjYWxsIiwiZSIsInRvU3RyIiwiT2JqZWN0IiwidG9TdHJpbmciLCJkYXRlQ2xhc3MiLCJoYXNUb1N0cmluZ1RhZyIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzRGF0ZU9iamVjdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFJQSxTQUFTQyxLQUFLQyxTQUFMLENBQWVGLE1BQTVCO0FBQ0EsSUFBSUcsZ0JBQWdCLFNBQVNBLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQThCO0FBQ2pELEtBQUk7QUFDSEosU0FBT0ssSUFBUCxDQUFZRCxLQUFaO0FBQ0EsU0FBTyxJQUFQO0FBQ0EsRUFIRCxDQUdFLE9BQU9FLENBQVAsRUFBVTtBQUNYLFNBQU8sS0FBUDtBQUNBO0FBQ0QsQ0FQRDs7QUFTQSxJQUFJQyxRQUFRQyxPQUFPTixTQUFQLENBQWlCTyxRQUE3QjtBQUNBLElBQUlDLFlBQVksZUFBaEI7QUFDQSxJQUFJQyxpQkFBaUIsT0FBT0MsTUFBUCxLQUFrQixVQUFsQixJQUFnQyxRQUFPQSxPQUFPQyxXQUFkLE1BQThCLFFBQW5GOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLFlBQVQsQ0FBc0JaLEtBQXRCLEVBQTZCO0FBQzdDLEtBQUksUUFBT0EsS0FBUCx5Q0FBT0EsS0FBUCxPQUFpQixRQUFqQixJQUE2QkEsVUFBVSxJQUEzQyxFQUFpRDtBQUFFLFNBQU8sS0FBUDtBQUFlO0FBQ2xFLFFBQU9PLGlCQUFpQlIsY0FBY0MsS0FBZCxDQUFqQixHQUF3Q0csTUFBTUYsSUFBTixDQUFXRCxLQUFYLE1BQXNCTSxTQUFyRTtBQUNBLENBSEQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBnZXREYXkgPSBEYXRlLnByb3RvdHlwZS5nZXREYXk7XG52YXIgdHJ5RGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHRyeURhdGVPYmplY3QodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRnZXREYXkuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGF0ZUNsYXNzID0gJ1tvYmplY3QgRGF0ZV0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0RhdGVPYmplY3QodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeURhdGVPYmplY3QodmFsdWUpIDogdG9TdHIuY2FsbCh2YWx1ZSkgPT09IGRhdGVDbGFzcztcbn07XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/es6.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/es6.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar hasSymbols = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'symbol';\n\nvar isPrimitive = require('./helpers/isPrimitive');\nvar isCallable = require('is-callable');\nvar isDate = require('is-date-object');\nvar isSymbol = require('is-symbol');\n\nvar ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {\n\tif (typeof O === 'undefined' || O === null) {\n\t\tthrow new TypeError('Cannot call method on ' + O);\n\t}\n\tif (typeof hint !== 'string' || hint !== 'number' && hint !== 'string') {\n\t\tthrow new TypeError('hint must be \"string\" or \"number\"');\n\t}\n\tvar methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];\n\tvar method, result, i;\n\tfor (i = 0; i < methodNames.length; ++i) {\n\t\tmethod = O[methodNames[i]];\n\t\tif (isCallable(method)) {\n\t\t\tresult = method.call(O);\n\t\t\tif (isPrimitive(result)) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\tthrow new TypeError('No default value');\n};\n\nvar GetMethod = function GetMethod(O, P) {\n\tvar func = O[P];\n\tif (func !== null && typeof func !== 'undefined') {\n\t\tif (!isCallable(func)) {\n\t\t\tthrow new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');\n\t\t}\n\t\treturn func;\n\t}\n};\n\n// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive\nmodule.exports = function ToPrimitive(input, PreferredType) {\n\tif (isPrimitive(input)) {\n\t\treturn input;\n\t}\n\tvar hint = 'default';\n\tif (arguments.length > 1) {\n\t\tif (PreferredType === String) {\n\t\t\thint = 'string';\n\t\t} else if (PreferredType === Number) {\n\t\t\thint = 'number';\n\t\t}\n\t}\n\n\tvar exoticToPrim;\n\tif (hasSymbols) {\n\t\tif (Symbol.toPrimitive) {\n\t\t\texoticToPrim = GetMethod(input, Symbol.toPrimitive);\n\t\t} else if (isSymbol(input)) {\n\t\t\texoticToPrim = Symbol.prototype.valueOf;\n\t\t}\n\t}\n\tif (typeof exoticToPrim !== 'undefined') {\n\t\tvar result = exoticToPrim.call(input, hint);\n\t\tif (isPrimitive(result)) {\n\t\t\treturn result;\n\t\t}\n\t\tthrow new TypeError('unable to convert exotic object to primitive');\n\t}\n\tif (hint === 'default' && (isDate(input) || isSymbol(input))) {\n\t\thint = 'string';\n\t}\n\treturn ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi5qcyJdLCJuYW1lcyI6WyJoYXNTeW1ib2xzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJpc1ByaW1pdGl2ZSIsInJlcXVpcmUiLCJpc0NhbGxhYmxlIiwiaXNEYXRlIiwiaXNTeW1ib2wiLCJvcmRpbmFyeVRvUHJpbWl0aXZlIiwiT3JkaW5hcnlUb1ByaW1pdGl2ZSIsIk8iLCJoaW50IiwiVHlwZUVycm9yIiwibWV0aG9kTmFtZXMiLCJtZXRob2QiLCJyZXN1bHQiLCJpIiwibGVuZ3RoIiwiY2FsbCIsIkdldE1ldGhvZCIsIlAiLCJmdW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRvUHJpbWl0aXZlIiwiaW5wdXQiLCJQcmVmZXJyZWRUeXBlIiwiYXJndW1lbnRzIiwiU3RyaW5nIiwiTnVtYmVyIiwiZXhvdGljVG9QcmltIiwidG9QcmltaXRpdmUiLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQUlBLGFBQWEsT0FBT0MsTUFBUCxLQUFrQixVQUFsQixJQUFnQyxRQUFPQSxPQUFPQyxRQUFkLE1BQTJCLFFBQTVFOztBQUVBLElBQUlDLGNBQWNDLFFBQVEsdUJBQVIsQ0FBbEI7QUFDQSxJQUFJQyxhQUFhRCxRQUFRLGFBQVIsQ0FBakI7QUFDQSxJQUFJRSxTQUFTRixRQUFRLGdCQUFSLENBQWI7QUFDQSxJQUFJRyxXQUFXSCxRQUFRLFdBQVIsQ0FBZjs7QUFFQSxJQUFJSSxzQkFBc0IsU0FBU0MsbUJBQVQsQ0FBNkJDLENBQTdCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUMvRCxLQUFJLE9BQU9ELENBQVAsS0FBYSxXQUFiLElBQTRCQSxNQUFNLElBQXRDLEVBQTRDO0FBQzNDLFFBQU0sSUFBSUUsU0FBSixDQUFjLDJCQUEyQkYsQ0FBekMsQ0FBTjtBQUNBO0FBQ0QsS0FBSSxPQUFPQyxJQUFQLEtBQWdCLFFBQWhCLElBQTZCQSxTQUFTLFFBQVQsSUFBcUJBLFNBQVMsUUFBL0QsRUFBMEU7QUFDekUsUUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUNBO0FBQ0QsS0FBSUMsY0FBY0YsU0FBUyxRQUFULEdBQW9CLENBQUMsVUFBRCxFQUFhLFNBQWIsQ0FBcEIsR0FBOEMsQ0FBQyxTQUFELEVBQVksVUFBWixDQUFoRTtBQUNBLEtBQUlHLE1BQUosRUFBWUMsTUFBWixFQUFvQkMsQ0FBcEI7QUFDQSxNQUFLQSxJQUFJLENBQVQsRUFBWUEsSUFBSUgsWUFBWUksTUFBNUIsRUFBb0MsRUFBRUQsQ0FBdEMsRUFBeUM7QUFDeENGLFdBQVNKLEVBQUVHLFlBQVlHLENBQVosQ0FBRixDQUFUO0FBQ0EsTUFBSVgsV0FBV1MsTUFBWCxDQUFKLEVBQXdCO0FBQ3ZCQyxZQUFTRCxPQUFPSSxJQUFQLENBQVlSLENBQVosQ0FBVDtBQUNBLE9BQUlQLFlBQVlZLE1BQVosQ0FBSixFQUF5QjtBQUN4QixXQUFPQSxNQUFQO0FBQ0E7QUFDRDtBQUNEO0FBQ0QsT0FBTSxJQUFJSCxTQUFKLENBQWMsa0JBQWQsQ0FBTjtBQUNBLENBbkJEOztBQXFCQSxJQUFJTyxZQUFZLFNBQVNBLFNBQVQsQ0FBbUJULENBQW5CLEVBQXNCVSxDQUF0QixFQUF5QjtBQUN4QyxLQUFJQyxPQUFPWCxFQUFFVSxDQUFGLENBQVg7QUFDQSxLQUFJQyxTQUFTLElBQVQsSUFBaUIsT0FBT0EsSUFBUCxLQUFnQixXQUFyQyxFQUFrRDtBQUNqRCxNQUFJLENBQUNoQixXQUFXZ0IsSUFBWCxDQUFMLEVBQXVCO0FBQ3RCLFNBQU0sSUFBSVQsU0FBSixDQUFjUyxPQUFPLHlCQUFQLEdBQW1DRCxDQUFuQyxHQUF1QyxhQUF2QyxHQUF1RFYsQ0FBdkQsR0FBMkQsb0JBQXpFLENBQU47QUFDQTtBQUNELFNBQU9XLElBQVA7QUFDQTtBQUNELENBUkQ7O0FBVUE7QUFDQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxXQUFULENBQXFCQyxLQUFyQixFQUE0QkMsYUFBNUIsRUFBMkM7QUFDM0QsS0FBSXZCLFlBQVlzQixLQUFaLENBQUosRUFBd0I7QUFDdkIsU0FBT0EsS0FBUDtBQUNBO0FBQ0QsS0FBSWQsT0FBTyxTQUFYO0FBQ0EsS0FBSWdCLFVBQVVWLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDekIsTUFBSVMsa0JBQWtCRSxNQUF0QixFQUE4QjtBQUM3QmpCLFVBQU8sUUFBUDtBQUNBLEdBRkQsTUFFTyxJQUFJZSxrQkFBa0JHLE1BQXRCLEVBQThCO0FBQ3BDbEIsVUFBTyxRQUFQO0FBQ0E7QUFDRDs7QUFFRCxLQUFJbUIsWUFBSjtBQUNBLEtBQUk5QixVQUFKLEVBQWdCO0FBQ2YsTUFBSUMsT0FBTzhCLFdBQVgsRUFBd0I7QUFDdkJELGtCQUFlWCxVQUFVTSxLQUFWLEVBQWlCeEIsT0FBTzhCLFdBQXhCLENBQWY7QUFDQSxHQUZELE1BRU8sSUFBSXhCLFNBQVNrQixLQUFULENBQUosRUFBcUI7QUFDM0JLLGtCQUFlN0IsT0FBTytCLFNBQVAsQ0FBaUJDLE9BQWhDO0FBQ0E7QUFDRDtBQUNELEtBQUksT0FBT0gsWUFBUCxLQUF3QixXQUE1QixFQUF5QztBQUN4QyxNQUFJZixTQUFTZSxhQUFhWixJQUFiLENBQWtCTyxLQUFsQixFQUF5QmQsSUFBekIsQ0FBYjtBQUNBLE1BQUlSLFlBQVlZLE1BQVosQ0FBSixFQUF5QjtBQUN4QixVQUFPQSxNQUFQO0FBQ0E7QUFDRCxRQUFNLElBQUlILFNBQUosQ0FBYyw4Q0FBZCxDQUFOO0FBQ0E7QUFDRCxLQUFJRCxTQUFTLFNBQVQsS0FBdUJMLE9BQU9tQixLQUFQLEtBQWlCbEIsU0FBU2tCLEtBQVQsQ0FBeEMsQ0FBSixFQUE4RDtBQUM3RGQsU0FBTyxRQUFQO0FBQ0E7QUFDRCxRQUFPSCxvQkFBb0JpQixLQUFwQixFQUEyQmQsU0FBUyxTQUFULEdBQXFCLFFBQXJCLEdBQWdDQSxJQUEzRCxDQUFQO0FBQ0EsQ0FoQ0QiLCJmaWxlIjoiZXM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCc7XG5cbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xudmFyIGlzRGF0ZSA9IHJlcXVpcmUoJ2lzLWRhdGUtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCdpcy1zeW1ib2wnKTtcblxudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSBmdW5jdGlvbiBPcmRpbmFyeVRvUHJpbWl0aXZlKE8sIGhpbnQpIHtcblx0aWYgKHR5cGVvZiBPID09PSAndW5kZWZpbmVkJyB8fCBPID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyBPKTtcblx0fVxuXHRpZiAodHlwZW9mIGhpbnQgIT09ICdzdHJpbmcnIHx8IChoaW50ICE9PSAnbnVtYmVyJyAmJiBoaW50ICE9PSAnc3RyaW5nJykpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdoaW50IG11c3QgYmUgXCJzdHJpbmdcIiBvciBcIm51bWJlclwiJyk7XG5cdH1cblx0dmFyIG1ldGhvZE5hbWVzID0gaGludCA9PT0gJ3N0cmluZycgPyBbJ3RvU3RyaW5nJywgJ3ZhbHVlT2YnXSA6IFsndmFsdWVPZicsICd0b1N0cmluZyddO1xuXHR2YXIgbWV0aG9kLCByZXN1bHQsIGk7XG5cdGZvciAoaSA9IDA7IGkgPCBtZXRob2ROYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdG1ldGhvZCA9IE9bbWV0aG9kTmFtZXNbaV1dO1xuXHRcdGlmIChpc0NhbGxhYmxlKG1ldGhvZCkpIHtcblx0XHRcdHJlc3VsdCA9IG1ldGhvZC5jYWxsKE8pO1xuXHRcdFx0aWYgKGlzUHJpbWl0aXZlKHJlc3VsdCkpIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0dGhyb3cgbmV3IFR5cGVFcnJvcignTm8gZGVmYXVsdCB2YWx1ZScpO1xufTtcblxudmFyIEdldE1ldGhvZCA9IGZ1bmN0aW9uIEdldE1ldGhvZChPLCBQKSB7XG5cdHZhciBmdW5jID0gT1tQXTtcblx0aWYgKGZ1bmMgIT09IG51bGwgJiYgdHlwZW9mIGZ1bmMgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0aWYgKCFpc0NhbGxhYmxlKGZ1bmMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGZ1bmMgKyAnIHJldHVybmVkIGZvciBwcm9wZXJ0eSAnICsgUCArICcgb2Ygb2JqZWN0ICcgKyBPICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRyZXR1cm4gZnVuYztcblx0fVxufTtcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0LCBQcmVmZXJyZWRUeXBlKSB7XG5cdGlmIChpc1ByaW1pdGl2ZShpbnB1dCkpIHtcblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cblx0dmFyIGhpbnQgPSAnZGVmYXVsdCc7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdGlmIChQcmVmZXJyZWRUeXBlID09PSBTdHJpbmcpIHtcblx0XHRcdGhpbnQgPSAnc3RyaW5nJztcblx0XHR9IGVsc2UgaWYgKFByZWZlcnJlZFR5cGUgPT09IE51bWJlcikge1xuXHRcdFx0aGludCA9ICdudW1iZXInO1xuXHRcdH1cblx0fVxuXG5cdHZhciBleG90aWNUb1ByaW07XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0aWYgKFN5bWJvbC50b1ByaW1pdGl2ZSkge1xuXHRcdFx0ZXhvdGljVG9QcmltID0gR2V0TWV0aG9kKGlucHV0LCBTeW1ib2wudG9QcmltaXRpdmUpO1xuXHRcdH0gZWxzZSBpZiAoaXNTeW1ib2woaW5wdXQpKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2Y7XG5cdFx0fVxuXHR9XG5cdGlmICh0eXBlb2YgZXhvdGljVG9QcmltICE9PSAndW5kZWZpbmVkJykge1xuXHRcdHZhciByZXN1bHQgPSBleG90aWNUb1ByaW0uY2FsbChpbnB1dCwgaGludCk7XG5cdFx0aWYgKGlzUHJpbWl0aXZlKHJlc3VsdCkpIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuYWJsZSB0byBjb252ZXJ0IGV4b3RpYyBvYmplY3QgdG8gcHJpbWl0aXZlJyk7XG5cdH1cblx0aWYgKGhpbnQgPT09ICdkZWZhdWx0JyAmJiAoaXNEYXRlKGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpKSB7XG5cdFx0aGludCA9ICdzdHJpbmcnO1xuXHR9XG5cdHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBoaW50ID09PSAnZGVmYXVsdCcgPyAnbnVtYmVyJyA6IGhpbnQpO1xufTtcbiJdfQ==","deps":{"is-callable":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-callable/index.js","./helpers/isPrimitive":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/helpers/isPrimitive.js","is-symbol":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-symbol/index.js","is-date-object":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-date-object/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/es5.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/es5.js","source":"'use strict';\n\nvar toStr = Object.prototype.toString;\n\nvar isPrimitive = require('./helpers/isPrimitive');\n\nvar isCallable = require('is-callable');\n\n// https://es5.github.io/#x8.12\nvar ES5internalSlots = {\n\t'[[DefaultValue]]': function DefaultValue(O, hint) {\n\t\tvar actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);\n\n\t\tif (actualHint === String || actualHint === Number) {\n\t\t\tvar methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];\n\t\t\tvar value, i;\n\t\t\tfor (i = 0; i < methods.length; ++i) {\n\t\t\t\tif (isCallable(O[methods[i]])) {\n\t\t\t\t\tvalue = O[methods[i]]();\n\t\t\t\t\tif (isPrimitive(value)) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new TypeError('No default value');\n\t\t}\n\t\tthrow new TypeError('invalid [[DefaultValue]] hint supplied');\n\t}\n};\n\n// https://es5.github.io/#x9\nmodule.exports = function ToPrimitive(input, PreferredType) {\n\tif (isPrimitive(input)) {\n\t\treturn input;\n\t}\n\treturn ES5internalSlots['[[DefaultValue]]'](input, PreferredType);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNS5qcyJdLCJuYW1lcyI6WyJ0b1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiaXNQcmltaXRpdmUiLCJyZXF1aXJlIiwiaXNDYWxsYWJsZSIsIkVTNWludGVybmFsU2xvdHMiLCJPIiwiaGludCIsImFjdHVhbEhpbnQiLCJjYWxsIiwiU3RyaW5nIiwiTnVtYmVyIiwibWV0aG9kcyIsInZhbHVlIiwiaSIsImxlbmd0aCIsIlR5cGVFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJUb1ByaW1pdGl2ZSIsImlucHV0IiwiUHJlZmVycmVkVHlwZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsT0FBT0MsU0FBUCxDQUFpQkMsUUFBN0I7O0FBRUEsSUFBSUMsY0FBY0MsUUFBUSx1QkFBUixDQUFsQjs7QUFFQSxJQUFJQyxhQUFhRCxRQUFRLGFBQVIsQ0FBakI7O0FBRUE7QUFDQSxJQUFJRSxtQkFBbUI7QUFDdEIscUJBQW9CLHNCQUFVQyxDQUFWLEVBQWFDLElBQWIsRUFBbUI7QUFDdEMsTUFBSUMsYUFBYUQsU0FBU1QsTUFBTVcsSUFBTixDQUFXSCxDQUFYLE1BQWtCLGVBQWxCLEdBQW9DSSxNQUFwQyxHQUE2Q0MsTUFBdEQsQ0FBakI7O0FBRUEsTUFBSUgsZUFBZUUsTUFBZixJQUF5QkYsZUFBZUcsTUFBNUMsRUFBb0Q7QUFDbkQsT0FBSUMsVUFBVUosZUFBZUUsTUFBZixHQUF3QixDQUFDLFVBQUQsRUFBYSxTQUFiLENBQXhCLEdBQWtELENBQUMsU0FBRCxFQUFZLFVBQVosQ0FBaEU7QUFDQSxPQUFJRyxLQUFKLEVBQVdDLENBQVg7QUFDQSxRQUFLQSxJQUFJLENBQVQsRUFBWUEsSUFBSUYsUUFBUUcsTUFBeEIsRUFBZ0MsRUFBRUQsQ0FBbEMsRUFBcUM7QUFDcEMsUUFBSVYsV0FBV0UsRUFBRU0sUUFBUUUsQ0FBUixDQUFGLENBQVgsQ0FBSixFQUErQjtBQUM5QkQsYUFBUVAsRUFBRU0sUUFBUUUsQ0FBUixDQUFGLEdBQVI7QUFDQSxTQUFJWixZQUFZVyxLQUFaLENBQUosRUFBd0I7QUFDdkIsYUFBT0EsS0FBUDtBQUNBO0FBQ0Q7QUFDRDtBQUNELFNBQU0sSUFBSUcsU0FBSixDQUFjLGtCQUFkLENBQU47QUFDQTtBQUNELFFBQU0sSUFBSUEsU0FBSixDQUFjLHdDQUFkLENBQU47QUFDQTtBQWxCcUIsQ0FBdkI7O0FBcUJBO0FBQ0FDLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEJDLGFBQTVCLEVBQTJDO0FBQzNELEtBQUluQixZQUFZa0IsS0FBWixDQUFKLEVBQXdCO0FBQ3ZCLFNBQU9BLEtBQVA7QUFDQTtBQUNELFFBQU9mLGlCQUFpQixrQkFBakIsRUFBcUNlLEtBQXJDLEVBQTRDQyxhQUE1QyxDQUFQO0FBQ0EsQ0FMRCIsImZpbGUiOiJlczUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xuXG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG5cbi8vIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDguMTJcbnZhciBFUzVpbnRlcm5hbFNsb3RzID0ge1xuXHQnW1tEZWZhdWx0VmFsdWVdXSc6IGZ1bmN0aW9uIChPLCBoaW50KSB7XG5cdFx0dmFyIGFjdHVhbEhpbnQgPSBoaW50IHx8ICh0b1N0ci5jYWxsKE8pID09PSAnW29iamVjdCBEYXRlXScgPyBTdHJpbmcgOiBOdW1iZXIpO1xuXG5cdFx0aWYgKGFjdHVhbEhpbnQgPT09IFN0cmluZyB8fCBhY3R1YWxIaW50ID09PSBOdW1iZXIpIHtcblx0XHRcdHZhciBtZXRob2RzID0gYWN0dWFsSGludCA9PT0gU3RyaW5nID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0XHRcdHZhciB2YWx1ZSwgaTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBtZXRob2RzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGlmIChpc0NhbGxhYmxlKE9bbWV0aG9kc1tpXV0pKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBPW21ldGhvZHNbaV1dKCk7XG5cdFx0XHRcdFx0aWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignTm8gZGVmYXVsdCB2YWx1ZScpO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIFtbRGVmYXVsdFZhbHVlXV0gaGludCBzdXBwbGllZCcpO1xuXHR9XG59O1xuXG4vLyBodHRwczovL2VzNS5naXRodWIuaW8vI3g5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0LCBQcmVmZXJyZWRUeXBlKSB7XG5cdGlmIChpc1ByaW1pdGl2ZShpbnB1dCkpIHtcblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cblx0cmV0dXJuIEVTNWludGVybmFsU2xvdHNbJ1tbRGVmYXVsdFZhbHVlXV0nXShpbnB1dCwgUHJlZmVycmVkVHlwZSk7XG59O1xuIl19","deps":{"is-callable":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-callable/index.js","./helpers/isPrimitive":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/helpers/isPrimitive.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es5.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es5.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar $isNaN = require('./helpers/isNaN');\nvar $isFinite = require('./helpers/isFinite');\n\nvar sign = require('./helpers/sign');\nvar mod = require('./helpers/mod');\n\nvar IsCallable = require('is-callable');\nvar toPrimitive = require('es-to-primitive/es5');\n\nvar has = require('has');\n\n// https://es5.github.io/#x9\nvar ES5 = {\n\tToPrimitive: toPrimitive,\n\n\tToBoolean: function ToBoolean(value) {\n\t\treturn !!value;\n\t},\n\tToNumber: function ToNumber(value) {\n\t\treturn Number(value);\n\t},\n\tToInteger: function ToInteger(value) {\n\t\tvar number = this.ToNumber(value);\n\t\tif ($isNaN(number)) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (number === 0 || !$isFinite(number)) {\n\t\t\treturn number;\n\t\t}\n\t\treturn sign(number) * Math.floor(Math.abs(number));\n\t},\n\tToInt32: function ToInt32(x) {\n\t\treturn this.ToNumber(x) >> 0;\n\t},\n\tToUint32: function ToUint32(x) {\n\t\treturn this.ToNumber(x) >>> 0;\n\t},\n\tToUint16: function ToUint16(value) {\n\t\tvar number = this.ToNumber(value);\n\t\tif ($isNaN(number) || number === 0 || !$isFinite(number)) {\n\t\t\treturn 0;\n\t\t}\n\t\tvar posInt = sign(number) * Math.floor(Math.abs(number));\n\t\treturn mod(posInt, 0x10000);\n\t},\n\tToString: function ToString(value) {\n\t\treturn String(value);\n\t},\n\tToObject: function ToObject(value) {\n\t\tthis.CheckObjectCoercible(value);\n\t\treturn Object(value);\n\t},\n\tCheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {\n\t\t/* jshint eqnull:true */\n\t\tif (value == null) {\n\t\t\tthrow new TypeError(optMessage || 'Cannot call method on ' + value);\n\t\t}\n\t\treturn value;\n\t},\n\tIsCallable: IsCallable,\n\tSameValue: function SameValue(x, y) {\n\t\tif (x === y) {\n\t\t\t// 0 === -0, but they are not identical.\n\t\t\tif (x === 0) {\n\t\t\t\treturn 1 / x === 1 / y;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn $isNaN(x) && $isNaN(y);\n\t},\n\n\t// http://www.ecma-international.org/ecma-262/5.1/#sec-8\n\tType: function Type(x) {\n\t\tif (x === null) {\n\t\t\treturn 'Null';\n\t\t}\n\t\tif (typeof x === 'undefined') {\n\t\t\treturn 'Undefined';\n\t\t}\n\t\tif (typeof x === 'function' || (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {\n\t\t\treturn 'Object';\n\t\t}\n\t\tif (typeof x === 'number') {\n\t\t\treturn 'Number';\n\t\t}\n\t\tif (typeof x === 'boolean') {\n\t\t\treturn 'Boolean';\n\t\t}\n\t\tif (typeof x === 'string') {\n\t\t\treturn 'String';\n\t\t}\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type\n\tIsPropertyDescriptor: function IsPropertyDescriptor(Desc) {\n\t\tif (this.Type(Desc) !== 'Object') {\n\t\t\treturn false;\n\t\t}\n\t\tvar allowed = {\n\t\t\t'[[Configurable]]': true,\n\t\t\t'[[Enumerable]]': true,\n\t\t\t'[[Get]]': true,\n\t\t\t'[[Set]]': true,\n\t\t\t'[[Value]]': true,\n\t\t\t'[[Writable]]': true\n\t\t};\n\t\t// jscs:disable\n\t\tfor (var key in Desc) {\n\t\t\t// eslint-disable-line\n\t\t\tif (has(Desc, key) && !allowed[key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// jscs:enable\n\t\tvar isData = has(Desc, '[[Value]]');\n\t\tvar IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\n\t\tif (isData && IsAccessor) {\n\t\t\tthrow new TypeError('Property Descriptors may not be both accessor and data descriptors');\n\t\t}\n\t\treturn true;\n\t},\n\n\t// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1\n\tIsAccessorDescriptor: function IsAccessorDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2\n\tIsDataDescriptor: function IsDataDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3\n\tIsGenericDescriptor: function IsGenericDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4\n\tFromPropertyDescriptor: function FromPropertyDescriptor(Desc) {\n\t\tif (typeof Desc === 'undefined') {\n\t\t\treturn Desc;\n\t\t}\n\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (this.IsDataDescriptor(Desc)) {\n\t\t\treturn {\n\t\t\t\tvalue: Desc['[[Value]]'],\n\t\t\t\twritable: !!Desc['[[Writable]]'],\n\t\t\t\tenumerable: !!Desc['[[Enumerable]]'],\n\t\t\t\tconfigurable: !!Desc['[[Configurable]]']\n\t\t\t};\n\t\t} else if (this.IsAccessorDescriptor(Desc)) {\n\t\t\treturn {\n\t\t\t\tget: Desc['[[Get]]'],\n\t\t\t\tset: Desc['[[Set]]'],\n\t\t\t\tenumerable: !!Desc['[[Enumerable]]'],\n\t\t\t\tconfigurable: !!Desc['[[Configurable]]']\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');\n\t\t}\n\t},\n\n\t// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5\n\tToPropertyDescriptor: function ToPropertyDescriptor(Obj) {\n\t\tif (this.Type(Obj) !== 'Object') {\n\t\t\tthrow new TypeError('ToPropertyDescriptor requires an object');\n\t\t}\n\n\t\tvar desc = {};\n\t\tif (has(Obj, 'enumerable')) {\n\t\t\tdesc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);\n\t\t}\n\t\tif (has(Obj, 'configurable')) {\n\t\t\tdesc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);\n\t\t}\n\t\tif (has(Obj, 'value')) {\n\t\t\tdesc['[[Value]]'] = Obj.value;\n\t\t}\n\t\tif (has(Obj, 'writable')) {\n\t\t\tdesc['[[Writable]]'] = this.ToBoolean(Obj.writable);\n\t\t}\n\t\tif (has(Obj, 'get')) {\n\t\t\tvar getter = Obj.get;\n\t\t\tif (typeof getter !== 'undefined' && !this.IsCallable(getter)) {\n\t\t\t\tthrow new TypeError('getter must be a function');\n\t\t\t}\n\t\t\tdesc['[[Get]]'] = getter;\n\t\t}\n\t\tif (has(Obj, 'set')) {\n\t\t\tvar setter = Obj.set;\n\t\t\tif (typeof setter !== 'undefined' && !this.IsCallable(setter)) {\n\t\t\t\tthrow new TypeError('setter must be a function');\n\t\t\t}\n\t\t\tdesc['[[Set]]'] = setter;\n\t\t}\n\n\t\tif ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {\n\t\t\tthrow new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');\n\t\t}\n\t\treturn desc;\n\t}\n};\n\nmodule.exports = ES5;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"has":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/has/src/index.js","./helpers/isNaN":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isNaN.js","./helpers/isFinite":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isFinite.js","./helpers/sign":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/sign.js","./helpers/mod":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/mod.js","is-callable":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-callable/index.js","es-to-primitive/es5":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/es5.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es2015.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es2015.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar has = require('has');\nvar toPrimitive = require('es-to-primitive/es6');\n\nvar toStr = Object.prototype.toString;\nvar hasSymbols = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'symbol';\n\nvar $isNaN = require('./helpers/isNaN');\nvar $isFinite = require('./helpers/isFinite');\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\nvar assign = require('./helpers/assign');\nvar sign = require('./helpers/sign');\nvar mod = require('./helpers/mod');\nvar isPrimitive = require('./helpers/isPrimitive');\nvar parseInteger = parseInt;\nvar bind = require('function-bind');\nvar arraySlice = bind.call(Function.call, Array.prototype.slice);\nvar strSlice = bind.call(Function.call, String.prototype.slice);\nvar isBinary = bind.call(Function.call, RegExp.prototype.test, /^0b[01]+$/i);\nvar isOctal = bind.call(Function.call, RegExp.prototype.test, /^0o[0-7]+$/i);\nvar regexExec = bind.call(Function.call, RegExp.prototype.exec);\nvar nonWS = ['\\x85', '\\u200B', '\\uFFFE'].join('');\nvar nonWSregex = new RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = bind.call(Function.call, RegExp.prototype.test, nonWSregex);\nvar invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;\nvar isInvalidHexLiteral = bind.call(Function.call, RegExp.prototype.test, invalidHexLiteral);\n\n// whitespace from: http://es5.github.io/#x15.5.4.20\n// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324\nvar ws = ['\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003', '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028', '\\u2029\\uFEFF'].join('');\nvar trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');\nvar replace = bind.call(Function.call, String.prototype.replace);\nvar trim = function trim(value) {\n\treturn replace(value, trimRegex, '');\n};\n\nvar ES5 = require('./es5');\n\nvar hasRegExpMatcher = require('is-regex');\n\n// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-operations\nvar ES6 = assign(assign({}, ES5), {\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-call-f-v-args\n\tCall: function Call(F, V) {\n\t\tvar args = arguments.length > 2 ? arguments[2] : [];\n\t\tif (!this.IsCallable(F)) {\n\t\t\tthrow new TypeError(F + ' is not a function');\n\t\t}\n\t\treturn F.apply(V, args);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toprimitive\n\tToPrimitive: toPrimitive,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toboolean\n\t// ToBoolean: ES5.ToBoolean,\n\n\t// http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber\n\tToNumber: function ToNumber(argument) {\n\t\tvar value = isPrimitive(argument) ? argument : toPrimitive(argument, Number);\n\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol') {\n\t\t\tthrow new TypeError('Cannot convert a Symbol value to a number');\n\t\t}\n\t\tif (typeof value === 'string') {\n\t\t\tif (isBinary(value)) {\n\t\t\t\treturn this.ToNumber(parseInteger(strSlice(value, 2), 2));\n\t\t\t} else if (isOctal(value)) {\n\t\t\t\treturn this.ToNumber(parseInteger(strSlice(value, 2), 8));\n\t\t\t} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n\t\t\t\treturn NaN;\n\t\t\t} else {\n\t\t\t\tvar trimmed = trim(value);\n\t\t\t\tif (trimmed !== value) {\n\t\t\t\t\treturn this.ToNumber(trimmed);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Number(value);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tointeger\n\t// ToInteger: ES5.ToNumber,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint32\n\t// ToInt32: ES5.ToInt32,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint32\n\t// ToUint32: ES5.ToUint32,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint16\n\tToInt16: function ToInt16(argument) {\n\t\tvar int16bit = this.ToUint16(argument);\n\t\treturn int16bit >= 0x8000 ? int16bit - 0x10000 : int16bit;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint16\n\t// ToUint16: ES5.ToUint16,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint8\n\tToInt8: function ToInt8(argument) {\n\t\tvar int8bit = this.ToUint8(argument);\n\t\treturn int8bit >= 0x80 ? int8bit - 0x100 : int8bit;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8\n\tToUint8: function ToUint8(argument) {\n\t\tvar number = this.ToNumber(argument);\n\t\tif ($isNaN(number) || number === 0 || !$isFinite(number)) {\n\t\t\treturn 0;\n\t\t}\n\t\tvar posInt = sign(number) * Math.floor(Math.abs(number));\n\t\treturn mod(posInt, 0x100);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8clamp\n\tToUint8Clamp: function ToUint8Clamp(argument) {\n\t\tvar number = this.ToNumber(argument);\n\t\tif ($isNaN(number) || number <= 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (number >= 0xFF) {\n\t\t\treturn 0xFF;\n\t\t}\n\t\tvar f = Math.floor(argument);\n\t\tif (f + 0.5 < number) {\n\t\t\treturn f + 1;\n\t\t}\n\t\tif (number < f + 0.5) {\n\t\t\treturn f;\n\t\t}\n\t\tif (f % 2 !== 0) {\n\t\t\treturn f + 1;\n\t\t}\n\t\treturn f;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tostring\n\tToString: function ToString(argument) {\n\t\tif ((typeof argument === 'undefined' ? 'undefined' : _typeof(argument)) === 'symbol') {\n\t\t\tthrow new TypeError('Cannot convert a Symbol value to a string');\n\t\t}\n\t\treturn String(argument);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toobject\n\tToObject: function ToObject(value) {\n\t\tthis.RequireObjectCoercible(value);\n\t\treturn Object(value);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey\n\tToPropertyKey: function ToPropertyKey(argument) {\n\t\tvar key = this.ToPrimitive(argument, String);\n\t\treturn (typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'symbol' ? key : this.ToString(key);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n\tToLength: function ToLength(argument) {\n\t\tvar len = this.ToInteger(argument);\n\t\tif (len <= 0) {\n\t\t\treturn 0;\n\t\t} // includes converting -0 to +0\n\t\tif (len > MAX_SAFE_INTEGER) {\n\t\t\treturn MAX_SAFE_INTEGER;\n\t\t}\n\t\treturn len;\n\t},\n\n\t// http://www.ecma-international.org/ecma-262/6.0/#sec-canonicalnumericindexstring\n\tCanonicalNumericIndexString: function CanonicalNumericIndexString(argument) {\n\t\tif (toStr.call(argument) !== '[object String]') {\n\t\t\tthrow new TypeError('must be a string');\n\t\t}\n\t\tif (argument === '-0') {\n\t\t\treturn -0;\n\t\t}\n\t\tvar n = this.ToNumber(argument);\n\t\tif (this.SameValue(this.ToString(n), argument)) {\n\t\t\treturn n;\n\t\t}\n\t\treturn void 0;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible\n\tRequireObjectCoercible: ES5.CheckObjectCoercible,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray\n\tIsArray: Array.isArray || function IsArray(argument) {\n\t\treturn toStr.call(argument) === '[object Array]';\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iscallable\n\t// IsCallable: ES5.IsCallable,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor\n\tIsConstructor: function IsConstructor(argument) {\n\t\treturn typeof argument === 'function' && !!argument.prototype; // unfortunately there's no way to truly check this without try/catch `new argument`\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isextensible-o\n\tIsExtensible: function IsExtensible(obj) {\n\t\tif (!Object.preventExtensions) {\n\t\t\treturn true;\n\t\t}\n\t\tif (isPrimitive(obj)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn Object.isExtensible(obj);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isinteger\n\tIsInteger: function IsInteger(argument) {\n\t\tif (typeof argument !== 'number' || $isNaN(argument) || !$isFinite(argument)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar abs = Math.abs(argument);\n\t\treturn Math.floor(abs) === abs;\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ispropertykey\n\tIsPropertyKey: function IsPropertyKey(argument) {\n\t\treturn typeof argument === 'string' || (typeof argument === 'undefined' ? 'undefined' : _typeof(argument)) === 'symbol';\n\t},\n\n\t// http://www.ecma-international.org/ecma-262/6.0/#sec-isregexp\n\tIsRegExp: function IsRegExp(argument) {\n\t\tif (!argument || (typeof argument === 'undefined' ? 'undefined' : _typeof(argument)) !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\tif (hasSymbols) {\n\t\t\tvar isRegExp = argument[Symbol.match];\n\t\t\tif (typeof isRegExp !== 'undefined') {\n\t\t\t\treturn ES5.ToBoolean(isRegExp);\n\t\t\t}\n\t\t}\n\t\treturn hasRegExpMatcher(argument);\n\t},\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevalue\n\t// SameValue: ES5.SameValue,\n\n\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero\n\tSameValueZero: function SameValueZero(x, y) {\n\t\treturn x === y || $isNaN(x) && $isNaN(y);\n\t},\n\n\t/**\n  * 7.3.2 GetV (V, P)\n  * 1. Assert: IsPropertyKey(P) is true.\n  * 2. Let O be ToObject(V).\n  * 3. ReturnIfAbrupt(O).\n  * 4. Return O.[[Get]](P, V).\n  */\n\tGetV: function GetV(V, P) {\n\t\t// 7.3.2.1\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\n\t\t// 7.3.2.2-3\n\t\tvar O = this.ToObject(V);\n\n\t\t// 7.3.2.4\n\t\treturn O[P];\n\t},\n\n\t/**\n  * 7.3.9 - http://www.ecma-international.org/ecma-262/6.0/#sec-getmethod\n  * 1. Assert: IsPropertyKey(P) is true.\n  * 2. Let func be GetV(O, P).\n  * 3. ReturnIfAbrupt(func).\n  * 4. If func is either undefined or null, return undefined.\n  * 5. If IsCallable(func) is false, throw a TypeError exception.\n  * 6. Return func.\n  */\n\tGetMethod: function GetMethod(O, P) {\n\t\t// 7.3.9.1\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\n\t\t// 7.3.9.2\n\t\tvar func = this.GetV(O, P);\n\n\t\t// 7.3.9.4\n\t\tif (func == null) {\n\t\t\treturn void 0;\n\t\t}\n\n\t\t// 7.3.9.5\n\t\tif (!this.IsCallable(func)) {\n\t\t\tthrow new TypeError(P + 'is not a function');\n\t\t}\n\n\t\t// 7.3.9.6\n\t\treturn func;\n\t},\n\n\t/**\n  * 7.3.1 Get (O, P) - http://www.ecma-international.org/ecma-262/6.0/#sec-get-o-p\n  * 1. Assert: Type(O) is Object.\n  * 2. Assert: IsPropertyKey(P) is true.\n  * 3. Return O.[[Get]](P, O).\n  */\n\tGet: function Get(O, P) {\n\t\t// 7.3.1.1\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new TypeError('Assertion failed: Type(O) is not Object');\n\t\t}\n\t\t// 7.3.1.2\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\t\t// 7.3.1.3\n\t\treturn O[P];\n\t},\n\n\tType: function Type(x) {\n\t\tif ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'symbol') {\n\t\t\treturn 'Symbol';\n\t\t}\n\t\treturn ES5.Type(x);\n\t},\n\n\t// http://www.ecma-international.org/ecma-262/6.0/#sec-speciesconstructor\n\tSpeciesConstructor: function SpeciesConstructor(O, defaultConstructor) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new TypeError('Assertion failed: Type(O) is not Object');\n\t\t}\n\t\tvar C = O.constructor;\n\t\tif (typeof C === 'undefined') {\n\t\t\treturn defaultConstructor;\n\t\t}\n\t\tif (this.Type(C) !== 'Object') {\n\t\t\tthrow new TypeError('O.constructor is not an Object');\n\t\t}\n\t\tvar S = hasSymbols && Symbol.species ? C[Symbol.species] : void 0;\n\t\tif (S == null) {\n\t\t\treturn defaultConstructor;\n\t\t}\n\t\tif (this.IsConstructor(S)) {\n\t\t\treturn S;\n\t\t}\n\t\tthrow new TypeError('no constructor found');\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-completepropertydescriptor\n\tCompletePropertyDescriptor: function CompletePropertyDescriptor(Desc) {\n\t\tif (!this.IsPropertyDescriptor(Desc)) {\n\t\t\tthrow new TypeError('Desc must be a Property Descriptor');\n\t\t}\n\n\t\tif (this.IsGenericDescriptor(Desc) || this.IsDataDescriptor(Desc)) {\n\t\t\tif (!has(Desc, '[[Value]]')) {\n\t\t\t\tDesc['[[Value]]'] = void 0;\n\t\t\t}\n\t\t\tif (!has(Desc, '[[Writable]]')) {\n\t\t\t\tDesc['[[Writable]]'] = false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!has(Desc, '[[Get]]')) {\n\t\t\t\tDesc['[[Get]]'] = void 0;\n\t\t\t}\n\t\t\tif (!has(Desc, '[[Set]]')) {\n\t\t\t\tDesc['[[Set]]'] = void 0;\n\t\t\t}\n\t\t}\n\t\tif (!has(Desc, '[[Enumerable]]')) {\n\t\t\tDesc['[[Enumerable]]'] = false;\n\t\t}\n\t\tif (!has(Desc, '[[Configurable]]')) {\n\t\t\tDesc['[[Configurable]]'] = false;\n\t\t}\n\t\treturn Desc;\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-set-o-p-v-throw\n\tSet: function Set(O, P, V, Throw) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new TypeError('O must be an Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new TypeError('P must be a Property Key');\n\t\t}\n\t\tif (this.Type(Throw) !== 'Boolean') {\n\t\t\tthrow new TypeError('Throw must be a Boolean');\n\t\t}\n\t\tif (Throw) {\n\t\t\tO[P] = V;\n\t\t\treturn true;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tO[P] = V;\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-hasownproperty\n\tHasOwnProperty: function HasOwnProperty(O, P) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new TypeError('O must be an Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new TypeError('P must be a Property Key');\n\t\t}\n\t\treturn has(O, P);\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-hasproperty\n\tHasProperty: function HasProperty(O, P) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new TypeError('O must be an Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new TypeError('P must be a Property Key');\n\t\t}\n\t\treturn P in O;\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-isconcatspreadable\n\tIsConcatSpreadable: function IsConcatSpreadable(O) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\treturn false;\n\t\t}\n\t\tif (hasSymbols && _typeof(Symbol.isConcatSpreadable) === 'symbol') {\n\t\t\tvar spreadable = this.Get(O, Symbol.isConcatSpreadable);\n\t\t\tif (typeof spreadable !== 'undefined') {\n\t\t\t\treturn this.ToBoolean(spreadable);\n\t\t\t}\n\t\t}\n\t\treturn this.IsArray(O);\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-invoke\n\tInvoke: function Invoke(O, P) {\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new TypeError('P must be a Property Key');\n\t\t}\n\t\tvar argumentsList = arraySlice(arguments, 2);\n\t\tvar func = this.GetV(O, P);\n\t\treturn this.Call(func, O, argumentsList);\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-createiterresultobject\n\tCreateIterResultObject: function CreateIterResultObject(value, done) {\n\t\tif (this.Type(done) !== 'Boolean') {\n\t\t\tthrow new TypeError('Assertion failed: Type(done) is not Boolean');\n\t\t}\n\t\treturn {\n\t\t\tvalue: value,\n\t\t\tdone: done\n\t\t};\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-regexpexec\n\tRegExpExec: function RegExpExec(R, S) {\n\t\tif (this.Type(R) !== 'Object') {\n\t\t\tthrow new TypeError('R must be an Object');\n\t\t}\n\t\tif (this.Type(S) !== 'String') {\n\t\t\tthrow new TypeError('S must be a String');\n\t\t}\n\t\tvar exec = this.Get(R, 'exec');\n\t\tif (this.IsCallable(exec)) {\n\t\t\tvar result = this.Call(exec, R, [S]);\n\t\t\tif (result === null || this.Type(result) === 'Object') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthrow new TypeError('\"exec\" method must return `null` or an Object');\n\t\t}\n\t\treturn regexExec(R, S);\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-arrayspeciescreate\n\tArraySpeciesCreate: function ArraySpeciesCreate(originalArray, length) {\n\t\tif (!this.IsInteger(length) || length < 0) {\n\t\t\tthrow new TypeError('Assertion failed: length must be an integer >= 0');\n\t\t}\n\t\tvar len = length === 0 ? 0 : length;\n\t\tvar C;\n\t\tvar isArray = this.IsArray(originalArray);\n\t\tif (isArray) {\n\t\t\tC = this.Get(originalArray, 'constructor');\n\t\t\t// TODO: figure out how to make a cross-realm normal Array, a same-realm Array\n\t\t\t// if (this.IsConstructor(C)) {\n\t\t\t// \tif C is another realm's Array, C = undefined\n\t\t\t// \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\n\t\t\t// }\n\t\t\tif (this.Type(C) === 'Object' && hasSymbols && Symbol.species) {\n\t\t\t\tC = this.Get(C, Symbol.species);\n\t\t\t\tif (C === null) {\n\t\t\t\t\tC = void 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (typeof C === 'undefined') {\n\t\t\treturn Array(len);\n\t\t}\n\t\tif (!this.IsConstructor(C)) {\n\t\t\tthrow new TypeError('C must be a constructor');\n\t\t}\n\t\treturn new C(len); // this.Construct(C, len);\n\t},\n\n\tCreateDataProperty: function CreateDataProperty(O, P, V) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new TypeError('Assertion failed: Type(O) is not Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\t\tvar oldDesc = Object.getOwnPropertyDescriptor(O, P);\n\t\tvar extensible = oldDesc || typeof Object.isExtensible !== 'function' || Object.isExtensible(O);\n\t\tvar immutable = oldDesc && (!oldDesc.writable || !oldDesc.configurable);\n\t\tif (immutable || !extensible) {\n\t\t\treturn false;\n\t\t}\n\t\tvar newDesc = {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: true,\n\t\t\tvalue: V,\n\t\t\twritable: true\n\t\t};\n\t\tObject.defineProperty(O, P, newDesc);\n\t\treturn true;\n\t},\n\n\t// http://ecma-international.org/ecma-262/6.0/#sec-createdatapropertyorthrow\n\tCreateDataPropertyOrThrow: function CreateDataPropertyOrThrow(O, P, V) {\n\t\tif (this.Type(O) !== 'Object') {\n\t\t\tthrow new TypeError('Assertion failed: Type(O) is not Object');\n\t\t}\n\t\tif (!this.IsPropertyKey(P)) {\n\t\t\tthrow new TypeError('Assertion failed: IsPropertyKey(P) is not true');\n\t\t}\n\t\tvar success = this.CreateDataProperty(O, P, V);\n\t\tif (!success) {\n\t\t\tthrow new TypeError('unable to create data property');\n\t\t}\n\t\treturn success;\n\t}\n});\n\ndelete ES6.CheckObjectCoercible; // renamed in ES6 to RequireObjectCoercible\n\nmodule.exports = ES6;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"function-bind":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/index.js","has":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/has/src/index.js","./helpers/assign":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/assign.js","./helpers/isNaN":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isNaN.js","./helpers/isFinite":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isFinite.js","./helpers/sign":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/sign.js","./helpers/mod":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/mod.js","./helpers/isPrimitive":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isPrimitive.js","is-regex":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-regex/index.js","./es5":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es5.js","es-to-primitive/es6":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/es6.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es2016.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es2016.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar ES2015 = require('./es2015');\nvar assign = require('./helpers/assign');\n\nvar ES2016 = assign(assign({}, ES2015), {\n\t// https://github.com/tc39/ecma262/pull/60\n\tSameValueNonNumber: function SameValueNonNumber(x, y) {\n\t\tif (typeof x === 'number' || (typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== (typeof y === 'undefined' ? 'undefined' : _typeof(y))) {\n\t\t\tthrow new TypeError('SameValueNonNumber requires two non-number values of the same type.');\n\t\t}\n\t\treturn this.SameValue(x, y);\n\t}\n});\n\nmodule.exports = ES2016;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzMjAxNi5qcyJdLCJuYW1lcyI6WyJFUzIwMTUiLCJyZXF1aXJlIiwiYXNzaWduIiwiRVMyMDE2IiwiU2FtZVZhbHVlTm9uTnVtYmVyIiwieCIsInkiLCJUeXBlRXJyb3IiLCJTYW1lVmFsdWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQUlBLFNBQVNDLFFBQVEsVUFBUixDQUFiO0FBQ0EsSUFBSUMsU0FBU0QsUUFBUSxrQkFBUixDQUFiOztBQUVBLElBQUlFLFNBQVNELE9BQU9BLE9BQU8sRUFBUCxFQUFXRixNQUFYLENBQVAsRUFBMkI7QUFDdkM7QUFDQUkscUJBQW9CLFNBQVNBLGtCQUFULENBQTRCQyxDQUE1QixFQUErQkMsQ0FBL0IsRUFBa0M7QUFDckQsTUFBSSxPQUFPRCxDQUFQLEtBQWEsUUFBYixJQUF5QixRQUFPQSxDQUFQLHlDQUFPQSxDQUFQLGVBQW9CQyxDQUFwQix5Q0FBb0JBLENBQXBCLEVBQTdCLEVBQW9EO0FBQ25ELFNBQU0sSUFBSUMsU0FBSixDQUFjLHFFQUFkLENBQU47QUFDQTtBQUNELFNBQU8sS0FBS0MsU0FBTCxDQUFlSCxDQUFmLEVBQWtCQyxDQUFsQixDQUFQO0FBQ0E7QUFQc0MsQ0FBM0IsQ0FBYjs7QUFVQUcsT0FBT0MsT0FBUCxHQUFpQlAsTUFBakIiLCJmaWxlIjoiZXMyMDE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVMyMDE1ID0gcmVxdWlyZSgnLi9lczIwMTUnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL2hlbHBlcnMvYXNzaWduJyk7XG5cbnZhciBFUzIwMTYgPSBhc3NpZ24oYXNzaWduKHt9LCBFUzIwMTUpLCB7XG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWEyNjIvcHVsbC82MFxuXHRTYW1lVmFsdWVOb25OdW1iZXI6IGZ1bmN0aW9uIFNhbWVWYWx1ZU5vbk51bWJlcih4LCB5KSB7XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgeCAhPT0gdHlwZW9mIHkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1NhbWVWYWx1ZU5vbk51bWJlciByZXF1aXJlcyB0d28gbm9uLW51bWJlciB2YWx1ZXMgb2YgdGhlIHNhbWUgdHlwZS4nKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuU2FtZVZhbHVlKHgsIHkpO1xuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFUzIwMTY7XG4iXX0=","deps":{"./helpers/assign":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/assign.js","./es2015":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es2015.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es7.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es7.js","source":"'use strict';\n\nmodule.exports = require('./es2016');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNy5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLE9BQVAsR0FBaUJDLFFBQVEsVUFBUixDQUFqQiIsImZpbGUiOiJlczcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9lczIwMTYnKTtcbiJdfQ==","deps":{"./es2016":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es2016.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/implementation.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/implementation.js","source":"'use strict';\n\nvar ES = require('es-abstract/es7');\nvar has = require('has');\nvar bind = require('function-bind');\nvar isEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);\n\nmodule.exports = function entries(O) {\n\tvar obj = ES.RequireObjectCoercible(O);\n\tvar entrys = [];\n\tfor (var key in obj) {\n\t\tif (has(obj, key) && isEnumerable(obj, key)) {\n\t\t\tentrys.push([key, obj[key]]);\n\t\t}\n\t}\n\treturn entrys;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudGF0aW9uLmpzIl0sIm5hbWVzIjpbIkVTIiwicmVxdWlyZSIsImhhcyIsImJpbmQiLCJpc0VudW1lcmFibGUiLCJjYWxsIiwiRnVuY3Rpb24iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbnRyaWVzIiwiTyIsIm9iaiIsIlJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJlbnRyeXMiLCJrZXkiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxLQUFLQyxRQUFRLGlCQUFSLENBQVQ7QUFDQSxJQUFJQyxNQUFNRCxRQUFRLEtBQVIsQ0FBVjtBQUNBLElBQUlFLE9BQU9GLFFBQVEsZUFBUixDQUFYO0FBQ0EsSUFBSUcsZUFBZUQsS0FBS0UsSUFBTCxDQUFVQyxTQUFTRCxJQUFuQixFQUF5QkUsT0FBT0MsU0FBUCxDQUFpQkMsb0JBQTFDLENBQW5COztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLE9BQVQsQ0FBaUJDLENBQWpCLEVBQW9CO0FBQ3BDLEtBQUlDLE1BQU1kLEdBQUdlLHNCQUFILENBQTBCRixDQUExQixDQUFWO0FBQ0EsS0FBSUcsU0FBUyxFQUFiO0FBQ0EsTUFBSyxJQUFJQyxHQUFULElBQWdCSCxHQUFoQixFQUFxQjtBQUNwQixNQUFJWixJQUFJWSxHQUFKLEVBQVNHLEdBQVQsS0FBaUJiLGFBQWFVLEdBQWIsRUFBa0JHLEdBQWxCLENBQXJCLEVBQTZDO0FBQzVDRCxVQUFPRSxJQUFQLENBQVksQ0FBQ0QsR0FBRCxFQUFNSCxJQUFJRyxHQUFKLENBQU4sQ0FBWjtBQUNBO0FBQ0Q7QUFDRCxRQUFPRCxNQUFQO0FBQ0EsQ0FURCIsImZpbGUiOiJpbXBsZW1lbnRhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEVTID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvZXM3Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBpc0VudW1lcmFibGUgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW50cmllcyhPKSB7XG5cdHZhciBvYmogPSBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKE8pO1xuXHR2YXIgZW50cnlzID0gW107XG5cdGZvciAodmFyIGtleSBpbiBvYmopIHtcblx0XHRpZiAoaGFzKG9iaiwga2V5KSAmJiBpc0VudW1lcmFibGUob2JqLCBrZXkpKSB7XG5cdFx0XHRlbnRyeXMucHVzaChba2V5LCBvYmpba2V5XV0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZW50cnlzO1xufTtcbiJdfQ==","deps":{"function-bind":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/index.js","has":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/has/src/index.js","es-abstract/es7":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es7.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/index.js","source":"'use strict';\n\nvar define = require('define-properties');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar shim = require('./shim');\n\nvar polyfill = getPolyfill();\n\ndefine(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRlZmluZSIsInJlcXVpcmUiLCJpbXBsZW1lbnRhdGlvbiIsImdldFBvbHlmaWxsIiwic2hpbSIsInBvbHlmaWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsU0FBU0MsUUFBUSxtQkFBUixDQUFiOztBQUVBLElBQUlDLGlCQUFpQkQsUUFBUSxrQkFBUixDQUFyQjtBQUNBLElBQUlFLGNBQWNGLFFBQVEsWUFBUixDQUFsQjtBQUNBLElBQUlHLE9BQU9ILFFBQVEsUUFBUixDQUFYOztBQUVBLElBQUlJLFdBQVdGLGFBQWY7O0FBRUFILE9BQU9LLFFBQVAsRUFBaUI7QUFDaEJGLGNBQWFBLFdBREc7QUFFaEJELGlCQUFnQkEsY0FGQTtBQUdoQkUsT0FBTUE7QUFIVSxDQUFqQjs7QUFNQUUsT0FBT0MsT0FBUCxHQUFpQkYsUUFBakIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIl19","deps":{"./polyfill":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/polyfill.js","./shim":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/shim.js","define-properties":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/define-properties/index.js","./implementation":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/implementation.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll/src/client/build.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll/src/client/build.js","source":"'use strict';\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\n\nvar IdyllDocument = require('idyll-document').default;\nvar mountNode = document.getElementById('idyll-mount');\n\nvar ast = require('__IDYLL_AST__');\nvar components = require('__IDYLL_COMPONENTS__');\nvar datasets = require('__IDYLL_DATA__');\nrequire('__IDYLL_SYNTAX_HIGHLIGHT__');\n\nvar opts = require('__IDYLL_OPTS__');\n\nvar mountMethod = opts.ssr ? 'hydrate' : 'render';\nReactDOM[mountMethod](React.createElement(IdyllDocument, { ast: ast, components: components, datasets: datasets }), mountNode);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlJlYWN0RE9NIiwiSWR5bGxEb2N1bWVudCIsImRlZmF1bHQiLCJtb3VudE5vZGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiYXN0IiwiY29tcG9uZW50cyIsImRhdGFzZXRzIiwib3B0cyIsIm1vdW50TWV0aG9kIiwic3NyIiwiY3JlYXRlRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxRQUFRQyxRQUFRLE9BQVIsQ0FBZDtBQUNBLElBQU1DLFdBQVdELFFBQVEsV0FBUixDQUFqQjs7QUFFQSxJQUFNRSxnQkFBZ0JGLFFBQVEsZ0JBQVIsRUFBMEJHLE9BQWhEO0FBQ0EsSUFBTUMsWUFBWUMsU0FBU0MsY0FBVCxDQUF3QixhQUF4QixDQUFsQjs7QUFFQSxJQUFNQyxNQUFNUCxRQUFRLGVBQVIsQ0FBWjtBQUNBLElBQU1RLGFBQWFSLFFBQVEsc0JBQVIsQ0FBbkI7QUFDQSxJQUFNUyxXQUFXVCxRQUFRLGdCQUFSLENBQWpCO0FBQ0FBLFFBQVEsNEJBQVI7O0FBRUEsSUFBTVUsT0FBT1YsUUFBUSxnQkFBUixDQUFiOztBQUVBLElBQU1XLGNBQWNELEtBQUtFLEdBQUwsR0FBVyxTQUFYLEdBQXVCLFFBQTNDO0FBQ0FYLFNBQVNVLFdBQVQsRUFDRVosTUFBTWMsYUFBTixDQUFvQlgsYUFBcEIsRUFBbUMsRUFBRUssUUFBRixFQUFPQyxzQkFBUCxFQUFtQkMsa0JBQW5CLEVBQW5DLENBREYsRUFFRUwsU0FGRiIsImZpbGUiOiJidWlsZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbmNvbnN0IElkeWxsRG9jdW1lbnQgPSByZXF1aXJlKCdpZHlsbC1kb2N1bWVudCcpLmRlZmF1bHQ7XG5jb25zdCBtb3VudE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaWR5bGwtbW91bnQnKTtcblxuY29uc3QgYXN0ID0gcmVxdWlyZSgnX19JRFlMTF9BU1RfXycpO1xuY29uc3QgY29tcG9uZW50cyA9IHJlcXVpcmUoJ19fSURZTExfQ09NUE9ORU5UU19fJyk7XG5jb25zdCBkYXRhc2V0cyA9IHJlcXVpcmUoJ19fSURZTExfREFUQV9fJyk7XG5yZXF1aXJlKCdfX0lEWUxMX1NZTlRBWF9ISUdITElHSFRfXycpO1xuXG5jb25zdCBvcHRzID0gcmVxdWlyZSgnX19JRFlMTF9PUFRTX18nKTtcblxuY29uc3QgbW91bnRNZXRob2QgPSBvcHRzLnNzciA/ICdoeWRyYXRlJyA6ICdyZW5kZXInO1xuUmVhY3RET01bbW91bnRNZXRob2RdKFxuICBSZWFjdC5jcmVhdGVFbGVtZW50KElkeWxsRG9jdW1lbnQsIHsgYXN0LCBjb21wb25lbnRzLCBkYXRhc2V0cyB9KSxcbiAgbW91bnROb2RlXG4pO1xuIl19","deps":{"__IDYLL_AST__":false,"__IDYLL_COMPONENTS__":false,"__IDYLL_DATA__":false,"__IDYLL_SYNTAX_HIGHLIGHT__":false,"__IDYLL_OPTS__":false,"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js","react-dom":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom/umd/react-dom.production.min.js","idyll-document":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/header.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/header.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Header = function (_React$PureComponent) {\n  _inherits(Header, _React$PureComponent);\n\n  function Header() {\n    _classCallCheck(this, Header);\n\n    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));\n  }\n\n  _createClass(Header, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(\n        'div',\n        { className: 'article-header' },\n        _react2.default.createElement(\n          'h1',\n          { className: 'hed' },\n          this.props.title\n        ),\n        this.props.subtitle && _react2.default.createElement(\n          'h2',\n          { className: 'dek' },\n          this.props.subtitle\n        ),\n        this.props.author && _react2.default.createElement(\n          'div',\n          { className: 'byline' },\n          'By: ',\n          _react2.default.createElement(\n            'a',\n            { href: this.props.authorLink },\n            this.props.author\n          )\n        )\n      );\n    }\n  }]);\n\n  return Header;\n}(_react2.default.PureComponent);\n\nexports.default = Header;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlYWRlci5qcyJdLCJuYW1lcyI6WyJIZWFkZXIiLCJwcm9wcyIsInRpdGxlIiwic3VidGl0bGUiLCJhdXRob3IiLCJhdXRob3JMaW5rIiwiUHVyZUNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0lBRU1BLE07Ozs7Ozs7Ozs7OzZCQUNLO0FBQ1AsYUFDRTtBQUFBO0FBQUEsVUFBSyxXQUFXLGdCQUFoQjtBQUNFO0FBQUE7QUFBQSxZQUFJLFdBQVcsS0FBZjtBQUNHLGVBQUtDLEtBQUwsQ0FBV0M7QUFEZCxTQURGO0FBS0ksYUFBS0QsS0FBTCxDQUFXRSxRQUFYLElBQ0U7QUFBQTtBQUFBLFlBQUksV0FBVyxLQUFmO0FBQ0csZUFBS0YsS0FBTCxDQUFXRTtBQURkLFNBTk47QUFZSSxhQUFLRixLQUFMLENBQVdHLE1BQVgsSUFDRTtBQUFBO0FBQUEsWUFBSyxXQUFXLFFBQWhCO0FBQUE7QUFDTTtBQUFBO0FBQUEsY0FBRyxNQUFNLEtBQUtILEtBQUwsQ0FBV0ksVUFBcEI7QUFBaUMsaUJBQUtKLEtBQUwsQ0FBV0c7QUFBNUM7QUFETjtBQWJOLE9BREY7QUFzQkQ7Ozs7RUF4QmtCLGdCQUFNRSxhOztrQkEyQlpOLE0iLCJmaWxlIjoiaGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9eydhcnRpY2xlLWhlYWRlcid9PlxuICAgICAgICA8aDEgY2xhc3NOYW1lPXsnaGVkJ30+XG4gICAgICAgICAge3RoaXMucHJvcHMudGl0bGV9XG4gICAgICAgIDwvaDE+XG4gICAgICAgIHtcbiAgICAgICAgICB0aGlzLnByb3BzLnN1YnRpdGxlICYmIChcbiAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9eydkZWsnfT5cbiAgICAgICAgICAgICAge3RoaXMucHJvcHMuc3VidGl0bGV9XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5hdXRob3IgJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9eydieWxpbmUnfT5cbiAgICAgICAgICAgICAgQnk6IDxhIGhyZWY9e3RoaXMucHJvcHMuYXV0aG9yTGlua30+e3RoaXMucHJvcHMuYXV0aG9yfTwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjtcbiJdfQ==","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/select.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/select.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ReactDOM = require('react-dom');\n\nvar Select = function (_React$PureComponent) {\n  _inherits(Select, _React$PureComponent);\n\n  function Select(props) {\n    _classCallCheck(this, Select);\n\n    var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));\n\n    _this.onChange = _this.onChange.bind(_this);\n    return _this;\n  }\n\n  _createClass(Select, [{\n    key: 'onChange',\n    value: function onChange(e) {\n      this.props.updateProps({ value: e.target.value });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(\n        'select',\n        _extends({ onChange: this.onChange }, this.props),\n        this.props.options.map(function (d) {\n          if (typeof d === 'string') {\n            return _react2.default.createElement(\n              'option',\n              { value: d },\n              d\n            );\n          }\n          return _react2.default.createElement(\n            'option',\n            { value: d.value },\n            d.label || d.value\n          );\n        })\n      );\n    }\n  }]);\n\n  return Select;\n}(_react2.default.PureComponent);\n\nSelect.defaultProps = {\n  options: []\n};\n\nexports.default = Select;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbGVjdC5qcyJdLCJuYW1lcyI6WyJSZWFjdERPTSIsInJlcXVpcmUiLCJTZWxlY3QiLCJwcm9wcyIsIm9uQ2hhbmdlIiwiYmluZCIsImUiLCJ1cGRhdGVQcm9wcyIsInZhbHVlIiwidGFyZ2V0Iiwib3B0aW9ucyIsIm1hcCIsImQiLCJsYWJlbCIsIlB1cmVDb21wb25lbnQiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0FBQ0EsSUFBTUEsV0FBV0MsUUFBUSxXQUFSLENBQWpCOztJQUVNQyxNOzs7QUFDSixrQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUFBLGdIQUNYQSxLQURXOztBQUVqQixVQUFLQyxRQUFMLEdBQWdCLE1BQUtBLFFBQUwsQ0FBY0MsSUFBZCxPQUFoQjtBQUZpQjtBQUdsQjs7Ozs2QkFFUUMsQyxFQUFHO0FBQ1YsV0FBS0gsS0FBTCxDQUFXSSxXQUFYLENBQXVCLEVBQUVDLE9BQU9GLEVBQUVHLE1BQUYsQ0FBU0QsS0FBbEIsRUFBdkI7QUFDRDs7OzZCQUVRO0FBQ1AsYUFDRTtBQUFBO0FBQUEsbUJBQVEsVUFBVSxLQUFLSixRQUF2QixJQUFxQyxLQUFLRCxLQUExQztBQUNHLGFBQUtBLEtBQUwsQ0FBV08sT0FBWCxDQUFtQkMsR0FBbkIsQ0FBdUIsVUFBQ0MsQ0FBRCxFQUFPO0FBQzdCLGNBQUksT0FBT0EsQ0FBUCxLQUFhLFFBQWpCLEVBQTJCO0FBQ3pCLG1CQUFPO0FBQUE7QUFBQSxnQkFBUSxPQUFPQSxDQUFmO0FBQW1CQTtBQUFuQixhQUFQO0FBQ0Q7QUFDRCxpQkFBTztBQUFBO0FBQUEsY0FBUSxPQUFPQSxFQUFFSixLQUFqQjtBQUF5QkksY0FBRUMsS0FBRixJQUFXRCxFQUFFSjtBQUF0QyxXQUFQO0FBQ0QsU0FMQTtBQURILE9BREY7QUFVRDs7OztFQXJCa0IsZ0JBQU1NLGE7O0FBd0IzQlosT0FBT2EsWUFBUCxHQUFzQjtBQUNwQkwsV0FBUztBQURXLENBQXRCOztrQkFJZVIsTSIsImZpbGUiOiJzZWxlY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgUmVhY3RET00gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxuY2xhc3MgU2VsZWN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gIH1cblxuICBvbkNoYW5nZShlKSB7XG4gICAgdGhpcy5wcm9wcy51cGRhdGVQcm9wcyh7IHZhbHVlOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNlbGVjdCBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gey4uLnRoaXMucHJvcHN9PlxuICAgICAgICB7dGhpcy5wcm9wcy5vcHRpb25zLm1hcCgoZCkgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2YgZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiA8b3B0aW9uIHZhbHVlPXtkfT57ZH08L29wdGlvbj47XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiA8b3B0aW9uIHZhbHVlPXtkLnZhbHVlfT57ZC5sYWJlbCB8fCBkLnZhbHVlfTwvb3B0aW9uPjtcbiAgICAgICAgfSl9XG4gICAgICA8L3NlbGVjdD5cbiAgICApO1xuICB9XG59XG5cblNlbGVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIG9wdGlvbnM6IFtdXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDtcbiJdfQ==","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js","react-dom":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom/umd/react-dom.production.min.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/range.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/range.js","source":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Range = function (_React$PureComponent) {\n  _inherits(Range, _React$PureComponent);\n\n  function Range(props) {\n    _classCallCheck(this, Range);\n\n    return _possibleConstructorReturn(this, (Range.__proto__ || Object.getPrototypeOf(Range)).call(this, props));\n  }\n\n  _createClass(Range, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.props.updateProps({\n        value: +event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          value = _props.value,\n          min = _props.min,\n          max = _props.max,\n          step = _props.step;\n\n      return _react2.default.createElement(\"input\", { type: \"range\", onChange: this.handleChange.bind(this), value: value, min: min, max: max, step: step });\n    }\n  }]);\n\n  return Range;\n}(_react2.default.PureComponent);\n\nRange.defaultProps = {\n  value: 0,\n  min: 0,\n  max: 1,\n  step: 1\n};\n\nexports.default = Range;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJhbmdlLmpzIl0sIm5hbWVzIjpbIlJhbmdlIiwicHJvcHMiLCJldmVudCIsInVwZGF0ZVByb3BzIiwidmFsdWUiLCJ0YXJnZXQiLCJtaW4iLCJtYXgiLCJzdGVwIiwiaGFuZGxlQ2hhbmdlIiwiYmluZCIsIlB1cmVDb21wb25lbnQiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQUVNQSxLOzs7QUFDSixpQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUFBLHlHQUNYQSxLQURXO0FBRWxCOzs7O2lDQUVZQyxLLEVBQU87QUFDbEIsV0FBS0QsS0FBTCxDQUFXRSxXQUFYLENBQXVCO0FBQ3JCQyxlQUFPLENBQUNGLE1BQU1HLE1BQU4sQ0FBYUQ7QUFEQSxPQUF2QjtBQUdEOzs7NkJBRVE7QUFBQSxtQkFDMkIsS0FBS0gsS0FEaEM7QUFBQSxVQUNDRyxLQURELFVBQ0NBLEtBREQ7QUFBQSxVQUNRRSxHQURSLFVBQ1FBLEdBRFI7QUFBQSxVQUNhQyxHQURiLFVBQ2FBLEdBRGI7QUFBQSxVQUNrQkMsSUFEbEIsVUFDa0JBLElBRGxCOztBQUVQLGFBQ0UseUNBQU8sTUFBSyxPQUFaLEVBQW9CLFVBQVUsS0FBS0MsWUFBTCxDQUFrQkMsSUFBbEIsQ0FBdUIsSUFBdkIsQ0FBOUIsRUFBNEQsT0FBT04sS0FBbkUsRUFBMEUsS0FBS0UsR0FBL0UsRUFBb0YsS0FBS0MsR0FBekYsRUFBOEYsTUFBTUMsSUFBcEcsR0FERjtBQUdEOzs7O0VBaEJpQixnQkFBTUcsYTs7QUFtQjFCWCxNQUFNWSxZQUFOLEdBQXFCO0FBQ25CUixTQUFPLENBRFk7QUFFbkJFLE9BQUssQ0FGYztBQUduQkMsT0FBSyxDQUhjO0FBSW5CQyxRQUFNO0FBSmEsQ0FBckI7O2tCQU9lUixLIiwiZmlsZSI6InJhbmdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY2xhc3MgUmFuZ2UgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnByb3BzLnVwZGF0ZVByb3BzKHtcbiAgICAgIHZhbHVlOiArZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSwgbWluLCBtYXgsIHN0ZXAgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKX0gdmFsdWU9e3ZhbHVlfSBtaW49e21pbn0gbWF4PXttYXh9IHN0ZXA9e3N0ZXB9IC8+XG4gICAgKTtcbiAgfVxufVxuXG5SYW5nZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHZhbHVlOiAwLFxuICBtaW46IDAsXG4gIG1heDogMSxcbiAgc3RlcDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmFuZ2U7XG4iXX0=","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/text-input.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/text-input.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ReactDOM = require('react-dom');\n\nvar TextInput = function (_React$PureComponent) {\n  _inherits(TextInput, _React$PureComponent);\n\n  function TextInput(props) {\n    _classCallCheck(this, TextInput);\n\n    var _this = _possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call(this, props));\n\n    _this.onChange = _this.onChange.bind(_this);\n    return _this;\n  }\n\n  _createClass(TextInput, [{\n    key: 'onChange',\n    value: function onChange(e) {\n      this.props.updateProps({ value: e.target.value });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          props = _objectWithoutProperties(_props, ['children']);\n\n      return _react2.default.createElement('input', _extends({ type: 'text', onChange: this.onChange }, props));\n    }\n  }]);\n\n  return TextInput;\n}(_react2.default.PureComponent);\n\nexports.default = TextInput;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHQtaW5wdXQuanMiXSwibmFtZXMiOlsiUmVhY3RET00iLCJyZXF1aXJlIiwiVGV4dElucHV0IiwicHJvcHMiLCJvbkNoYW5nZSIsImJpbmQiLCJlIiwidXBkYXRlUHJvcHMiLCJ2YWx1ZSIsInRhcmdldCIsImNoaWxkcmVuIiwiUHVyZUNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7OztBQUNBLElBQU1BLFdBQVdDLFFBQVEsV0FBUixDQUFqQjs7SUFFTUMsUzs7O0FBQ0oscUJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSxzSEFDWEEsS0FEVzs7QUFFakIsVUFBS0MsUUFBTCxHQUFnQixNQUFLQSxRQUFMLENBQWNDLElBQWQsT0FBaEI7QUFGaUI7QUFHbEI7Ozs7NkJBRVFDLEMsRUFBRztBQUNWLFdBQUtILEtBQUwsQ0FBV0ksV0FBWCxDQUF1QixFQUFFQyxPQUFPRixFQUFFRyxNQUFGLENBQVNELEtBQWxCLEVBQXZCO0FBQ0Q7Ozs2QkFFUTtBQUFBLG1CQUN3QixLQUFLTCxLQUQ3QjtBQUFBLFVBQ0NPLFFBREQsVUFDQ0EsUUFERDtBQUFBLFVBQ2NQLEtBRGQ7O0FBRVAsYUFDRSxrREFBTyxNQUFLLE1BQVosRUFBbUIsVUFBVSxLQUFLQyxRQUFsQyxJQUFnREQsS0FBaEQsRUFERjtBQUdEOzs7O0VBZnFCLGdCQUFNUSxhOztrQkFrQmZULFMiLCJmaWxlIjoidGV4dC1pbnB1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBSZWFjdERPTSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG5jbGFzcyBUZXh0SW5wdXQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uQ2hhbmdlKGUpIHtcbiAgICB0aGlzLnByb3BzLnVwZGF0ZVByb3BzKHsgdmFsdWU6IGUudGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0gey4uLnByb3BzfSAvPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGV4dElucHV0O1xuIl19","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js","react-dom":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom/umd/react-dom.production.min.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-d3-component/lib.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-d3-component/lib.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\nvar ReactDOM = require('react-dom');\n\nvar D3Component = function (_React$Component) {\n  _inherits(D3Component, _React$Component);\n\n  function D3Component() {\n    _classCallCheck(this, D3Component);\n\n    return _possibleConstructorReturn(this, (D3Component.__proto__ || Object.getPrototypeOf(D3Component)).apply(this, arguments));\n  }\n\n  _createClass(D3Component, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.update(nextProps);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          className = _props.className,\n          style = _props.style;\n\n      return React.createElement('div', { ref: function ref(node) {\n          _this2.initialize(node, _this2.props);\n        }, className: className, style: Object.assign({ width: '100%' }, style) });\n    }\n  }]);\n\n  return D3Component;\n}(React.Component);\n\nmodule.exports = D3Component;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi5qcyJdLCJuYW1lcyI6WyJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsImNhbGwiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIlJlYWN0IiwicmVxdWlyZSIsIlJlYWN0RE9NIiwiRDNDb21wb25lbnQiLCJfUmVhY3QkQ29tcG9uZW50IiwiZ2V0UHJvdG90eXBlT2YiLCJhcHBseSIsImFyZ3VtZW50cyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJ1cGRhdGUiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJyZW5kZXIiLCJfdGhpczIiLCJfcHJvcHMiLCJjbGFzc05hbWUiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJub2RlIiwiaW5pdGlhbGl6ZSIsImFzc2lnbiIsIndpZHRoIiwiQ29tcG9uZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxJQUFJQSxlQUFlLFlBQVk7QUFBRSxXQUFTQyxnQkFBVCxDQUEwQkMsTUFBMUIsRUFBa0NDLEtBQWxDLEVBQXlDO0FBQUUsU0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlELE1BQU1FLE1BQTFCLEVBQWtDRCxH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LFdBQU8sU0FBU2MscUJBQVQsR0FBaUM7QUFDdEMsYUFBTyxLQUFQO0FBQ0Q7QUFKQSxHQUx1QixFQVV2QjtBQUNEL0IsU0FBSyxRQURKO0FBRURpQixXQUFPLFNBQVNlLE1BQVQsR0FBa0I7QUFDdkIsVUFBSUMsU0FBUyxJQUFiOztBQUVBLFVBQUlDLFNBQVMsS0FBSzNDLEtBQWxCO0FBQUEsVUFDSTRDLFlBQVlELE9BQU9DLFNBRHZCO0FBQUEsVUFFSUMsUUFBUUYsT0FBT0UsS0FGbkI7O0FBSUEsYUFBT2hCLE1BQU1pQixhQUFOLENBQW9CLEtBQXBCLEVBQTJCLEVBQUVDLEtBQUssU0FBU0EsR0FBVCxDQUFhQyxJQUFiLEVBQW1CO0FBQ3hETixpQkFBT08sVUFBUCxDQUFrQkQsSUFBbEIsRUFBd0JOLE9BQU8xQyxLQUEvQjtBQUNELFNBRitCLEVBRTdCNEMsV0FBV0EsU0FGa0IsRUFFUEMsT0FBT3RDLE9BQU8yQyxNQUFQLENBQWMsRUFBRUMsT0FBTyxNQUFULEVBQWQsRUFBaUNOLEtBQWpDLENBRkEsRUFBM0IsQ0FBUDtBQUdEO0FBWkEsR0FWdUIsQ0FBMUI7O0FBeUJBLFNBQU9iLFdBQVA7QUFDRCxDQW5DaUIsQ0FtQ2hCSCxNQUFNdUIsU0FuQ1UsQ0FBbEI7O0FBcUNBQyxPQUFPQyxPQUFQLEdBQWlCdEIsV0FBakIiLCJmaWxlIjoibGliLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIEQzQ29tcG9uZW50ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEQzQ29tcG9uZW50LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEM0NvbXBvbmVudCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRDNDb21wb25lbnQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEM0NvbXBvbmVudC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEQzQ29tcG9uZW50KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRDNDb21wb25lbnQsIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB0aGlzLnVwZGF0ZShuZXh0UHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgIF90aGlzMi5pbml0aWFsaXplKG5vZGUsIF90aGlzMi5wcm9wcyk7XG4gICAgICAgIH0sIGNsYXNzTmFtZTogY2xhc3NOYW1lLCBzdHlsZTogT2JqZWN0LmFzc2lnbih7IHdpZHRoOiAnMTAwJScgfSwgc3R5bGUpIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEM0NvbXBvbmVudDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEM0NvbXBvbmVudDtcbiJdfQ==","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js","react-dom":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom/umd/react-dom.production.min.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/components/my-d3-component.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/components/my-d3-component.js","source":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar React = require('react');\nvar D3Component = require('idyll-d3-component');\nvar d3 = require('d3');\n\nvar size = 600;\n\nvar CustomD3Component = function (_D3Component) {\n  _inherits(CustomD3Component, _D3Component);\n\n  function CustomD3Component() {\n    _classCallCheck(this, CustomD3Component);\n\n    return _possibleConstructorReturn(this, (CustomD3Component.__proto__ || Object.getPrototypeOf(CustomD3Component)).apply(this, arguments));\n  }\n\n  _createClass(CustomD3Component, [{\n    key: 'initialize',\n    value: function initialize(node, props) {\n      var svg = this.svg = d3.select(node).append('svg');\n      svg.attr('viewBox', '0 0 ' + size + ' ' + size).style('width', '100%').style('height', 'auto');\n\n      var x = this.x = d3.scaleLinear().domain([0, 10]).range([0, size]);\n      var y = this.y = d3.scaleLinear().domain([0, 10]).range([size, 0]);\n\n      svg.selectAll('circle').data(props.data).enter().append('circle').attr('cx', function (d) {\n        return x(d[props.x]);\n      }).attr('cy', function (d) {\n        return y(d[props.y]);\n      }).attr('r', 10).attr('opacity', 0.6).attr('fill', props.color);\n    }\n  }, {\n    key: 'update',\n    value: function update(props) {\n      var _this2 = this;\n\n      this.svg.selectAll('circle').transition().duration(500).attr('fill', props.color).attr('cx', function (d) {\n        return _this2.x(d[props.x]);\n      }).attr('cy', function (d) {\n        return _this2.y(d[props.y]);\n      });\n    }\n  }]);\n\n  return CustomD3Component;\n}(D3Component);\n\nmodule.exports = CustomD3Component;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm15LWQzLWNvbXBvbmVudC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJEM0NvbXBvbmVudCIsImQzIiwic2l6ZSIsIkN1c3RvbUQzQ29tcG9uZW50Iiwibm9kZSIsInByb3BzIiwic3ZnIiwic2VsZWN0IiwiYXBwZW5kIiwiYXR0ciIsInN0eWxlIiwieCIsInNjYWxlTGluZWFyIiwiZG9tYWluIiwicmFuZ2UiLCJ5Iiwic2VsZWN0QWxsIiwiZGF0YSIsImVudGVyIiwiZCIsImNvbG9yIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQU1BLFFBQVFDLFFBQVEsT0FBUixDQUFkO0FBQ0EsSUFBTUMsY0FBY0QsUUFBUSxvQkFBUixDQUFwQjtBQUNBLElBQU1FLEtBQUtGLFFBQVEsSUFBUixDQUFYOztBQUVBLElBQU1HLE9BQU8sR0FBYjs7SUFFTUMsaUI7Ozs7Ozs7Ozs7OytCQUVPQyxJLEVBQU1DLEssRUFBTztBQUN0QixVQUFNQyxNQUFNLEtBQUtBLEdBQUwsR0FBV0wsR0FBR00sTUFBSCxDQUFVSCxJQUFWLEVBQWdCSSxNQUFoQixDQUF1QixLQUF2QixDQUF2QjtBQUNBRixVQUFJRyxJQUFKLENBQVMsU0FBVCxXQUEyQlAsSUFBM0IsU0FBbUNBLElBQW5DLEVBQ0dRLEtBREgsQ0FDUyxPQURULEVBQ2tCLE1BRGxCLEVBRUdBLEtBRkgsQ0FFUyxRQUZULEVBRW1CLE1BRm5COztBQUlBLFVBQU1DLElBQUksS0FBS0EsQ0FBTCxHQUFTVixHQUFHVyxXQUFILEdBQWlCQyxNQUFqQixDQUF3QixDQUFDLENBQUQsRUFBSSxFQUFKLENBQXhCLEVBQWlDQyxLQUFqQyxDQUF1QyxDQUFDLENBQUQsRUFBSVosSUFBSixDQUF2QyxDQUFuQjtBQUNBLFVBQU1hLElBQUksS0FBS0EsQ0FBTCxHQUFTZCxHQUFHVyxXQUFILEdBQWlCQyxNQUFqQixDQUF3QixDQUFDLENBQUQsRUFBSSxFQUFKLENBQXhCLEVBQWlDQyxLQUFqQyxDQUF1QyxDQUFDWixJQUFELEVBQU8sQ0FBUCxDQUF2QyxDQUFuQjs7QUFFQUksVUFBSVUsU0FBSixDQUFjLFFBQWQsRUFDR0MsSUFESCxDQUNRWixNQUFNWSxJQURkLEVBRUdDLEtBRkgsR0FHR1YsTUFISCxDQUdVLFFBSFYsRUFJR0MsSUFKSCxDQUlRLElBSlIsRUFJYyxVQUFDVSxDQUFEO0FBQUEsZUFBT1IsRUFBRVEsRUFBRWQsTUFBTU0sQ0FBUixDQUFGLENBQVA7QUFBQSxPQUpkLEVBS0dGLElBTEgsQ0FLUSxJQUxSLEVBS2MsVUFBQ1UsQ0FBRDtBQUFBLGVBQU9KLEVBQUVJLEVBQUVkLE1BQU1VLENBQVIsQ0FBRixDQUFQO0FBQUEsT0FMZCxFQU1HTixJQU5ILENBTVEsR0FOUixFQU1hLEVBTmIsRUFPR0EsSUFQSCxDQU9RLFNBUFIsRUFPbUIsR0FQbkIsRUFRR0EsSUFSSCxDQVFRLE1BUlIsRUFRZ0JKLE1BQU1lLEtBUnRCO0FBVUQ7OzsyQkFFTWYsSyxFQUFPO0FBQUE7O0FBQ1osV0FBS0MsR0FBTCxDQUFTVSxTQUFULENBQW1CLFFBQW5CLEVBQ0dLLFVBREgsR0FFR0MsUUFGSCxDQUVZLEdBRlosRUFHR2IsSUFISCxDQUdRLE1BSFIsRUFHZ0JKLE1BQU1lLEtBSHRCLEVBSUdYLElBSkgsQ0FJUSxJQUpSLEVBSWMsVUFBQ1UsQ0FBRDtBQUFBLGVBQU8sT0FBS1IsQ0FBTCxDQUFPUSxFQUFFZCxNQUFNTSxDQUFSLENBQVAsQ0FBUDtBQUFBLE9BSmQsRUFLR0YsSUFMSCxDQUtRLElBTFIsRUFLYyxVQUFDVSxDQUFEO0FBQUEsZUFBTyxPQUFLSixDQUFMLENBQU9JLEVBQUVkLE1BQU1VLENBQVIsQ0FBUCxDQUFQO0FBQUEsT0FMZDtBQU1EOzs7O0VBOUI2QmYsVzs7QUFpQ2hDdUIsT0FBT0MsT0FBUCxHQUFpQnJCLGlCQUFqQiIsImZpbGUiOiJteS1kMy1jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBEM0NvbXBvbmVudCA9IHJlcXVpcmUoJ2lkeWxsLWQzLWNvbXBvbmVudCcpO1xuY29uc3QgZDMgPSByZXF1aXJlKCdkMycpO1xuXG5jb25zdCBzaXplID0gNjAwO1xuXG5jbGFzcyBDdXN0b21EM0NvbXBvbmVudCBleHRlbmRzIEQzQ29tcG9uZW50IHtcblxuICBpbml0aWFsaXplKG5vZGUsIHByb3BzKSB7XG4gICAgY29uc3Qgc3ZnID0gdGhpcy5zdmcgPSBkMy5zZWxlY3Qobm9kZSkuYXBwZW5kKCdzdmcnKTtcbiAgICBzdmcuYXR0cigndmlld0JveCcsIGAwIDAgJHtzaXplfSAke3NpemV9YClcbiAgICAgIC5zdHlsZSgnd2lkdGgnLCAnMTAwJScpXG4gICAgICAuc3R5bGUoJ2hlaWdodCcsICdhdXRvJyk7XG5cbiAgICBjb25zdCB4ID0gdGhpcy54ID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIDEwXSkucmFuZ2UoWzAsIHNpemVdKTtcbiAgICBjb25zdCB5ID0gdGhpcy55ID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIDEwXSkucmFuZ2UoW3NpemUsIDBdKTtcblxuICAgIHN2Zy5zZWxlY3RBbGwoJ2NpcmNsZScpXG4gICAgICAuZGF0YShwcm9wcy5kYXRhKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAuYXR0cignY3gnLCAoZCkgPT4geChkW3Byb3BzLnhdKSlcbiAgICAgIC5hdHRyKCdjeScsIChkKSA9PiB5KGRbcHJvcHMueV0pKVxuICAgICAgLmF0dHIoJ3InLCAxMClcbiAgICAgIC5hdHRyKCdvcGFjaXR5JywgMC42KVxuICAgICAgLmF0dHIoJ2ZpbGwnLCBwcm9wcy5jb2xvcik7XG5cbiAgfVxuXG4gIHVwZGF0ZShwcm9wcykge1xuICAgIHRoaXMuc3ZnLnNlbGVjdEFsbCgnY2lyY2xlJylcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbig1MDApXG4gICAgICAuYXR0cignZmlsbCcsIHByb3BzLmNvbG9yKVxuICAgICAgLmF0dHIoJ2N4JywgKGQpID0+IHRoaXMueChkW3Byb3BzLnhdKSlcbiAgICAgIC5hdHRyKCdjeScsIChkKSA9PiB0aGlzLnkoZFtwcm9wcy55XSkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3VzdG9tRDNDb21wb25lbnQ7XG4iXX0=","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js","d3":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3/build/d3.node.js","idyll-d3-component":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-d3-component/lib.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/utils/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/utils/index.js","source":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar _scrollMonitorEvents;\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];\n  }return target;\n}\n\nvar values = require('object.values');\nvar entries = require('object.entries');\n\nvar evalExpression = exports.evalExpression = function evalExpression(acc, expr, key, context) {\n  var e = void 0;\n  if (key && (key.match(/on[A-Z].*/) || key.match(/handle[A-Z].*/))) {\n    var setState = setState;\n    e = '\\n      (() => {\\n          ' + Object.keys(acc).filter(function (key) {\n      return expr.includes(key);\n    }).map(function (key) {\n      if (key === 'refs') {\n        // delete each ref's domNode property\n        // because it can't be serialized\n        values(acc[key]).forEach(function (v) {\n          delete v.domNode;\n        });\n        // add `refs` const object graph to function scope\n        return 'var ' + key + ' = JSON.parse(\\'' + JSON.stringify(acc[key]) + '\\')';\n      }\n      return 'var ' + key + ' = ' + JSON.stringify(acc[key]) + ';';\n    }).join('\\n') + '\\n          ' + expr + ';\\n          context.update({ ' + Object.keys(acc).filter(function (key) {\n      return expr.includes(key) && key !== 'refs';\n    }).map(function (key) {\n      return key + ': ' + key;\n    }).join(', ') + '});\\n      })()\\n    ';\n\n    return function () {\n      eval(e);\n    }.bind(context || {});\n  } else {\n    e = '\\n      (() => {\\n        ' + Object.keys(acc).filter(function (key) {\n      return expr.includes(key);\n    }).map(function (key) {\n      if (key === 'refs') {\n        // delete each ref's domNode property\n        // because it can't be serialized\n        values(acc[key]).forEach(function (v) {\n          delete v.domNode;\n        });\n        // add `refs` const object graph to function scope\n        return 'var ' + key + ' = JSON.parse(\\'' + JSON.stringify(acc[key]) + '\\')';\n      }\n      return 'var ' + key + ' = ' + JSON.stringify(acc[key]) + ';';\n    }).join('\\n') + '\\n        return ' + expr + ';\\n      })()\\n    ';\n  }\n\n  try {\n    return eval(e);\n  } catch (err) {}\n};\n\nvar getVars = exports.getVars = function getVars(arr) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var evalContext = arguments[2];\n\n  var pluck = function pluck(acc, val) {\n    var variableType = val[0],\n        _val$ = val[1],\n        attrs = _val$ === undefined ? [] : _val$;\n    var nameArr = attrs[0],\n        valueArr = attrs[1];\n\n    if (!nameArr || !valueArr) return acc;\n\n    var _nameArr$ = nameArr[1],\n        nameValue = _nameArr$[1];\n    var _valueArr$ = valueArr[1],\n        valueType = _valueArr$[0],\n        valueValue = _valueArr$[1];\n\n    switch (valueType) {\n      case 'value':\n        acc[nameValue] = valueValue;\n        break;\n      case 'variable':\n        if (context.hasOwnProperty(valueValue)) {\n          acc[nameValue] = context[valueValue];\n        } else {\n          acc[nameValue] = evalExpression(context, expr);\n        }\n        break;\n      case 'expression':\n        var expr = valueValue;\n        if (variableType === 'var') {\n          acc[nameValue] = evalExpression(context, expr);\n        } else {\n          acc[nameValue] = {\n            value: evalExpression(context, expr),\n            update: function update(newState, oldState) {\n              return evalExpression(Object.assign({}, oldState, newState), expr);\n            }\n          };\n        }\n    }\n\n    return acc;\n  };\n\n  return arr.reduce(pluck, {});\n};\n\nvar getData = exports.getData = function getData(arr) {\n  var datasets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var pluck = function pluck(acc, val) {\n    var attrs = val[1];\n    var nameArr = attrs[0];\n    var _nameArr$2 = nameArr[1],\n        nameValue = _nameArr$2[1];\n\n    acc[nameValue] = datasets[nameValue];\n\n    return acc;\n  };\n\n  return arr.reduce(pluck, {});\n};\n\nvar splitAST = exports.splitAST = function splitAST(ast) {\n  var state = {\n    vars: [],\n    derived: [],\n    data: [],\n    elements: []\n  };\n\n  var handleNode = function handleNode(storeElements) {\n    return function (node) {\n      var name = node[0],\n          props = node[1],\n          children = node[2];\n\n      if (name === 'var') {\n        state.vars.push(node);\n      } else if (state[name]) {\n        state[name].push(node);\n      } else if (storeElements) {\n        state.elements.push(node);\n      }\n      if (!children || typeof children === 'string') {\n        return;\n      }\n      children.forEach(handleNode(false));\n    };\n  };\n\n  ast.forEach(handleNode(true));\n  return state;\n};\n\nvar hooks = exports.hooks = ['onEnterView', 'onEnterViewFully', 'onExitView', 'onExitViewFully'];\n\nvar scrollMonitorEvents = exports.scrollMonitorEvents = (_scrollMonitorEvents = {\n  'onEnterView': 'enterViewport',\n  'onExitViewFully': 'fullyEnterViewport',\n  'onExitView': 'partiallyExitViewport'\n}, _scrollMonitorEvents['onExitViewFully'] = 'exitViewport', _scrollMonitorEvents);\n\nvar translate = exports.translate = function translate(arr) {\n  var attrConvert = function attrConvert(list) {\n    return list.reduce(function (acc, _ref) {\n      var name = _ref[0],\n          _ref$ = _ref[1],\n          type = _ref$[0],\n          val = _ref$[1];\n\n      if (type === 'variable') {\n        acc.__vars__ = acc.__vars__ || {};\n        acc.__vars__[name] = val;\n      }\n      // each node keeps a list of props that are expressions\n      if (type === 'expression') {\n        acc.__expr__ = acc.__expr__ || {};\n        acc.__expr__[name] = val;\n      }\n      // flag nodes that define a hook function\n      if (hooks.includes(name)) {\n        acc.hasHook = true;\n      };\n\n      acc[name] = val;\n      return acc;\n    }, {});\n  };\n\n  var tNode = function tNode(node) {\n    if (typeof node === 'string') return node;\n\n    if (node.length === 3) {\n      var name = node[0],\n          attrs = node[1],\n          children = node[2];\n\n      return _extends({\n        component: name\n      }, attrConvert(attrs), {\n        children: children.map(tNode)\n      });\n    }\n  };\n\n  return splitAST(arr).elements.map(tNode);\n};\n\nvar mapTree = exports.mapTree = function mapTree(tree, mapFn) {\n  var filterFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {\n    return true;\n  };\n\n  var walkFn = function walkFn(acc, node) {\n    if (typeof node !== 'string') {\n      if (node.children) {\n        // translated schema\n        node.children = node.children.reduce(walkFn, []);\n      } else {\n        // compiler AST\n        node[2] = node[2].reduce(walkFn, []);\n      }\n    }\n\n    if (filterFn(node)) acc.push(mapFn(node));\n    return acc;\n  };\n\n  return tree.reduce(walkFn, []);\n};\n\nvar filterASTForDocument = exports.filterASTForDocument = function filterASTForDocument(ast) {\n  return mapTree(ast, function (n) {\n    return n;\n  }, function (_ref2) {\n    var name = _ref2[0];\n    return name !== 'meta';\n  });\n};\n\nvar findWrapTargets = function findWrapTargets(schema, state) {\n  var targets = [];\n  var stateKeys = Object.keys(state);\n\n  // always return node so we can walk the whole tree\n  // but collect and ultimately return just the nodes\n  // we are interested in wrapping\n  mapTree(schema, function (node) {\n    if (typeof node === 'string') return node;\n\n    if (node.hasHook) {\n      targets.push(node);\n      return node;\n    }\n\n    // wrap all custom components\n    var startsWith = node.component.charAt(0);\n    if (startsWith === startsWith.toUpperCase()) {\n      targets.push(node);\n      return node;\n    }\n\n    // pull off the props we don't need to check\n\n    var component = node.component,\n        children = node.children,\n        __vars__ = node.__vars__,\n        __expr__ = node.__expr__,\n        props = _objectWithoutProperties(node, ['component', 'children', '__vars__', '__expr__']);\n\n    var expressions = Object.keys(__expr__ || {});\n    var variables = Object.keys(__vars__ || {});\n\n    // iterate over the node's prop values\n    entries(props).forEach(function (_ref3) {\n      var key = _ref3[0],\n          val = _ref3[1];\n\n      // avoid checking more props if we know it's a match\n      if (targets.includes(node)) return;\n\n      // Include nodes that reference a variable or expression.\n      if (variables.includes(key) || expressions.includes(key)) {\n        targets.push(node);\n      }\n    });\n\n    return node;\n  });\n\n  return targets;\n};\nexports.findWrapTargets = findWrapTargets;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"object.values":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/index.js","object.entries":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/utils/schema2element.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/utils/schema2element.js","source":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _reactDomFactories = require('react-dom-factories');\n\nvar _reactDomFactories2 = _interopRequireDefault(_reactDomFactories);\n\nvar _changeCase = require('change-case');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];\n  }return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar _componentMap = new WeakMap();\n\nvar ReactJsonSchema = function () {\n  function ReactJsonSchema(componentMap) {\n    _classCallCheck(this, ReactJsonSchema);\n\n    if (componentMap) this.setComponentMap(componentMap);\n  }\n\n  ReactJsonSchema.prototype.parseSchema = function parseSchema(schema) {\n    var element = null;\n    var elements = null;\n    if (Array.isArray(schema)) {\n      elements = this.parseSubSchemas(schema);\n    } else {\n      element = this.createComponent(schema);\n    }\n    return element || elements;\n  };\n\n  ReactJsonSchema.prototype.parseSubSchemas = function parseSubSchemas() {\n    var subSchemas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    var Components = [];\n    var index = 0;\n    for (var _iterator = subSchemas, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var subSchema = _ref;\n\n      if (typeof subSchema === 'string') {\n        Components.push(subSchema);\n      } else {\n        subSchema.key = typeof subSchema.key !== 'undefined' ? subSchema.key : index;\n        Components.push(this.parseSchema(subSchema));\n        index++;\n      }\n    }\n    return Components;\n  };\n\n  ReactJsonSchema.prototype.createComponent = function createComponent(schema) {\n    var component = schema.component,\n        children = schema.children,\n        text = schema.text,\n        rest = _objectWithoutProperties(schema, ['component', 'children', 'text']);\n\n    var Component = this.resolveComponent(schema);\n    var Children = typeof text !== 'undefined' ? text : this.resolveComponentChildren(schema);\n    return (0, _react.createElement)(Component, rest, Children);\n  };\n\n  ReactJsonSchema.prototype.resolveComponent = function resolveComponent(schema) {\n    var componentMap = this.getComponentMap();\n    var Component = void 0;\n\n    // bail early if there is no component name\n    if (!schema.hasOwnProperty('component')) {\n      throw new Error('ReactJsonSchema could not resolve a component due to a missing component attribute in the schema.');\n    }\n\n    // if it's already a ref bail early\n    if (schema.component === Object(schema.component)) {\n      return schema.component;\n    }\n\n    var _schema$component$spl = schema.component.split('.'),\n        name = _schema$component$spl[0],\n        subs = _schema$component$spl.slice(1);\n\n    // find the def in the provided map\n\n\n    if (componentMap) {\n      Component = componentMap[name];\n      if (!Component) Component = componentMap[(0, _changeCase.paramCase)(name)];\n      if (!Component) Component = componentMap[(0, _changeCase.pascalCase)(name)];\n\n      for (var i = 0; i < subs.length; i++) {\n        Component = Component[subs[i]];\n      }\n    }\n\n    // if still nothing found it's a native DOM component or an error\n    if (!Component) {\n      if (_reactDomFactories2.default.hasOwnProperty(name)) {\n        Component = schema.component;\n      } else {\n        throw new Error('ReactJsonSchema could not find an implementation for: ' + schema.component);\n      }\n    }\n\n    // if there is a default prop (CommonJS) return that\n    return Component.default || Component;\n  };\n\n  ReactJsonSchema.prototype.resolveComponentChildren = function resolveComponentChildren(schema) {\n    var children = schema.hasOwnProperty('children') ? this.parseSchema(schema.children) : [];\n    return children.length ? children : undefined;\n  };\n\n  ReactJsonSchema.prototype.getComponentMap = function getComponentMap() {\n    return _componentMap.get(this);\n  };\n\n  ReactJsonSchema.prototype.setComponentMap = function setComponentMap(componentMap) {\n    _componentMap.set(this, componentMap);\n  };\n\n  return ReactJsonSchema;\n}();\n\nexports.default = ReactJsonSchema;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js","react-dom-factories":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom-factories/index.js","change-case":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/change-case/change-case.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/index.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _scrollparent = require('scrollparent');\n\nvar _scrollparent2 = _interopRequireDefault(_scrollparent);\n\nvar _scrollmonitor = require('scrollmonitor');\n\nvar _scrollmonitor2 = _interopRequireDefault(_scrollmonitor);\n\nvar _schema2element = require('./utils/schema2element');\n\nvar _schema2element2 = _interopRequireDefault(_schema2element);\n\nvar _object = require('object.entries');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _object3 = require('object.values');\n\nvar _object4 = _interopRequireDefault(_object3);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];\n  }return target;\n}\n\nvar updatePropsCallbacks = [];\nvar updateRefsCallbacks = [];\nvar scrollWatchers = [];\nvar scrollOffsets = {};\nvar refCache = {};\nvar evalContext = {};\nvar scrollContainer = void 0;\n\nvar getRefs = function getRefs() {\n  var refs = {};\n  if (!scrollContainer) {\n    return;\n  }\n\n  scrollWatchers.forEach(function (watcher) {\n    // left and right props assume no horizontal scrolling\n    var watchItem = watcher.watchItem,\n        callbacks = watcher.callbacks,\n        container = watcher.container,\n        recalculateLocation = watcher.recalculateLocation,\n        offsets = watcher.offsets,\n        watcherProps = _objectWithoutProperties(watcher, ['watchItem', 'callbacks', 'container', 'recalculateLocation', 'offsets']);\n\n    refs[watchItem.dataset.ref] = _extends({}, watcherProps, {\n      domNode: watchItem\n    });\n  });\n\n  return refs;\n};\n\nvar wrapperKey = 0;\n\nvar Wrapper = function (_React$PureComponent) {\n  _inherits(Wrapper, _React$PureComponent);\n\n  function Wrapper(props) {\n    _classCallCheck(this, Wrapper);\n\n    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));\n\n    _this.key = wrapperKey++;\n    _this.ref = {};\n    _this.onUpdateRefs = _this.onUpdateRefs.bind(_this);\n    _this.onUpdateProps = _this.onUpdateProps.bind(_this);\n\n    var vars = (0, _object4.default)(props.__vars__);\n    var exps = (0, _object4.default)(props.__expr__);\n\n    _this.usesRefs = exps.some(function (v) {\n      return v.includes('refs.');\n    });\n\n    // listen for props updates IF we care about them\n    if (vars.length || exps.length) {\n      // called with new doc state\n      // when any component calls updateProps()\n      updatePropsCallbacks.push(_this.onUpdateProps);\n    }\n\n    // listen for ref updates IF we care about them\n    if (props.hasHook || _this.usesRefs) {\n      updateRefsCallbacks.push(_this.onUpdateRefs);\n    }\n\n    _this.state = { hasError: false, error: null };\n    return _this;\n  }\n\n  Wrapper.prototype.componentDidCatch = function componentDidCatch(error, info) {\n    this.setState({ hasError: true, error: error });\n  };\n\n  Wrapper.prototype.onUpdateProps = function onUpdateProps(newState, changedKeys) {\n    var _props = this.props,\n        __vars__ = _props.__vars__,\n        __expr__ = _props.__expr__;\n\n    // were there changes to any vars we track?\n    // or vars our expressions reference?\n\n    var shouldUpdate = changedKeys.some(function (k) {\n      return (0, _object4.default)(__vars__).includes(k) || (0, _object4.default)(__expr__).some(function (expr) {\n        return expr.includes(k);\n      });\n    });\n    // if nothing we care about changed bail out and don't re-render\n    if (!shouldUpdate) return;\n\n    // update this component's state\n    var nextState = {};\n    // pull in the latest value for any tracked vars\n    Object.keys(__vars__).forEach(function (key) {\n      nextState[key] = newState[__vars__[key]];\n    });\n    // re-run this component's expressions using the latest doc state\n    Object.keys(__expr__).forEach(function (key) {\n      nextState[key] = (0, _utils.evalExpression)(newState, __expr__[key], key, evalContext);\n    });\n    // trigger a re-render of this component\n    // and more importantly, its wrapped component\n    this.setState(nextState);\n  };\n\n  Wrapper.prototype.onUpdateRefs = function onUpdateRefs(newState) {\n    var __expr__ = this.props.__expr__;\n\n    if (this.usesRefs) {\n      var nextState = { refs: newState.refs };\n      (0, _object2.default)(__expr__).forEach(function (_ref) {\n        var key = _ref[0],\n            val = _ref[1];\n\n        if (!key.includes('refs.')) {\n          return;\n        }\n        nextState[key] = (0, _utils.evalExpression)(newState, val, key, evalContext);\n      });\n\n      // trigger a render with latest state\n      this.setState(nextState);\n    }\n  };\n\n  Wrapper.prototype.componentWillUnmount = function componentWillUnmount() {\n    var propsIndex = updatePropsCallbacks.indexOf(this.onUpdateProps);\n    if (propsIndex > -1) updatePropsCallbacks.splice(propsIndex, 1);\n\n    var refsIndex = updateRefsCallbacks.indexOf(this.onUpdateRefs);\n    if (refsIndex > -1) updateRefsCallbacks.splice(refsIndex, 1);\n  };\n\n  Wrapper.prototype.render = function render() {\n    var _this2 = this;\n\n    if (this.state.hasError) {\n      return _react2.default.createElement('div', { style: { border: 'solid red 1px', padding: 10 } }, this.state.error.message);\n    }\n\n    var _state = this.state,\n        __expr__ = _state.__expr__,\n        __vars__ = _state.__vars__,\n        hasError = _state.hasError,\n        state = _objectWithoutProperties(_state, ['__expr__', '__vars__', 'hasError']);\n\n    return _react2.default.Children.map(this.props.children, function (c, i) {\n      return _react2.default.cloneElement(c, _extends({ key: _this2.key + '-' + i }, state));\n    });\n  };\n\n  return Wrapper;\n}(_react2.default.PureComponent);\n\nvar getDerivedValues = function getDerivedValues(dVars) {\n  var o = {};\n  Object.keys(dVars).forEach(function (key) {\n    return o[key] = dVars[key].value;\n  });\n  return o;\n};\n\nvar IdyllDocument = function (_React$PureComponent2) {\n  _inherits(IdyllDocument, _React$PureComponent2);\n\n  function IdyllDocument(props) {\n    _classCallCheck(this, IdyllDocument);\n\n    var _this3 = _possibleConstructorReturn(this, _React$PureComponent2.call(this, props));\n\n    _this3.scrollListener = _this3.scrollListener.bind(_this3);\n    _this3.initScrollListener = _this3.initScrollListener.bind(_this3);\n\n    var ast = (0, _utils.filterASTForDocument)(props.ast);\n\n    var _splitAST = (0, _utils.splitAST)(ast),\n        vars = _splitAST.vars,\n        derived = _splitAST.derived,\n        data = _splitAST.data,\n        elements = _splitAST.elements;\n\n    var initialState = _extends({}, (0, _utils.getVars)(vars), (0, _utils.getData)(data, props.datasets));\n    var derivedVars = _this3.derivedVars = (0, _utils.getVars)(derived, initialState);\n\n    var state = _this3.state = _extends({}, initialState, getDerivedValues(derivedVars));\n\n    _this3.updateState = function (newState) {\n      // merge new doc state with old\n      var newMergedState = _extends({}, _this3.state, newState);\n      // update derived values\n      var newDerivedValues = getDerivedValues((0, _utils.getVars)(derived, newMergedState));\n      var nextState = _extends({}, newMergedState, newDerivedValues);\n      var changedKeys = Object.keys(state).reduce(function (acc, k) {\n        if (state[k] !== nextState[k]) acc.push(k);\n        return acc;\n      }, []);\n      // Update doc state reference.\n      // We re-use the same object here so that\n      // IdyllDocument.state can be accurately checked in tests\n      state = Object.assign(state, nextState);\n      // pass the new doc state to all listeners aka component wrappers\n      updatePropsCallbacks.forEach(function (f) {\n        return f(state, changedKeys);\n      });\n    };\n\n    evalContext.update = _this3.updateState;\n\n    var rjs = new _schema2element2.default(_extends({}, props.components, { Wrapper: Wrapper }));\n    var schema = (0, _utils.translate)(ast);\n\n    var wrapTargets = (0, _utils.findWrapTargets)(schema, _this3.state);\n\n    var refCounter = 0;\n\n    var transformedSchema = (0, _utils.mapTree)(schema, function (node) {\n      if (typeof node === 'string') return node;\n\n      // transform refs from strings to functions and store them\n      if (node.ref || node.hasHook) {\n        node.refName = node.ref || node.component + (refCounter++).toString();\n        node.ref = function (el) {\n          if (!el) return;\n          var domNode = _reactDom2.default.findDOMNode(el);\n          domNode.dataset.ref = node.refName;\n          scrollOffsets[node.refName] = node.scrollOffset || 0;\n          refCache[node.refName] = {\n            props: node,\n            domNode: domNode\n          };\n        };\n      }\n\n      if (!wrapTargets.includes(node)) return node;\n\n      var component = node.component,\n          children = node.children,\n          key = node.key,\n          _node$__vars__ = node.__vars__,\n          __vars__ = _node$__vars__ === undefined ? {} : _node$__vars__,\n          _node$__expr__ = node.__expr__,\n          __expr__ = _node$__expr__ === undefined ? {} : _node$__expr__,\n          props = _objectWithoutProperties(node, ['component', 'children', 'key', '__vars__', '__expr__']);\n\n      // assign the initial values for tracked vars and expressions\n\n\n      Object.keys(props).forEach(function (k) {\n        if (__vars__[k]) {\n          node[k] = state[__vars__[k]];\n        }\n        if (__expr__[k] && !__expr__[k].includes('refs.')) {\n          if (_utils.hooks.indexOf(k) > -1) {\n            return;\n          }\n          node[k] = (0, _utils.evalExpression)(state, __expr__[k], k, evalContext);\n        }\n      });\n\n      // define the function wrapped components will call via this.props.updateProps\n      node.updateProps = function (newProps) {\n        // init new doc state object\n        var newState = {};\n        // iterate over passed in updates\n        Object.keys(newProps).forEach(function (k) {\n          // if a tracked var was updated get its new value\n          if (__vars__[k]) {\n            newState[__vars__[k]] = newProps[k];\n          }\n        });\n        _this3.updateState(newState);\n      };\n\n      return {\n        component: Wrapper,\n        __vars__: __vars__,\n        __expr__: __expr__,\n        hasHook: node.hasHook,\n        refName: node.refName,\n        children: [node]\n      };\n    });\n\n    _this3.kids = _react2.default.createElement('div', { className: 'idyll-root', ref: _this3.initScrollListener }, rjs.parseSchema(transformedSchema));\n    return _this3;\n  }\n\n  IdyllDocument.prototype.scrollListener = function scrollListener() {\n    var _this4 = this;\n\n    var refs = getRefs();\n    updateRefsCallbacks.forEach(function (f) {\n      return f(_extends({}, _this4.state, { refs: refs }));\n    });\n  };\n\n  IdyllDocument.prototype.initScrollListener = function initScrollListener(el) {\n    var _this5 = this;\n\n    if (!el) return;\n\n    var scroller = (0, _scrollparent2.default)(el);\n    if (scroller === document.documentElement) {\n      scroller = document.body;\n    }\n    scrollContainer = _scrollmonitor2.default.createContainer(scroller);\n    Object.keys(refCache).forEach(function (key) {\n      var _refCache$key = refCache[key],\n          props = _refCache$key.props,\n          domNode = _refCache$key.domNode;\n\n      var watcher = scrollContainer.create(domNode, scrollOffsets[key]);\n      _utils.hooks.forEach(function (hook) {\n        if (props[hook]) {\n          watcher[_utils.scrollMonitorEvents[hook]](function () {\n            (0, _utils.evalExpression)(_this5.state, props[hook], hook, evalContext)();\n          });\n        }\n      });\n      scrollWatchers.push(watcher);\n    });\n    if (scroller === document.body) {\n      scroller = window;\n    }\n    scroller.addEventListener('scroll', this.scrollListener);\n  };\n\n  IdyllDocument.prototype.updateDerivedVars = function updateDerivedVars(newState) {\n    var _this6 = this;\n\n    Object.keys(this.derivedVars).forEach(function (dv) {\n      _this6.derivedVars[dv].value = _this6.derivedVars[dv].update(newState, _this6.state);\n    });\n  };\n\n  IdyllDocument.prototype.getDerivedVars = function getDerivedVars() {\n    var _this7 = this;\n\n    var dvs = {};\n    Object.keys(this.derivedVars).forEach(function (dv) {\n      dvs[dv] = _this7.derivedVars[dv].value;\n    });\n    return dvs;\n  };\n\n  IdyllDocument.prototype.componentDidMount = function componentDidMount() {\n    var _this8 = this;\n\n    var refs = getRefs();\n    updateRefsCallbacks.forEach(function (f) {\n      return f(_extends({}, _this8.state, { refs: refs }));\n    });\n  };\n\n  IdyllDocument.prototype.render = function render() {\n    return this.kids;\n  };\n\n  return IdyllDocument;\n}(_react2.default.PureComponent);\n\nexports.default = IdyllDocument;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js","react-dom":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom/umd/react-dom.production.min.js","scrollparent":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/scrollparent/scrollparent.js","scrollmonitor":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/scrollmonitor/scrollMonitor.js","object.entries":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/index.js","object.values":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/index.js","./utils":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/utils/index.js","./utils/schema2element":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/utils/schema2element.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-axis/build/d3-axis.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-axis/build/d3-axis.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-axis/ Version 1.0.8. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var slice = Array.prototype.slice;\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var top = 1;\n  var right = 2;\n  var bottom = 3;\n  var left = 4;\n  var epsilon = 1e-6;\n\n  function translateX(x) {\n    return \"translate(\" + (x + 0.5) + \",0)\";\n  }\n\n  function translateY(y) {\n    return \"translate(0,\" + (y + 0.5) + \")\";\n  }\n\n  function number(scale) {\n    return function (d) {\n      return +scale(d);\n    };\n  }\n\n  function center(scale) {\n    var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.\n    if (scale.round()) offset = Math.round(offset);\n    return function (d) {\n      return +scale(d) + offset;\n    };\n  }\n\n  function entering() {\n    return !this.__axis;\n  }\n\n  function axis(orient, scale) {\n    var tickArguments = [],\n        tickValues = null,\n        tickFormat = null,\n        tickSizeInner = 6,\n        tickSizeOuter = 6,\n        tickPadding = 3,\n        k = orient === top || orient === left ? -1 : 1,\n        x = orient === left || orient === right ? \"x\" : \"y\",\n        transform = orient === top || orient === bottom ? translateX : translateY;\n\n    function axis(context) {\n      var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,\n          format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity : tickFormat,\n          spacing = Math.max(tickSizeInner, 0) + tickPadding,\n          range = scale.range(),\n          range0 = +range[0] + 0.5,\n          range1 = +range[range.length - 1] + 0.5,\n          position = (scale.bandwidth ? center : number)(scale.copy()),\n          selection = context.selection ? context.selection() : context,\n          path = selection.selectAll(\".domain\").data([null]),\n          tick = selection.selectAll(\".tick\").data(values, scale).order(),\n          tickExit = tick.exit(),\n          tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n          line = tick.select(\"line\"),\n          text = tick.select(\"text\");\n\n      path = path.merge(path.enter().insert(\"path\", \".tick\").attr(\"class\", \"domain\").attr(\"stroke\", \"#000\"));\n\n      tick = tick.merge(tickEnter);\n\n      line = line.merge(tickEnter.append(\"line\").attr(\"stroke\", \"#000\").attr(x + \"2\", k * tickSizeInner));\n\n      text = text.merge(tickEnter.append(\"text\").attr(\"fill\", \"#000\").attr(x, k * spacing).attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \"0.71em\" : \"0.32em\"));\n\n      if (context !== selection) {\n        path = path.transition(context);\n        tick = tick.transition(context);\n        line = line.transition(context);\n        text = text.transition(context);\n\n        tickExit = tickExit.transition(context).attr(\"opacity\", epsilon).attr(\"transform\", function (d) {\n          return isFinite(d = position(d)) ? transform(d) : this.getAttribute(\"transform\");\n        });\n\n        tickEnter.attr(\"opacity\", epsilon).attr(\"transform\", function (d) {\n          var p = this.parentNode.__axis;return transform(p && isFinite(p = p(d)) ? p : position(d));\n        });\n      }\n\n      tickExit.remove();\n\n      path.attr(\"d\", orient === left || orient == right ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter : \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter);\n\n      tick.attr(\"opacity\", 1).attr(\"transform\", function (d) {\n        return transform(position(d));\n      });\n\n      line.attr(x + \"2\", k * tickSizeInner);\n\n      text.attr(x, k * spacing).text(format);\n\n      selection.filter(entering).attr(\"fill\", \"none\").attr(\"font-size\", 10).attr(\"font-family\", \"sans-serif\").attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\n      selection.each(function () {\n        this.__axis = position;\n      });\n    }\n\n    axis.scale = function (_) {\n      return arguments.length ? (scale = _, axis) : scale;\n    };\n\n    axis.ticks = function () {\n      return tickArguments = slice.call(arguments), axis;\n    };\n\n    axis.tickArguments = function (_) {\n      return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();\n    };\n\n    axis.tickValues = function (_) {\n      return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();\n    };\n\n    axis.tickFormat = function (_) {\n      return arguments.length ? (tickFormat = _, axis) : tickFormat;\n    };\n\n    axis.tickSize = function (_) {\n      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeInner = function (_) {\n      return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeOuter = function (_) {\n      return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n    };\n\n    axis.tickPadding = function (_) {\n      return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n    };\n\n    return axis;\n  }\n\n  function axisTop(scale) {\n    return axis(top, scale);\n  }\n\n  function axisRight(scale) {\n    return axis(right, scale);\n  }\n\n  function axisBottom(scale) {\n    return axis(bottom, scale);\n  }\n\n  function axisLeft(scale) {\n    return axis(left, scale);\n  }\n\n  exports.axisTop = axisTop;\n  exports.axisRight = axisRight;\n  exports.axisBottom = axisBottom;\n  exports.axisLeft = axisLeft;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-array/build/d3-array.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-array/build/d3-array.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-array/ Version 1.2.1. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var ascending = function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  };\n\n  var bisector = function bisector(compare) {\n    if (compare.length === 1) compare = ascendingComparator(compare);\n    return {\n      left: function left(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n        }\n        return lo;\n      },\n      right: function right(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  };\n\n  function ascendingComparator(f) {\n    return function (d, x) {\n      return ascending(f(d), x);\n    };\n  }\n\n  var ascendingBisect = bisector(ascending);\n  var bisectRight = ascendingBisect.right;\n  var bisectLeft = ascendingBisect.left;\n\n  var pairs = function pairs(array, f) {\n    if (f == null) f = pair;\n    var i = 0,\n        n = array.length - 1,\n        p = array[0],\n        pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) {\n      pairs[i] = f(p, p = array[++i]);\n    }return pairs;\n  };\n\n  function pair(a, b) {\n    return [a, b];\n  }\n\n  var cross = function cross(values0, values1, reduce) {\n    var n0 = values0.length,\n        n1 = values1.length,\n        values = new Array(n0 * n1),\n        i0,\n        i1,\n        i,\n        value0;\n\n    if (reduce == null) reduce = pair;\n\n    for (i0 = i = 0; i0 < n0; ++i0) {\n      for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n        values[i] = reduce(value0, values1[i1]);\n      }\n    }\n\n    return values;\n  };\n\n  var descending = function descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n\n  var number = function number(x) {\n    return x === null ? NaN : +x;\n  };\n\n  var variance = function variance(values, valueof) {\n    var n = values.length,\n        m = 0,\n        i = -1,\n        mean = 0,\n        value,\n        delta,\n        sum = 0;\n\n    if (valueof == null) {\n      while (++i < n) {\n        if (!isNaN(value = number(values[i]))) {\n          delta = value - mean;\n          mean += delta / ++m;\n          sum += delta * (value - mean);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (!isNaN(value = number(valueof(values[i], i, values)))) {\n          delta = value - mean;\n          mean += delta / ++m;\n          sum += delta * (value - mean);\n        }\n      }\n    }\n\n    if (m > 1) return sum / (m - 1);\n  };\n\n  var deviation = function deviation(array, f) {\n    var v = variance(array, f);\n    return v ? Math.sqrt(v) : v;\n  };\n\n  var extent = function extent(values, valueof) {\n    var n = values.length,\n        i = -1,\n        value,\n        min,\n        max;\n\n    if (valueof == null) {\n      while (++i < n) {\n        // Find the first comparable value.\n        if ((value = values[i]) != null && value >= value) {\n          min = max = value;\n          while (++i < n) {\n            // Compare the remaining values.\n            if ((value = values[i]) != null) {\n              if (min > value) min = value;\n              if (max < value) max = value;\n            }\n          }\n        }\n      }\n    } else {\n      while (++i < n) {\n        // Find the first comparable value.\n        if ((value = valueof(values[i], i, values)) != null && value >= value) {\n          min = max = value;\n          while (++i < n) {\n            // Compare the remaining values.\n            if ((value = valueof(values[i], i, values)) != null) {\n              if (min > value) min = value;\n              if (max < value) max = value;\n            }\n          }\n        }\n      }\n    }\n\n    return [min, max];\n  };\n\n  var array = Array.prototype;\n\n  var slice = array.slice;\n  var map = array.map;\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var range = function range(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  };\n\n  var e10 = Math.sqrt(50);\n  var e5 = Math.sqrt(10);\n  var e2 = Math.sqrt(2);\n\n  var ticks = function ticks(start, stop, count) {\n    var reverse,\n        i = -1,\n        n,\n        ticks,\n        step;\n\n    stop = +stop, start = +start, count = +count;\n    if (start === stop && count > 0) return [start];\n    if (reverse = stop < start) n = start, start = stop, stop = n;\n    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n    if (step > 0) {\n      start = Math.ceil(start / step);\n      stop = Math.floor(stop / step);\n      ticks = new Array(n = Math.ceil(stop - start + 1));\n      while (++i < n) {\n        ticks[i] = (start + i) * step;\n      }\n    } else {\n      start = Math.floor(start * step);\n      stop = Math.ceil(stop * step);\n      ticks = new Array(n = Math.ceil(start - stop + 1));\n      while (++i < n) {\n        ticks[i] = (start - i) / step;\n      }\n    }\n\n    if (reverse) ticks.reverse();\n\n    return ticks;\n  };\n\n  function tickIncrement(start, stop, count) {\n    var step = (stop - start) / Math.max(0, count),\n        power = Math.floor(Math.log(step) / Math.LN10),\n        error = step / Math.pow(10, power);\n    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n  }\n\n  function tickStep(start, stop, count) {\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\n        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n        error = step0 / step1;\n    if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n    return stop < start ? -step1 : step1;\n  }\n\n  var sturges = function sturges(values) {\n    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n  };\n\n  var histogram = function histogram() {\n    var value = identity,\n        domain = extent,\n        threshold = sturges;\n\n    function histogram(data) {\n      var i,\n          n = data.length,\n          x,\n          values = new Array(n);\n\n      for (i = 0; i < n; ++i) {\n        values[i] = value(data[i], i, data);\n      }\n\n      var xz = domain(values),\n          x0 = xz[0],\n          x1 = xz[1],\n          tz = threshold(values, x0, x1);\n\n      // Convert number of thresholds into uniform thresholds.\n      if (!Array.isArray(tz)) {\n        tz = tickStep(x0, x1, tz);\n        tz = range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive\n      }\n\n      // Remove any thresholds outside the domain.\n      var m = tz.length;\n      while (tz[0] <= x0) {\n        tz.shift(), --m;\n      }while (tz[m - 1] > x1) {\n        tz.pop(), --m;\n      }var bins = new Array(m + 1),\n          bin;\n\n      // Initialize bins.\n      for (i = 0; i <= m; ++i) {\n        bin = bins[i] = [];\n        bin.x0 = i > 0 ? tz[i - 1] : x0;\n        bin.x1 = i < m ? tz[i] : x1;\n      }\n\n      // Assign data to bins by value, ignoring any outside the domain.\n      for (i = 0; i < n; ++i) {\n        x = values[i];\n        if (x0 <= x && x <= x1) {\n          bins[bisectRight(tz, x, 0, m)].push(data[i]);\n        }\n      }\n\n      return bins;\n    }\n\n    histogram.value = function (_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n    };\n\n    histogram.domain = function (_) {\n      return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n    };\n\n    histogram.thresholds = function (_) {\n      return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n    };\n\n    return histogram;\n  };\n\n  var quantile = function quantile(values, p, valueof) {\n    if (valueof == null) valueof = number;\n    if (!(n = values.length)) return;\n    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n    if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n    var n,\n        i = (n - 1) * p,\n        i0 = Math.floor(i),\n        value0 = +valueof(values[i0], i0, values),\n        value1 = +valueof(values[i0 + 1], i0 + 1, values);\n    return value0 + (value1 - value0) * (i - i0);\n  };\n\n  var freedmanDiaconis = function freedmanDiaconis(values, min, max) {\n    values = map.call(values, number).sort(ascending);\n    return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n  };\n\n  var scott = function scott(values, min, max) {\n    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\n  };\n\n  var max = function max(values, valueof) {\n    var n = values.length,\n        i = -1,\n        value,\n        max;\n\n    if (valueof == null) {\n      while (++i < n) {\n        // Find the first comparable value.\n        if ((value = values[i]) != null && value >= value) {\n          max = value;\n          while (++i < n) {\n            // Compare the remaining values.\n            if ((value = values[i]) != null && value > max) {\n              max = value;\n            }\n          }\n        }\n      }\n    } else {\n      while (++i < n) {\n        // Find the first comparable value.\n        if ((value = valueof(values[i], i, values)) != null && value >= value) {\n          max = value;\n          while (++i < n) {\n            // Compare the remaining values.\n            if ((value = valueof(values[i], i, values)) != null && value > max) {\n              max = value;\n            }\n          }\n        }\n      }\n    }\n\n    return max;\n  };\n\n  var mean = function mean(values, valueof) {\n    var n = values.length,\n        m = n,\n        i = -1,\n        value,\n        sum = 0;\n\n    if (valueof == null) {\n      while (++i < n) {\n        if (!isNaN(value = number(values[i]))) sum += value;else --m;\n      }\n    } else {\n      while (++i < n) {\n        if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;else --m;\n      }\n    }\n\n    if (m) return sum / m;\n  };\n\n  var median = function median(values, valueof) {\n    var n = values.length,\n        i = -1,\n        value,\n        numbers = [];\n\n    if (valueof == null) {\n      while (++i < n) {\n        if (!isNaN(value = number(values[i]))) {\n          numbers.push(value);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (!isNaN(value = number(valueof(values[i], i, values)))) {\n          numbers.push(value);\n        }\n      }\n    }\n\n    return quantile(numbers.sort(ascending), 0.5);\n  };\n\n  var merge = function merge(arrays) {\n    var n = arrays.length,\n        m,\n        i = -1,\n        j = 0,\n        merged,\n        array;\n\n    while (++i < n) {\n      j += arrays[i].length;\n    }merged = new Array(j);\n\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n\n    return merged;\n  };\n\n  var min = function min(values, valueof) {\n    var n = values.length,\n        i = -1,\n        value,\n        min;\n\n    if (valueof == null) {\n      while (++i < n) {\n        // Find the first comparable value.\n        if ((value = values[i]) != null && value >= value) {\n          min = value;\n          while (++i < n) {\n            // Compare the remaining values.\n            if ((value = values[i]) != null && min > value) {\n              min = value;\n            }\n          }\n        }\n      }\n    } else {\n      while (++i < n) {\n        // Find the first comparable value.\n        if ((value = valueof(values[i], i, values)) != null && value >= value) {\n          min = value;\n          while (++i < n) {\n            // Compare the remaining values.\n            if ((value = valueof(values[i], i, values)) != null && min > value) {\n              min = value;\n            }\n          }\n        }\n      }\n    }\n\n    return min;\n  };\n\n  var permute = function permute(array, indexes) {\n    var i = indexes.length,\n        permutes = new Array(i);\n    while (i--) {\n      permutes[i] = array[indexes[i]];\n    }return permutes;\n  };\n\n  var scan = function scan(values, compare) {\n    if (!(n = values.length)) return;\n    var n,\n        i = 0,\n        j = 0,\n        xi,\n        xj = values[j];\n\n    if (compare == null) compare = ascending;\n\n    while (++i < n) {\n      if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {\n        xj = xi, j = i;\n      }\n    }\n\n    if (compare(xj, xj) === 0) return j;\n  };\n\n  var shuffle = function shuffle(array, i0, i1) {\n    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n\n    return array;\n  };\n\n  var sum = function sum(values, valueof) {\n    var n = values.length,\n        i = -1,\n        value,\n        sum = 0;\n\n    if (valueof == null) {\n      while (++i < n) {\n        if (value = +values[i]) sum += value; // Note: zero and null are equivalent.\n      }\n    } else {\n      while (++i < n) {\n        if (value = +valueof(values[i], i, values)) sum += value;\n      }\n    }\n\n    return sum;\n  };\n\n  var transpose = function transpose(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n\n  function length(d) {\n    return d.length;\n  }\n\n  var zip = function zip() {\n    return transpose(arguments);\n  };\n\n  exports.bisect = bisectRight;\n  exports.bisectRight = bisectRight;\n  exports.bisectLeft = bisectLeft;\n  exports.ascending = ascending;\n  exports.bisector = bisector;\n  exports.cross = cross;\n  exports.descending = descending;\n  exports.deviation = deviation;\n  exports.extent = extent;\n  exports.histogram = histogram;\n  exports.thresholdFreedmanDiaconis = freedmanDiaconis;\n  exports.thresholdScott = scott;\n  exports.thresholdSturges = sturges;\n  exports.max = max;\n  exports.mean = mean;\n  exports.median = median;\n  exports.merge = merge;\n  exports.min = min;\n  exports.pairs = pairs;\n  exports.permute = permute;\n  exports.quantile = quantile;\n  exports.range = range;\n  exports.scan = scan;\n  exports.shuffle = shuffle;\n  exports.sum = sum;\n  exports.ticks = ticks;\n  exports.tickIncrement = tickIncrement;\n  exports.tickStep = tickStep;\n  exports.transpose = transpose;\n  exports.variance = variance;\n  exports.zip = zip;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-collection/build/d3-collection.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-collection/build/d3-collection.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-collection/ Version 1.0.4. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var prefix = \"$\";\n\n  function Map() {}\n\n  Map.prototype = map.prototype = {\n    constructor: Map,\n    has: function has(key) {\n      return prefix + key in this;\n    },\n    get: function get(key) {\n      return this[prefix + key];\n    },\n    set: function set(key, value) {\n      this[prefix + key] = value;\n      return this;\n    },\n    remove: function remove(key) {\n      var property = prefix + key;\n      return property in this && delete this[property];\n    },\n    clear: function clear() {\n      for (var property in this) {\n        if (property[0] === prefix) delete this[property];\n      }\n    },\n    keys: function keys() {\n      var keys = [];\n      for (var property in this) {\n        if (property[0] === prefix) keys.push(property.slice(1));\n      }return keys;\n    },\n    values: function values() {\n      var values = [];\n      for (var property in this) {\n        if (property[0] === prefix) values.push(this[property]);\n      }return values;\n    },\n    entries: function entries() {\n      var entries = [];\n      for (var property in this) {\n        if (property[0] === prefix) entries.push({ key: property.slice(1), value: this[property] });\n      }return entries;\n    },\n    size: function size() {\n      var size = 0;\n      for (var property in this) {\n        if (property[0] === prefix) ++size;\n      }return size;\n    },\n    empty: function empty() {\n      for (var property in this) {\n        if (property[0] === prefix) return false;\n      }return true;\n    },\n    each: function each(f) {\n      for (var property in this) {\n        if (property[0] === prefix) f(this[property], property.slice(1), this);\n      }\n    }\n  };\n\n  function map(object, f) {\n    var map = new Map();\n\n    // Copy constructor.\n    if (object instanceof Map) object.each(function (value, key) {\n      map.set(key, value);\n    });\n\n    // Index array by numeric index or specified key function.\n    else if (Array.isArray(object)) {\n        var i = -1,\n            n = object.length,\n            o;\n\n        if (f == null) while (++i < n) {\n          map.set(i, object[i]);\n        } else while (++i < n) {\n          map.set(f(o = object[i], i, object), o);\n        }\n      }\n\n      // Convert object to map.\n      else if (object) for (var key in object) {\n          map.set(key, object[key]);\n        }return map;\n  }\n\n  var nest = function nest() {\n    var keys = [],\n        _sortKeys = [],\n        _sortValues,\n        _rollup,\n        nest;\n\n    function apply(array, depth, createResult, setResult) {\n      if (depth >= keys.length) {\n        if (_sortValues != null) array.sort(_sortValues);\n        return _rollup != null ? _rollup(array) : array;\n      }\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = map(),\n          values,\n          result = createResult();\n\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n          values.push(value);\n        } else {\n          valuesByKey.set(keyValue, [value]);\n        }\n      }\n\n      valuesByKey.each(function (values, key) {\n        setResult(result, key, apply(values, depth, createResult, setResult));\n      });\n\n      return result;\n    }\n\n    function _entries(map$$1, depth) {\n      if (++depth > keys.length) return map$$1;\n      var array,\n          sortKey = _sortKeys[depth - 1];\n      if (_rollup != null && depth >= keys.length) array = map$$1.entries();else array = [], map$$1.each(function (v, k) {\n        array.push({ key: k, values: _entries(v, depth) });\n      });\n      return sortKey != null ? array.sort(function (a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n\n    return nest = {\n      object: function object(array) {\n        return apply(array, 0, createObject, setObject);\n      },\n      map: function map(array) {\n        return apply(array, 0, createMap, setMap);\n      },\n      entries: function entries(array) {\n        return _entries(apply(array, 0, createMap, setMap), 0);\n      },\n      key: function key(d) {\n        keys.push(d);return nest;\n      },\n      sortKeys: function sortKeys(order) {\n        _sortKeys[keys.length - 1] = order;return nest;\n      },\n      sortValues: function sortValues(order) {\n        _sortValues = order;return nest;\n      },\n      rollup: function rollup(f) {\n        _rollup = f;return nest;\n      }\n    };\n  };\n\n  function createObject() {\n    return {};\n  }\n\n  function setObject(object, key, value) {\n    object[key] = value;\n  }\n\n  function createMap() {\n    return map();\n  }\n\n  function setMap(map$$1, key, value) {\n    map$$1.set(key, value);\n  }\n\n  function Set() {}\n\n  var proto = map.prototype;\n\n  Set.prototype = set.prototype = {\n    constructor: Set,\n    has: proto.has,\n    add: function add(value) {\n      value += \"\";\n      this[prefix + value] = value;\n      return this;\n    },\n    remove: proto.remove,\n    clear: proto.clear,\n    values: proto.keys,\n    size: proto.size,\n    empty: proto.empty,\n    each: proto.each\n  };\n\n  function set(object, f) {\n    var set = new Set();\n\n    // Copy constructor.\n    if (object instanceof Set) object.each(function (value) {\n      set.add(value);\n    });\n\n    // Otherwise, assume it’s an array.\n    else if (object) {\n        var i = -1,\n            n = object.length;\n        if (f == null) while (++i < n) {\n          set.add(object[i]);\n        } else while (++i < n) {\n          set.add(f(object[i], i, object));\n        }\n      }\n\n    return set;\n  }\n\n  var keys = function keys(map) {\n    var keys = [];\n    for (var key in map) {\n      keys.push(key);\n    }return keys;\n  };\n\n  var values = function values(map) {\n    var values = [];\n    for (var key in map) {\n      values.push(map[key]);\n    }return values;\n  };\n\n  var entries = function entries(map) {\n    var entries = [];\n    for (var key in map) {\n      entries.push({ key: key, value: map[key] });\n    }return entries;\n  };\n\n  exports.nest = nest;\n  exports.set = set;\n  exports.map = map;\n  exports.keys = keys;\n  exports.values = values;\n  exports.entries = entries;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQzLWNvbGxlY3Rpb24uanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJkMyIsInByZWZpeCIsIk1hcCIsInByb3RvdHlwZSIsIm1hcCIsImNvbnN0cnVjdG9yIiwiaGFzIiwia2V5IiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJyZW1vdmUiLCJwcm9wZXJ0eSIsImNsZWFyIiwia2V5cyIsInB1c2giLCJzbGljZSIsInZhbHVlcyIsImVudHJpZXMiLCJzaXplIiwiZW1wdHkiLCJlYWNoIiwiZiIsIm9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImkiLCJuIiwibGVuZ3RoIiwibyIsIm5lc3QiLCJzb3J0S2V5cyIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJhcHBseSIsImFycmF5IiwiZGVwdGgiLCJjcmVhdGVSZXN1bHQiLCJzZXRSZXN1bHQiLCJzb3J0Iiwia2V5VmFsdWUiLCJ2YWx1ZXNCeUtleSIsInJlc3VsdCIsIm1hcCQkMSIsInNvcnRLZXkiLCJ2IiwiayIsImEiLCJiIiwiY3JlYXRlT2JqZWN0Iiwic2V0T2JqZWN0IiwiY3JlYXRlTWFwIiwic2V0TWFwIiwiZCIsIm9yZGVyIiwiU2V0IiwicHJvdG8iLCJhZGQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0MsV0FBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDM0IsVUFBT0MsT0FBUCx5Q0FBT0EsT0FBUCxPQUFtQixRQUFuQixJQUErQixPQUFPQyxNQUFQLEtBQWtCLFdBQWpELEdBQStERixRQUFRQyxPQUFSLENBQS9ELEdBQ0EsT0FBT0UsTUFBUCxLQUFrQixVQUFsQixJQUFnQ0EsT0FBT0MsR0FBdkMsR0FBNkNELE9BQU8sQ0FBQyxTQUFELENBQVAsRUFBb0JILE9BQXBCLENBQTdDLEdBQ0NBLFFBQVNELE9BQU9NLEVBQVAsR0FBWU4sT0FBT00sRUFBUCxJQUFhLEVBQWxD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aEI7QUFBcUJhLGFBQU9GLElBQVAsQ0FBWVgsSUFBSUcsR0FBSixDQUFaO0FBQXJCLEtBQ0EsT0FBT1UsTUFBUDtBQUNELEdBSkQ7O0FBTUEsTUFBSUMsVUFBVSxpQkFBU2QsR0FBVCxFQUFjO0FBQzFCLFFBQUljLFVBQVUsRUFBZDtBQUNBLFNBQUssSUFBSVgsR0FBVCxJQUFnQkgsR0FBaEI7QUFBcUJjLGNBQVFILElBQVIsQ0FBYSxFQUFDUixLQUFLQSxHQUFOLEVBQVdHLE9BQU9OLElBQUlHLEdBQUosQ0FBbEIsRUFBYjtBQUFyQixLQUNBLE9BQU9XLE9BQVA7QUFDRCxHQUpEOztBQU1BdEIsVUFBUWtDLElBQVIsR0FBZUEsSUFBZjtBQUNBbEMsVUFBUWEsR0FBUixHQUFjQSxHQUFkO0FBQ0FiLFVBQVFRLEdBQVIsR0FBY0EsR0FBZDtBQUNBUixVQUFRa0IsSUFBUixHQUFlQSxJQUFmO0FBQ0FsQixVQUFRcUIsTUFBUixHQUFpQkEsTUFBakI7QUFDQXJCLFVBQVFzQixPQUFSLEdBQWtCQSxPQUFsQjs7QUFFQXdDLFNBQU9DLGNBQVAsQ0FBc0IvRCxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFYyxPQUFPLElBQVQsRUFBN0M7QUFFQyxDQXZOQSxDQUFEIiwiZmlsZSI6ImQzLWNvbGxlY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2QzanMub3JnL2QzLWNvbGxlY3Rpb24vIFZlcnNpb24gMS4wLjQuIENvcHlyaWdodCAyMDE3IE1pa2UgQm9zdG9jay5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcblx0KGZhY3RvcnkoKGdsb2JhbC5kMyA9IGdsb2JhbC5kMyB8fCB7fSkpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IE1hcCxcbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gKHByZWZpeCArIGtleSkgaW4gdGhpcztcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpc1twcmVmaXggKyBrZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzW3ByZWZpeCArIGtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBwcmVmaXggKyBrZXk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9LFxuICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBlbnRyaWVzLnB1c2goe2tleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XX0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9LFxuICBzaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpICsrc2l6ZTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfSxcbiAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBtYXAob2JqZWN0LCBmKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwO1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XG5cbiAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxuICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgbztcblxuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChmKG8gPSBvYmplY3RbaV0sIGksIG9iamVjdCksIG8pO1xuICB9XG5cbiAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxuICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIG1hcC5zZXQoa2V5LCBvYmplY3Rba2V5XSk7XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxudmFyIG5lc3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGtleXMgPSBbXSxcbiAgICAgIHNvcnRLZXlzID0gW10sXG4gICAgICBzb3J0VmFsdWVzLFxuICAgICAgcm9sbHVwLFxuICAgICAgbmVzdDtcblxuICBmdW5jdGlvbiBhcHBseShhcnJheSwgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSB7XG4gICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIHJvbGx1cCAhPSBudWxsID8gcm9sbHVwKGFycmF5KSA6IGFycmF5O1xuICAgIH1cblxuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGtleSA9IGtleXNbZGVwdGgrK10sXG4gICAgICAgIGtleVZhbHVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdmFsdWVzQnlLZXkgPSBtYXAoKSxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICBzZXRSZXN1bHQocmVzdWx0LCBrZXksIGFwcGx5KHZhbHVlcywgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXAkJDEsIGRlcHRoKSB7XG4gICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcCQkMTtcbiAgICB2YXIgYXJyYXksIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCAtIDFdO1xuICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAkJDEuZW50cmllcygpO1xuICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwJCQxLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgcmV0dXJuIHNvcnRLZXkgIT0gbnVsbCA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc29ydEtleShhLmtleSwgYi5rZXkpOyB9KSA6IGFycmF5O1xuICB9XG5cbiAgcmV0dXJuIG5lc3QgPSB7XG4gICAgb2JqZWN0OiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU9iamVjdCwgc2V0T2JqZWN0KTsgfSxcbiAgICBtYXA6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApOyB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgIGtleTogZnVuY3Rpb24oZCkgeyBrZXlzLnB1c2goZCk7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRLZXlzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgcm9sbHVwOiBmdW5jdGlvbihmKSB7IHJvbGx1cCA9IGY7IHJldHVybiBuZXN0OyB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAoKTtcbn1cblxuZnVuY3Rpb24gc2V0TWFwKG1hcCQkMSwga2V5LCB2YWx1ZSkge1xuICBtYXAkJDEuc2V0KGtleSwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBTZXQoKSB7fVxuXG52YXIgcHJvdG8gPSBtYXAucHJvdG90eXBlO1xuXG5TZXQucHJvdG90eXBlID0gc2V0LnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQob2JqZWN0LCBmKSB7XG4gIHZhciBzZXQgPSBuZXcgU2V0O1xuXG4gIC8vIENvcHkgY29uc3RydWN0b3IuXG4gIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcblxuICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpdOKAmXMgYW4gYXJyYXkuXG4gIGVsc2UgaWYgKG9iamVjdCkge1xuICAgIHZhciBpID0gLTEsIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKG9iamVjdFtpXSk7XG4gICAgZWxzZSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG52YXIga2V5cyA9IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59O1xuXG52YXIgdmFsdWVzID0gZnVuY3Rpb24obWFwKSB7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuICByZXR1cm4gdmFsdWVzO1xufTtcblxudmFyIGVudHJpZXMgPSBmdW5jdGlvbihtYXApIHtcbiAgdmFyIGVudHJpZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgZW50cmllcy5wdXNoKHtrZXk6IGtleSwgdmFsdWU6IG1hcFtrZXldfSk7XG4gIHJldHVybiBlbnRyaWVzO1xufTtcblxuZXhwb3J0cy5uZXN0ID0gbmVzdDtcbmV4cG9ydHMuc2V0ID0gc2V0O1xuZXhwb3J0cy5tYXAgPSBtYXA7XG5leHBvcnRzLmtleXMgPSBrZXlzO1xuZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5leHBvcnRzLmVudHJpZXMgPSBlbnRyaWVzO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-color/build/d3-color.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-color/build/d3-color.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-color/ Version 1.0.3. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var define = function define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n  };\n\n  function extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n    for (var key in definition) {\n      prototype[key] = definition[key];\n    }return prototype;\n  }\n\n  function Color() {}\n\n  var _darker = 0.7;\n  var _brighter = 1 / _darker;\n\n  var reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\";\n  var reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\";\n  var reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\";\n  var reHex3 = /^#([0-9a-f]{3})$/;\n  var reHex6 = /^#([0-9a-f]{6})$/;\n  var reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\");\n  var reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\");\n  var reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\");\n  var reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\");\n  var reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\");\n  var reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\n  var named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n  };\n\n  define(Color, color, {\n    displayable: function displayable() {\n      return this.rgb().displayable();\n    },\n    toString: function toString() {\n      return this.rgb() + \"\";\n    }\n  });\n\n  function color(format) {\n    var m;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00\n    ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n    : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n    : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n    : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n    : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n    : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n    : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n    : named.hasOwnProperty(format) ? rgbn(named[format]) : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0) : null;\n  }\n\n  function rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n  }\n\n  function rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n  }\n\n  function rgbConvert(o) {\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Rgb();\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n  }\n\n  function rgb(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n  }\n\n  function Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Rgb, rgb, extend(Color, {\n    brighter: function brighter(k) {\n      k = k == null ? _brighter : Math.pow(_brighter, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker: function darker(k) {\n      k = k == null ? _darker : Math.pow(_darker, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb: function rgb() {\n      return this;\n    },\n    displayable: function displayable() {\n      return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;\n    },\n    toString: function toString() {\n      var a = this.opacity;a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n      return (a === 1 ? \"rgb(\" : \"rgba(\") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? \")\" : \", \" + a + \")\");\n    }\n  }));\n\n  function hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n  }\n\n  function hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Hsl();\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        h = NaN,\n        s = max - min,\n        l = (max + min) / 2;\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new Hsl(h, s, l, o.opacity);\n  }\n\n  function hsl(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hsl, hsl, extend(Color, {\n    brighter: function brighter(k) {\n      k = k == null ? _brighter : Math.pow(_brighter, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function darker(k) {\n      k = k == null ? _darker : Math.pow(_darker, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function rgb() {\n      var h = this.h % 360 + (this.h < 0) * 360,\n          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n          l = this.l,\n          m2 = l + (l < 0.5 ? l : 1 - l) * s,\n          m1 = 2 * l - m2;\n      return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);\n    },\n    displayable: function displayable() {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n    }\n  }));\n\n  /* From FvD 13.37, CSS Color Module Level 3 */\n  function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;\n  }\n\n  var deg2rad = Math.PI / 180;\n  var rad2deg = 180 / Math.PI;\n\n  var Kn = 18;\n  var Xn = 0.950470;\n  var Yn = 1;\n  var Zn = 1.088830;\n  var t0 = 4 / 29;\n  var t1 = 6 / 29;\n  var t2 = 3 * t1 * t1;\n  var t3 = t1 * t1 * t1;\n\n  function labConvert(o) {\n    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n    if (o instanceof Hcl) {\n      var h = o.h * deg2rad;\n      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n    }\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var b = rgb2xyz(o.r),\n        a = rgb2xyz(o.g),\n        l = rgb2xyz(o.b),\n        x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),\n        y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),\n        z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);\n    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n  }\n\n  function lab(l, a, b, opacity) {\n    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n  }\n\n  function Lab(l, a, b, opacity) {\n    this.l = +l;\n    this.a = +a;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Lab, lab, extend(Color, {\n    brighter: function brighter(k) {\n      return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    darker: function darker(k) {\n      return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    rgb: function rgb() {\n      var y = (this.l + 16) / 116,\n          x = isNaN(this.a) ? y : y + this.a / 500,\n          z = isNaN(this.b) ? y : y - this.b / 200;\n      y = Yn * lab2xyz(y);\n      x = Xn * lab2xyz(x);\n      z = Zn * lab2xyz(z);\n      return new Rgb(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB\n      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);\n    }\n  }));\n\n  function xyz2lab(t) {\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n  }\n\n  function lab2xyz(t) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n  }\n\n  function xyz2rgb(x) {\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n  }\n\n  function rgb2xyz(x) {\n    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n  }\n\n  function hclConvert(o) {\n    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n    if (!(o instanceof Lab)) o = labConvert(o);\n    var h = Math.atan2(o.b, o.a) * rad2deg;\n    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n  }\n\n  function hcl(h, c, l, opacity) {\n    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hcl(h, c, l, opacity) {\n    this.h = +h;\n    this.c = +c;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hcl, hcl, extend(Color, {\n    brighter: function brighter(k) {\n      return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);\n    },\n    darker: function darker(k) {\n      return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);\n    },\n    rgb: function rgb() {\n      return labConvert(this).rgb();\n    }\n  }));\n\n  var A = -0.14861;\n  var B = +1.78277;\n  var C = -0.29227;\n  var D = -0.90649;\n  var E = +1.97294;\n  var ED = E * D;\n  var EB = E * B;\n  var BC_DA = B * C - D * A;\n\n  function cubehelixConvert(o) {\n    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n        bl = b - l,\n        k = (E * (g - l) - C * bl) / D,\n        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),\n        // NaN if l=0 or l=1\n    h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n  }\n\n  function cubehelix(h, s, l, opacity) {\n    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Cubehelix(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Cubehelix, cubehelix, extend(Color, {\n    brighter: function brighter(k) {\n      k = k == null ? _brighter : Math.pow(_brighter, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function darker(k) {\n      k = k == null ? _darker : Math.pow(_darker, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function rgb() {\n      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n          l = +this.l,\n          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n          cosh = Math.cos(h),\n          sinh = Math.sin(h);\n      return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);\n    }\n  }));\n\n  exports.color = color;\n  exports.rgb = rgb;\n  exports.hsl = hsl;\n  exports.lab = lab;\n  exports.hcl = hcl;\n  exports.cubehelix = cubehelix;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-dispatch/ Version 1.0.3. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var noop = { value: function value() {} };\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || t in _) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function (t) {\n      var name = \"\",\n          i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return { type: t, name: name };\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function on(typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) {\n          if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        }return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) {\n          _[t] = set(_[t], typename.name, null);\n        }\n      }\n\n      return this;\n    },\n    copy: function copy() {\n      var copy = {},\n          _ = this._;\n      for (var t in _) {\n        copy[t] = _[t].slice();\n      }return new Dispatch(copy);\n    },\n    call: function call(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {\n        args[i] = arguments[i + 2];\n      }if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) {\n        t[i].value.apply(that, args);\n      }\n    },\n    apply: function apply(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {\n        t[i].value.apply(that, args);\n      }\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({ name: name, value: callback });\n    return type;\n  }\n\n  exports.dispatch = dispatch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQzLWRpc3BhdGNoLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiZDMiLCJub29wIiwidmFsdWUiLCJkaXNwYXRjaCIsImkiLCJuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiXyIsInQiLCJFcnJvciIsIkRpc3BhdGNoIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlcyIsInRyaW0iLCJzcGxpdCIsIm1hcCIsIm5hbWUiLCJpbmRleE9mIiwic2xpY2UiLCJoYXNPd25Qcm9wZXJ0eSIsInR5cGUiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsIm9uIiwidHlwZW5hbWUiLCJjYWxsYmFjayIsIlQiLCJnZXQiLCJzZXQiLCJjb3B5IiwiY2FsbCIsInRoYXQiLCJhcmdzIiwiQXJyYXkiLCJhcHBseSIsImMiLCJjb25jYXQiLCJwdXNoIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNDLFdBQVVBLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQzNCLFVBQU9DLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBbkIsSUFBK0IsT0FBT0MsTUFBUCxLQUFrQixXQUFqRCxHQUErREYsUUFBUUMsT0FBUixDQUEvRCxHQUNBLE9BQU9FLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0NBLE9BQU9DLEdBQXZDLEdBQTZDRCxPQUFPLENBQUMsU0FBRCxDQUFQLEVBQW9CSCxPQUFwQixDQUE3QyxHQUNDQSxRQUFTRCxPQUFPTSxFQUFQLEdBQVlOLE9BQU9NLEVBQVAsSUFBYSxFQUFsQyxDQUZEO0FBR0EsQ0FKQSxhQUlRLFVBQVVKLE9BQVYsRUFBbUI7QUFBRTs7QUFFOUIsTUFBSUssT0FBTyxFQUFDQyxPQUFPLGlCQUFXLENBQUUsQ0FBckIsRUFBWDs7QUFFQSxXQUFTQyxRQUFULEdBQW9CO0FBQ2xCLFNBQUssSUFBSUMsSUFBSSxDQUFSLEVBQVdD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Q0FBZixDQUF4QixDQUF2QjtBQUNBO0FBQ0Q7QUFDRjtBQUNELFFBQUl1QixZQUFZLElBQWhCLEVBQXNCTCxLQUFLaUIsSUFBTCxDQUFVLEVBQUNyQixNQUFNQSxJQUFQLEVBQWFoQixPQUFPeUIsUUFBcEIsRUFBVjtBQUN0QixXQUFPTCxJQUFQO0FBQ0Q7O0FBRUQxQixVQUFRTyxRQUFSLEdBQW1CQSxRQUFuQjs7QUFFQXFDLFNBQU9DLGNBQVAsQ0FBc0I3QyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFTSxPQUFPLElBQVQsRUFBN0M7QUFFQyxDQTdGQSxDQUFEIiwiZmlsZSI6ImQzLWRpc3BhdGNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9kM2pzLm9yZy9kMy1kaXNwYXRjaC8gVmVyc2lvbiAxLjAuMy4gQ29weXJpZ2h0IDIwMTcgTWlrZSBCb3N0b2NrLlxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeSgoZ2xvYmFsLmQzID0gZ2xvYmFsLmQzIHx8IHt9KSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnRzLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-format/build/d3-format.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-format/build/d3-format.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-format/ Version 1.2.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  // Computes the decimal coefficient and exponent of the specified number x with\n  // significant digits p, where x is positive and p is in [1, 21] or undefined.\n  // For example, formatDecimal(1.23) returns [\"123\", 0].\n\n  var formatDecimal = function formatDecimal(x, p) {\n    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n    var i,\n        coefficient = x.slice(0, i);\n\n    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n    return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];\n  };\n\n  var exponent = function exponent(x) {\n    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n  };\n\n  var formatGroup = function formatGroup(grouping, thousands) {\n    return function (value, width) {\n      var i = value.length,\n          t = [],\n          j = 0,\n          g = grouping[0],\n          length = 0;\n\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = grouping[j = (j + 1) % grouping.length];\n      }\n\n      return t.reverse().join(thousands);\n    };\n  };\n\n  var formatNumerals = function formatNumerals(numerals) {\n    return function (value) {\n      return value.replace(/[0-9]/g, function (i) {\n        return numerals[+i];\n      });\n    };\n  };\n\n  var formatDefault = function formatDefault(x, p) {\n    x = x.toPrecision(p);\n\n    out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {\n      switch (x[i]) {\n        case \".\":\n          i0 = i1 = i;break;\n        case \"0\":\n          if (i0 === 0) i0 = i;i1 = i;break;\n        case \"e\":\n          break out;\n        default:\n          if (i0 > 0) i0 = 0;break;\n      }\n    }\n\n    return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;\n  };\n\n  var prefixExponent;\n\n  var formatPrefixAuto = function formatPrefixAuto(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1],\n        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n        n = coefficient.length;\n    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join(\"0\") : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i) : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n  };\n\n  var formatRounded = function formatRounded(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1];\n    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n  };\n\n  var formatTypes = {\n    \"\": formatDefault,\n    \"%\": function _(x, p) {\n      return (x * 100).toFixed(p);\n    },\n    \"b\": function b(x) {\n      return Math.round(x).toString(2);\n    },\n    \"c\": function c(x) {\n      return x + \"\";\n    },\n    \"d\": function d(x) {\n      return Math.round(x).toString(10);\n    },\n    \"e\": function e(x, p) {\n      return x.toExponential(p);\n    },\n    \"f\": function f(x, p) {\n      return x.toFixed(p);\n    },\n    \"g\": function g(x, p) {\n      return x.toPrecision(p);\n    },\n    \"o\": function o(x) {\n      return Math.round(x).toString(8);\n    },\n    \"p\": function p(x, _p) {\n      return formatRounded(x * 100, _p);\n    },\n    \"r\": formatRounded,\n    \"s\": formatPrefixAuto,\n    \"X\": function X(x) {\n      return Math.round(x).toString(16).toUpperCase();\n    },\n    \"x\": function x(_x) {\n      return Math.round(_x).toString(16);\n    }\n  };\n\n  // [[fill]align][sign][symbol][0][width][,][.precision][type]\n  var re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\n  function formatSpecifier(specifier) {\n    return new FormatSpecifier(specifier);\n  }\n\n  formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\n  function FormatSpecifier(specifier) {\n    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\n    var match,\n        fill = match[1] || \" \",\n        align = match[2] || \">\",\n        sign = match[3] || \"-\",\n        symbol = match[4] || \"\",\n        zero = !!match[5],\n        width = match[6] && +match[6],\n        comma = !!match[7],\n        precision = match[8] && +match[8].slice(1),\n        type = match[9] || \"\";\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // Map invalid types to the default format.\n    else if (!formatTypes[type]) type = \"\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\";\n\n    this.fill = fill;\n    this.align = align;\n    this.sign = sign;\n    this.symbol = symbol;\n    this.zero = zero;\n    this.width = width;\n    this.comma = comma;\n    this.precision = precision;\n    this.type = type;\n  }\n\n  FormatSpecifier.prototype.toString = function () {\n    return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width == null ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0)) + this.type;\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n\n  var formatLocale = function formatLocale(locale) {\n    var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n        currency = locale.currency,\n        decimal = locale.decimal,\n        numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n        percent = locale.percent || \"%\";\n\n    function newFormat(specifier) {\n      specifier = formatSpecifier(specifier);\n\n      var fill = specifier.fill,\n          align = specifier.align,\n          sign = specifier.sign,\n          symbol = specifier.symbol,\n          zero = specifier.zero,\n          width = specifier.width,\n          comma = specifier.comma,\n          precision = specifier.precision,\n          type = specifier.type;\n\n      // Compute the prefix and suffix.\n      // For SI-prefix, the suffix is lazily computed.\n      var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n          suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n      // What format function should we use?\n      // Is this an integer type?\n      // Can this type generate exponential notation?\n      var formatType = formatTypes[type],\n          maybeSuffix = !type || /[defgprs%]/.test(type);\n\n      // Set the default precision if not specified,\n      // or clamp the specified precision to the supported range.\n      // For significant precision, it must be in [1, 21].\n      // For fixed precision, it must be in [0, 20].\n      precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n      function format(value) {\n        var valuePrefix = prefix,\n            valueSuffix = suffix,\n            i,\n            n,\n            c;\n\n        if (type === \"c\") {\n          valueSuffix = formatType(value) + valueSuffix;\n          value = \"\";\n        } else {\n          value = +value;\n\n          // Perform the initial formatting.\n          var valueNegative = value < 0;\n          value = formatType(Math.abs(value), precision);\n\n          // If a negative value rounds to zero during formatting, treat as positive.\n          if (valueNegative && +value === 0) valueNegative = false;\n\n          // Compute the prefix and suffix.\n          valuePrefix = (valueNegative ? sign === \"(\" ? sign : \"-\" : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n          valueSuffix = valueSuffix + (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n          // Break the formatted value into the integer “value” part that can be\n          // grouped, and fractional or exponential “suffix” part that is not.\n          if (maybeSuffix) {\n            i = -1, n = value.length;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), 48 > c || c > 57) {\n                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n                value = value.slice(0, i);\n                break;\n              }\n            }\n          }\n        }\n\n        // If the fill character is not \"0\", grouping is applied before padding.\n        if (comma && !zero) value = group(value, Infinity);\n\n        // Compute the padding.\n        var length = valuePrefix.length + value.length + valueSuffix.length,\n            padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n        // If the fill character is \"0\", grouping is applied after padding.\n        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n        // Reconstruct the final output based on the desired alignment.\n        switch (align) {\n          case \"<\":\n            value = valuePrefix + value + valueSuffix + padding;break;\n          case \"=\":\n            value = valuePrefix + padding + value + valueSuffix;break;\n          case \"^\":\n            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);break;\n          default:\n            value = padding + valuePrefix + value + valueSuffix;break;\n        }\n\n        return numerals(value);\n      }\n\n      format.toString = function () {\n        return specifier + \"\";\n      };\n\n      return format;\n    }\n\n    function formatPrefix(specifier, value) {\n      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n          e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n          k = Math.pow(10, -e),\n          prefix = prefixes[8 + e / 3];\n      return function (value) {\n        return f(k * value) + prefix;\n      };\n    }\n\n    return {\n      format: newFormat,\n      formatPrefix: formatPrefix\n    };\n  };\n\n  var locale;\n\n  defaultLocale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [3],\n    currency: [\"$\", \"\"]\n  });\n\n  function defaultLocale(definition) {\n    locale = formatLocale(definition);\n    exports.format = locale.format;\n    exports.formatPrefix = locale.formatPrefix;\n    return locale;\n  }\n\n  var precisionFixed = function precisionFixed(step) {\n    return Math.max(0, -exponent(Math.abs(step)));\n  };\n\n  var precisionPrefix = function precisionPrefix(step, value) {\n    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n  };\n\n  var precisionRound = function precisionRound(step, max) {\n    step = Math.abs(step), max = Math.abs(max) - step;\n    return Math.max(0, exponent(max) - exponent(step)) + 1;\n  };\n\n  exports.formatDefaultLocale = defaultLocale;\n  exports.formatLocale = formatLocale;\n  exports.formatSpecifier = formatSpecifier;\n  exports.precisionFixed = precisionFixed;\n  exports.precisionPrefix = precisionPrefix;\n  exports.precisionRound = precisionRound;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-ease/build/d3-ease.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-ease/build/d3-ease.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-ease/ Version 1.0.3. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  function linear(t) {\n    return +t;\n  }\n\n  function quadIn(t) {\n    return t * t;\n  }\n\n  function quadOut(t) {\n    return t * (2 - t);\n  }\n\n  function quadInOut(t) {\n    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\n  }\n\n  function cubicIn(t) {\n    return t * t * t;\n  }\n\n  function cubicOut(t) {\n    return --t * t * t + 1;\n  }\n\n  function cubicInOut(t) {\n    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n  }\n\n  var exponent = 3;\n\n  var polyIn = function custom(e) {\n    e = +e;\n\n    function polyIn(t) {\n      return Math.pow(t, e);\n    }\n\n    polyIn.exponent = custom;\n\n    return polyIn;\n  }(exponent);\n\n  var polyOut = function custom(e) {\n    e = +e;\n\n    function polyOut(t) {\n      return 1 - Math.pow(1 - t, e);\n    }\n\n    polyOut.exponent = custom;\n\n    return polyOut;\n  }(exponent);\n\n  var polyInOut = function custom(e) {\n    e = +e;\n\n    function polyInOut(t) {\n      return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\n    }\n\n    polyInOut.exponent = custom;\n\n    return polyInOut;\n  }(exponent);\n\n  var pi = Math.PI;\n  var halfPi = pi / 2;\n\n  function sinIn(t) {\n    return 1 - Math.cos(t * halfPi);\n  }\n\n  function sinOut(t) {\n    return Math.sin(t * halfPi);\n  }\n\n  function sinInOut(t) {\n    return (1 - Math.cos(pi * t)) / 2;\n  }\n\n  function expIn(t) {\n    return Math.pow(2, 10 * t - 10);\n  }\n\n  function expOut(t) {\n    return 1 - Math.pow(2, -10 * t);\n  }\n\n  function expInOut(t) {\n    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\n  }\n\n  function circleIn(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n\n  function circleOut(t) {\n    return Math.sqrt(1 - --t * t);\n  }\n\n  function circleInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\n  }\n\n  var b1 = 4 / 11;\n  var b2 = 6 / 11;\n  var b3 = 8 / 11;\n  var b4 = 3 / 4;\n  var b5 = 9 / 11;\n  var b6 = 10 / 11;\n  var b7 = 15 / 16;\n  var b8 = 21 / 22;\n  var b9 = 63 / 64;\n  var b0 = 1 / b1 / b1;\n\n  function bounceIn(t) {\n    return 1 - bounceOut(1 - t);\n  }\n\n  function bounceOut(t) {\n    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\n  }\n\n  function bounceInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\n  }\n\n  var overshoot = 1.70158;\n\n  var backIn = function custom(s) {\n    s = +s;\n\n    function backIn(t) {\n      return t * t * ((s + 1) * t - s);\n    }\n\n    backIn.overshoot = custom;\n\n    return backIn;\n  }(overshoot);\n\n  var backOut = function custom(s) {\n    s = +s;\n\n    function backOut(t) {\n      return --t * t * ((s + 1) * t + s) + 1;\n    }\n\n    backOut.overshoot = custom;\n\n    return backOut;\n  }(overshoot);\n\n  var backInOut = function custom(s) {\n    s = +s;\n\n    function backInOut(t) {\n      return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\n    }\n\n    backInOut.overshoot = custom;\n\n    return backInOut;\n  }(overshoot);\n\n  var tau = 2 * Math.PI;\n  var amplitude = 1;\n  var period = 0.3;\n\n  var elasticIn = function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticIn(t) {\n      return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\n    }\n\n    elasticIn.amplitude = function (a) {\n      return custom(a, p * tau);\n    };\n    elasticIn.period = function (p) {\n      return custom(a, p);\n    };\n\n    return elasticIn;\n  }(amplitude, period);\n\n  var elasticOut = function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticOut(t) {\n      return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\n    }\n\n    elasticOut.amplitude = function (a) {\n      return custom(a, p * tau);\n    };\n    elasticOut.period = function (p) {\n      return custom(a, p);\n    };\n\n    return elasticOut;\n  }(amplitude, period);\n\n  var elasticInOut = function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticInOut(t) {\n      return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\n    }\n\n    elasticInOut.amplitude = function (a) {\n      return custom(a, p * tau);\n    };\n    elasticInOut.period = function (p) {\n      return custom(a, p);\n    };\n\n    return elasticInOut;\n  }(amplitude, period);\n\n  exports.easeLinear = linear;\n  exports.easeQuad = quadInOut;\n  exports.easeQuadIn = quadIn;\n  exports.easeQuadOut = quadOut;\n  exports.easeQuadInOut = quadInOut;\n  exports.easeCubic = cubicInOut;\n  exports.easeCubicIn = cubicIn;\n  exports.easeCubicOut = cubicOut;\n  exports.easeCubicInOut = cubicInOut;\n  exports.easePoly = polyInOut;\n  exports.easePolyIn = polyIn;\n  exports.easePolyOut = polyOut;\n  exports.easePolyInOut = polyInOut;\n  exports.easeSin = sinInOut;\n  exports.easeSinIn = sinIn;\n  exports.easeSinOut = sinOut;\n  exports.easeSinInOut = sinInOut;\n  exports.easeExp = expInOut;\n  exports.easeExpIn = expIn;\n  exports.easeExpOut = expOut;\n  exports.easeExpInOut = expInOut;\n  exports.easeCircle = circleInOut;\n  exports.easeCircleIn = circleIn;\n  exports.easeCircleOut = circleOut;\n  exports.easeCircleInOut = circleInOut;\n  exports.easeBounce = bounceOut;\n  exports.easeBounceIn = bounceIn;\n  exports.easeBounceOut = bounceOut;\n  exports.easeBounceInOut = bounceInOut;\n  exports.easeBack = backInOut;\n  exports.easeBackIn = backIn;\n  exports.easeBackOut = backOut;\n  exports.easeBackInOut = backInOut;\n  exports.easeElastic = elasticOut;\n  exports.easeElasticIn = elasticIn;\n  exports.easeElasticOut = elasticOut;\n  exports.easeElasticInOut = elasticInOut;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-hierarchy/build/d3-hierarchy.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-hierarchy/build/d3-hierarchy.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-hierarchy/ Version 1.1.5. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  function defaultSeparation(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  function meanX(children) {\n    return children.reduce(meanXReduce, 0) / children.length;\n  }\n\n  function meanXReduce(x, c) {\n    return x + c.x;\n  }\n\n  function maxY(children) {\n    return 1 + children.reduce(maxYReduce, 0);\n  }\n\n  function maxYReduce(y, c) {\n    return Math.max(y, c.y);\n  }\n\n  function leafLeft(node) {\n    var children;\n    while (children = node.children) {\n      node = children[0];\n    }return node;\n  }\n\n  function leafRight(node) {\n    var children;\n    while (children = node.children) {\n      node = children[children.length - 1];\n    }return node;\n  }\n\n  var cluster = function cluster() {\n    var separation = defaultSeparation,\n        dx = 1,\n        dy = 1,\n        nodeSize = false;\n\n    function cluster(root) {\n      var previousNode,\n          x = 0;\n\n      // First walk, computing the initial x & y values.\n      root.eachAfter(function (node) {\n        var children = node.children;\n        if (children) {\n          node.x = meanX(children);\n          node.y = maxY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n\n      var left = leafLeft(root),\n          right = leafRight(root),\n          x0 = left.x - separation(left, right) / 2,\n          x1 = right.x + separation(right, left) / 2;\n\n      // Second walk, normalizing x & y to the desired size.\n      return root.eachAfter(nodeSize ? function (node) {\n        node.x = (node.x - root.x) * dx;\n        node.y = (root.y - node.y) * dy;\n      } : function (node) {\n        node.x = (node.x - x0) / (x1 - x0) * dx;\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n      });\n    }\n\n    cluster.separation = function (x) {\n      return arguments.length ? (separation = x, cluster) : separation;\n    };\n\n    cluster.size = function (x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];\n    };\n\n    cluster.nodeSize = function (x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;\n    };\n\n    return cluster;\n  };\n\n  function count(node) {\n    var sum = 0,\n        children = node.children,\n        i = children && children.length;\n    if (!i) sum = 1;else while (--i >= 0) {\n      sum += children[i].value;\n    }node.value = sum;\n  }\n\n  var node_count = function node_count() {\n    return this.eachAfter(count);\n  };\n\n  var node_each = function node_each(callback) {\n    var node = this,\n        current,\n        next = [node],\n        children,\n        i,\n        n;\n    do {\n      current = next.reverse(), next = [];\n      while (node = current.pop()) {\n        callback(node), children = node.children;\n        if (children) for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    } while (next.length);\n    return this;\n  };\n\n  var node_eachBefore = function node_eachBefore(callback) {\n    var node = this,\n        nodes = [node],\n        children,\n        i;\n    while (node = nodes.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n    return this;\n  };\n\n  var node_eachAfter = function node_eachAfter(callback) {\n    var node = this,\n        nodes = [node],\n        next = [],\n        children,\n        i,\n        n;\n    while (node = nodes.pop()) {\n      next.push(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n    while (node = next.pop()) {\n      callback(node);\n    }\n    return this;\n  };\n\n  var node_sum = function node_sum(value) {\n    return this.eachAfter(function (node) {\n      var sum = +value(node.data) || 0,\n          children = node.children,\n          i = children && children.length;\n      while (--i >= 0) {\n        sum += children[i].value;\n      }node.value = sum;\n    });\n  };\n\n  var node_sort = function node_sort(compare) {\n    return this.eachBefore(function (node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  };\n\n  var node_path = function node_path(end) {\n    var start = this,\n        ancestor = leastCommonAncestor(start, end),\n        nodes = [start];\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n    var k = nodes.length;\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    }\n    return nodes;\n  };\n\n  function leastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = a.ancestors(),\n        bNodes = b.ancestors(),\n        c = null;\n    a = aNodes.pop();\n    b = bNodes.pop();\n    while (a === b) {\n      c = a;\n      a = aNodes.pop();\n      b = bNodes.pop();\n    }\n    return c;\n  }\n\n  var node_ancestors = function node_ancestors() {\n    var node = this,\n        nodes = [node];\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n    return nodes;\n  };\n\n  var node_descendants = function node_descendants() {\n    var nodes = [];\n    this.each(function (node) {\n      nodes.push(node);\n    });\n    return nodes;\n  };\n\n  var node_leaves = function node_leaves() {\n    var leaves = [];\n    this.eachBefore(function (node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  };\n\n  var node_links = function node_links() {\n    var root = this,\n        links = [];\n    root.each(function (node) {\n      if (node !== root) {\n        // Don’t include the root’s parent, if any.\n        links.push({ source: node.parent, target: node });\n      }\n    });\n    return links;\n  };\n\n  function hierarchy(data, children) {\n    var root = new Node(data),\n        valued = +data.value && (root.value = data.value),\n        node,\n        nodes = [root],\n        child,\n        childs,\n        i,\n        n;\n\n    if (children == null) children = defaultChildren;\n\n    while (node = nodes.pop()) {\n      if (valued) node.value = +node.data.value;\n      if ((childs = children(node.data)) && (n = childs.length)) {\n        node.children = new Array(n);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new Node(childs[i]));\n          child.parent = node;\n          child.depth = node.depth + 1;\n        }\n      }\n    }\n\n    return root.eachBefore(computeHeight);\n  }\n\n  function node_copy() {\n    return hierarchy(this).eachBefore(copyData);\n  }\n\n  function defaultChildren(d) {\n    return d.children;\n  }\n\n  function copyData(node) {\n    node.data = node.data.data;\n  }\n\n  function computeHeight(node) {\n    var height = 0;\n    do {\n      node.height = height;\n    } while ((node = node.parent) && node.height < ++height);\n  }\n\n  function Node(data) {\n    this.data = data;\n    this.depth = this.height = 0;\n    this.parent = null;\n  }\n\n  Node.prototype = hierarchy.prototype = {\n    constructor: Node,\n    count: node_count,\n    each: node_each,\n    eachAfter: node_eachAfter,\n    eachBefore: node_eachBefore,\n    sum: node_sum,\n    sort: node_sort,\n    path: node_path,\n    ancestors: node_ancestors,\n    descendants: node_descendants,\n    leaves: node_leaves,\n    links: node_links,\n    copy: node_copy\n  };\n\n  var slice = Array.prototype.slice;\n\n  function shuffle(array) {\n    var m = array.length,\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  var enclose = function enclose(circles) {\n    var i = 0,\n        n = (circles = shuffle(slice.call(circles))).length,\n        B = [],\n        p,\n        e;\n\n    while (i < n) {\n      p = circles[i];\n      if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n    }\n\n    return e;\n  };\n\n  function extendBasis(B, p) {\n    var i, j;\n\n    if (enclosesWeakAll(p, B)) return [p];\n\n    // If we get here then B must have at least one element.\n    for (i = 0; i < B.length; ++i) {\n      if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n        return [B[i], p];\n      }\n    }\n\n    // If we get here then B must have at least two elements.\n    for (i = 0; i < B.length - 1; ++i) {\n      for (j = i + 1; j < B.length; ++j) {\n        if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n          return [B[i], B[j], p];\n        }\n      }\n    }\n\n    // If we get here then something is very wrong.\n    throw new Error();\n  }\n\n  function enclosesNot(a, b) {\n    var dr = a.r - b.r,\n        dx = b.x - a.x,\n        dy = b.y - a.y;\n    return dr < 0 || dr * dr < dx * dx + dy * dy;\n  }\n\n  function enclosesWeak(a, b) {\n    var dr = a.r - b.r + 1e-6,\n        dx = b.x - a.x,\n        dy = b.y - a.y;\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\n  }\n\n  function enclosesWeakAll(a, B) {\n    for (var i = 0; i < B.length; ++i) {\n      if (!enclosesWeak(a, B[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function encloseBasis(B) {\n    switch (B.length) {\n      case 1:\n        return encloseBasis1(B[0]);\n      case 2:\n        return encloseBasis2(B[0], B[1]);\n      case 3:\n        return encloseBasis3(B[0], B[1], B[2]);\n    }\n  }\n\n  function encloseBasis1(a) {\n    return {\n      x: a.x,\n      y: a.y,\n      r: a.r\n    };\n  }\n\n  function encloseBasis2(a, b) {\n    var x1 = a.x,\n        y1 = a.y,\n        r1 = a.r,\n        x2 = b.x,\n        y2 = b.y,\n        r2 = b.r,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        r21 = r2 - r1,\n        l = Math.sqrt(x21 * x21 + y21 * y21);\n    return {\n      x: (x1 + x2 + x21 / l * r21) / 2,\n      y: (y1 + y2 + y21 / l * r21) / 2,\n      r: (l + r1 + r2) / 2\n    };\n  }\n\n  function encloseBasis3(a, b, c) {\n    var x1 = a.x,\n        y1 = a.y,\n        r1 = a.r,\n        x2 = b.x,\n        y2 = b.y,\n        r2 = b.r,\n        x3 = c.x,\n        y3 = c.y,\n        r3 = c.r,\n        a2 = x1 - x2,\n        a3 = x1 - x3,\n        b2 = y1 - y2,\n        b3 = y1 - y3,\n        c2 = r2 - r1,\n        c3 = r3 - r1,\n        d1 = x1 * x1 + y1 * y1 - r1 * r1,\n        d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n        d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n        ab = a3 * b2 - a2 * b3,\n        xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n        xb = (b3 * c2 - b2 * c3) / ab,\n        ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n        yb = (a2 * c3 - a3 * c2) / ab,\n        A = xb * xb + yb * yb - 1,\n        B = 2 * (r1 + xa * xb + ya * yb),\n        C = xa * xa + ya * ya - r1 * r1,\n        r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n    return {\n      x: x1 + xa + xb * r,\n      y: y1 + ya + yb * r,\n      r: r\n    };\n  }\n\n  function place(a, b, c) {\n    var ax = a.x,\n        ay = a.y,\n        da = b.r + c.r,\n        db = a.r + c.r,\n        dx = b.x - ax,\n        dy = b.y - ay,\n        dc = dx * dx + dy * dy;\n    if (dc) {\n      var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\n          y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = ax + x * dx + y * dy;\n      c.y = ay + x * dy - y * dx;\n    } else {\n      c.x = ax + db;\n      c.y = ay;\n    }\n  }\n\n  function intersects(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r + b.r;\n    return dr * dr - 1e-6 > dx * dx + dy * dy;\n  }\n\n  function score(node) {\n    var a = node._,\n        b = node.next._,\n        ab = a.r + b.r,\n        dx = (a.x * b.r + b.x * a.r) / ab,\n        dy = (a.y * b.r + b.y * a.r) / ab;\n    return dx * dx + dy * dy;\n  }\n\n  function Node$1(circle) {\n    this._ = circle;\n    this.next = null;\n    this.previous = null;\n  }\n\n  function packEnclose(circles) {\n    if (!(n = circles.length)) return 0;\n\n    var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n    // Place the first circle.\n    a = circles[0], a.x = 0, a.y = 0;\n    if (!(n > 1)) return a.r;\n\n    // Place the second circle.\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n    if (!(n > 2)) return a.r + b.r;\n\n    // Place the third circle.\n    place(b, a, c = circles[2]);\n\n    // Initialize the front-chain using the first three circles a, b and c.\n    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n    a.next = c.previous = b;\n    b.next = a.previous = c;\n    c.next = b.previous = a;\n\n    // Attempt to place each remaining circle…\n    pack: for (i = 3; i < n; ++i) {\n      place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n      // Find the closest intersecting circle on the front-chain, if any.\n      // “Closeness” is determined by linear distance along the front-chain.\n      // “Ahead” or “behind” is likewise determined by linear distance.\n      j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n      do {\n        if (sj <= sk) {\n          if (intersects(j._, c._)) {\n            b = j, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n          sj += j._.r, j = j.next;\n        } else {\n          if (intersects(k._, c._)) {\n            a = k, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n          sk += k._.r, k = k.previous;\n        }\n      } while (j !== k.next);\n\n      // Success! Insert the new circle c between a and b.\n      c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n      // Compute the new closest circle pair to the centroid.\n      aa = score(a);\n      while ((c = c.next) !== b) {\n        if ((ca = score(c)) < aa) {\n          a = c, aa = ca;\n        }\n      }\n      b = a.next;\n    }\n\n    // Compute the enclosing circle of the front chain.\n    a = [b._], c = b;while ((c = c.next) !== b) {\n      a.push(c._);\n    }c = enclose(a);\n\n    // Translate the circles to put the enclosing circle around the origin.\n    for (i = 0; i < n; ++i) {\n      a = circles[i], a.x -= c.x, a.y -= c.y;\n    }return c.r;\n  }\n\n  var siblings = function siblings(circles) {\n    packEnclose(circles);\n    return circles;\n  };\n\n  function optional(f) {\n    return f == null ? null : required(f);\n  }\n\n  function required(f) {\n    if (typeof f !== \"function\") throw new Error();\n    return f;\n  }\n\n  function constantZero() {\n    return 0;\n  }\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  function defaultRadius(d) {\n    return Math.sqrt(d.value);\n  }\n\n  var index = function index() {\n    var radius = null,\n        dx = 1,\n        dy = 1,\n        padding = constantZero;\n\n    function pack(root) {\n      root.x = dx / 2, root.y = dy / 2;\n      if (radius) {\n        root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));\n      } else {\n        root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n      }\n      return root;\n    }\n\n    pack.radius = function (x) {\n      return arguments.length ? (radius = optional(x), pack) : radius;\n    };\n\n    pack.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n    };\n\n    pack.padding = function (x) {\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n    };\n\n    return pack;\n  };\n\n  function radiusLeaf(radius) {\n    return function (node) {\n      if (!node.children) {\n        node.r = Math.max(0, +radius(node) || 0);\n      }\n    };\n  }\n\n  function packChildren(padding, k) {\n    return function (node) {\n      if (children = node.children) {\n        var children,\n            i,\n            n = children.length,\n            r = padding(node) * k || 0,\n            e;\n\n        if (r) for (i = 0; i < n; ++i) {\n          children[i].r += r;\n        }e = packEnclose(children);\n        if (r) for (i = 0; i < n; ++i) {\n          children[i].r -= r;\n        }node.r = e + r;\n      }\n    };\n  }\n\n  function translateChild(k) {\n    return function (node) {\n      var parent = node.parent;\n      node.r *= k;\n      if (parent) {\n        node.x = parent.x + k * node.x;\n        node.y = parent.y + k * node.y;\n      }\n    };\n  }\n\n  var roundNode = function roundNode(node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n  };\n\n  var treemapDice = function treemapDice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\n      node.x0 = x0, node.x1 = x0 += node.value * k;\n    }\n  };\n\n  var partition = function partition() {\n    var dx = 1,\n        dy = 1,\n        padding = 0,\n        round = false;\n\n    function partition(root) {\n      var n = root.height + 1;\n      root.x0 = root.y0 = padding;\n      root.x1 = dx;\n      root.y1 = dy / n;\n      root.eachBefore(positionNode(dy, n));\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(dy, n) {\n      return function (node) {\n        if (node.children) {\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n        }\n        var x0 = node.x0,\n            y0 = node.y0,\n            x1 = node.x1 - padding,\n            y1 = node.y1 - padding;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n      };\n    }\n\n    partition.round = function (x) {\n      return arguments.length ? (round = !!x, partition) : round;\n    };\n\n    partition.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n    };\n\n    partition.padding = function (x) {\n      return arguments.length ? (padding = +x, partition) : padding;\n    };\n\n    return partition;\n  };\n\n  var keyPrefix = \"$\";\n  var preroot = { depth: -1 };\n  var ambiguous = {};\n\n  function defaultId(d) {\n    return d.id;\n  }\n\n  function defaultParentId(d) {\n    return d.parentId;\n  }\n\n  var stratify = function stratify() {\n    var id = defaultId,\n        parentId = defaultParentId;\n\n    function stratify(data) {\n      var d,\n          i,\n          n = data.length,\n          root,\n          parent,\n          node,\n          nodes = new Array(n),\n          nodeId,\n          nodeKey,\n          nodeByKey = {};\n\n      for (i = 0; i < n; ++i) {\n        d = data[i], node = nodes[i] = new Node(d);\n        if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n          nodeKey = keyPrefix + (node.id = nodeId);\n          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n        }\n      }\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], nodeId = parentId(data[i], i, data);\n        if (nodeId == null || !(nodeId += \"\")) {\n          if (root) throw new Error(\"multiple roots\");\n          root = node;\n        } else {\n          parent = nodeByKey[keyPrefix + nodeId];\n          if (!parent) throw new Error(\"missing: \" + nodeId);\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n          if (parent.children) parent.children.push(node);else parent.children = [node];\n          node.parent = parent;\n        }\n      }\n\n      if (!root) throw new Error(\"no root\");\n      root.parent = preroot;\n      root.eachBefore(function (node) {\n        node.depth = node.parent.depth + 1;--n;\n      }).eachBefore(computeHeight);\n      root.parent = null;\n      if (n > 0) throw new Error(\"cycle\");\n\n      return root;\n    }\n\n    stratify.id = function (x) {\n      return arguments.length ? (id = required(x), stratify) : id;\n    };\n\n    stratify.parentId = function (x) {\n      return arguments.length ? (parentId = required(x), stratify) : parentId;\n    };\n\n    return stratify;\n  };\n\n  function defaultSeparation$1(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  // function radialSeparation(a, b) {\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n  // }\n\n  // This function is used to traverse the left contour of a subtree (or\n  // subforest). It returns the successor of v on this contour. This successor is\n  // either given by the leftmost child of v or by the thread of v. The function\n  // returns null if and only if v is on the highest level of its subtree.\n  function nextLeft(v) {\n    var children = v.children;\n    return children ? children[0] : v.t;\n  }\n\n  // This function works analogously to nextLeft.\n  function nextRight(v) {\n    var children = v.children;\n    return children ? children[children.length - 1] : v.t;\n  }\n\n  // Shifts the current subtree rooted at w+. This is done by increasing\n  // prelim(w+) and mod(w+) by shift.\n  function moveSubtree(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n\n  // All other shifts, applied to the smaller subtrees between w- and w+, are\n  // performed by this function. To prepare the shifts, we have to adjust\n  // change(w+), shift(w+), and change(w-).\n  function executeShifts(v) {\n    var shift = 0,\n        change = 0,\n        children = v.children,\n        i = children.length,\n        w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n\n  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n  // returns the specified (default) ancestor.\n  function nextAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n\n  function TreeNode(node, i) {\n    this._ = node;\n    this.parent = null;\n    this.children = null;\n    this.A = null; // default ancestor\n    this.a = this; // ancestor\n    this.z = 0; // prelim\n    this.m = 0; // mod\n    this.c = 0; // change\n    this.s = 0; // shift\n    this.t = null; // thread\n    this.i = i; // number\n  }\n\n  TreeNode.prototype = Object.create(Node.prototype);\n\n  function treeRoot(root) {\n    var tree = new TreeNode(root, 0),\n        node,\n        nodes = [tree],\n        child,\n        children,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if (children = node._.children) {\n        node.children = new Array(n = children.length);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n          child.parent = node;\n        }\n      }\n    }\n\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\n    return tree;\n  }\n\n  // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n  var tree = function tree() {\n    var separation = defaultSeparation$1,\n        dx = 1,\n        dy = 1,\n        nodeSize = null;\n\n    function tree(root) {\n      var t = treeRoot(root);\n\n      // Compute the layout using Buchheim et al.’s algorithm.\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\n      t.eachBefore(secondWalk);\n\n      // If a fixed node size is specified, scale x and y.\n      if (nodeSize) root.eachBefore(sizeNode);\n\n      // If a fixed tree size is specified, scale x and y based on the extent.\n      // Compute the left-most, right-most, and depth-most nodes for extents.\n      else {\n          var left = root,\n              right = root,\n              bottom = root;\n          root.eachBefore(function (node) {\n            if (node.x < left.x) left = node;\n            if (node.x > right.x) right = node;\n            if (node.depth > bottom.depth) bottom = node;\n          });\n          var s = left === right ? 1 : separation(left, right) / 2,\n              tx = s - left.x,\n              kx = dx / (right.x + s + tx),\n              ky = dy / (bottom.depth || 1);\n          root.eachBefore(function (node) {\n            node.x = (node.x + tx) * kx;\n            node.y = node.depth * ky;\n          });\n        }\n\n      return root;\n    }\n\n    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n    // applied recursively to the children of v, as well as the function\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n    // node v is placed to the midpoint of its outermost children.\n    function firstWalk(v) {\n      var children = v.children,\n          siblings = v.parent.children,\n          w = v.i ? siblings[v.i - 1] : null;\n      if (children) {\n        executeShifts(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n\n    // Computes all real x-coordinates by summing up the modifiers recursively.\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n\n    // The core of the algorithm. Here, a new subtree is combined with the\n    // previous subtrees. Threads are used to traverse the inside and outside\n    // contours of the left and right subtree up to the highest common level. The\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n    // superscript o means outside and i means inside, the subscript - means left\n    // subtree and + means right subtree. For summing up the modifiers along the\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n    // nodes of the inside contours conflict, we compute the left one of the\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n    // Finally, we add a new thread (if necessary).\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n            vop = v,\n            vim = w,\n            vom = vip.parent.children[0],\n            sip = vip.m,\n            sop = vop.m,\n            sim = vim.m,\n            som = vom.m,\n            shift;\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n          vom = nextLeft(vom);\n          vop = nextRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !nextRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !nextLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n\n    function sizeNode(node) {\n      node.x *= dx;\n      node.y = node.depth * dy;\n    }\n\n    tree.separation = function (x) {\n      return arguments.length ? (separation = x, tree) : separation;\n    };\n\n    tree.size = function (x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];\n    };\n\n    tree.nodeSize = function (x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;\n    };\n\n    return tree;\n  };\n\n  var treemapSlice = function treemapSlice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\n      node.y0 = y0, node.y1 = y0 += node.value * k;\n    }\n  };\n\n  var phi = (1 + Math.sqrt(5)) / 2;\n\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [],\n        nodes = parent.children,\n        row,\n        nodeValue,\n        i0 = 0,\n        i1 = 0,\n        n = nodes.length,\n        dx,\n        dy,\n        value = parent.value,\n        sumValue,\n        minValue,\n        maxValue,\n        newRatio,\n        minRatio,\n        alpha,\n        beta;\n\n    while (i0 < n) {\n      dx = x1 - x0, dy = y1 - y0;\n\n      // Find the next non-empty node.\n      do {\n        sumValue = nodes[i1++].value;\n      } while (!sumValue && i1 < n);\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue);\n\n      // Keep adding nodes while the aspect ratio maintains or improves.\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes[i1].value;\n        if (nodeValue < minValue) minValue = nodeValue;\n        if (nodeValue > maxValue) maxValue = nodeValue;\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n        if (newRatio > minRatio) {\n          sumValue -= nodeValue;break;\n        }\n        minRatio = newRatio;\n      }\n\n      // Position and record the row orientation.\n      rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n      value -= sumValue, i0 = i1;\n    }\n\n    return rows;\n  }\n\n  var squarify = function custom(ratio) {\n\n    function squarify(parent, x0, y0, x1, y1) {\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n\n    squarify.ratio = function (x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return squarify;\n  }(phi);\n\n  var index$1 = function index$1() {\n    var tile = squarify,\n        round = false,\n        dx = 1,\n        dy = 1,\n        paddingStack = [0],\n        paddingInner = constantZero,\n        paddingTop = constantZero,\n        paddingRight = constantZero,\n        paddingBottom = constantZero,\n        paddingLeft = constantZero;\n\n    function treemap(root) {\n      root.x0 = root.y0 = 0;\n      root.x1 = dx;\n      root.y1 = dy;\n      root.eachBefore(positionNode);\n      paddingStack = [0];\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(node) {\n      var p = paddingStack[node.depth],\n          x0 = node.x0 + p,\n          y0 = node.y0 + p,\n          x1 = node.x1 - p,\n          y1 = node.y1 - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n      if (node.children) {\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n        x0 += paddingLeft(node) - p;\n        y0 += paddingTop(node) - p;\n        x1 -= paddingRight(node) - p;\n        y1 -= paddingBottom(node) - p;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        tile(node, x0, y0, x1, y1);\n      }\n    }\n\n    treemap.round = function (x) {\n      return arguments.length ? (round = !!x, treemap) : round;\n    };\n\n    treemap.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n    };\n\n    treemap.tile = function (x) {\n      return arguments.length ? (tile = required(x), treemap) : tile;\n    };\n\n    treemap.padding = function (x) {\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n    };\n\n    treemap.paddingInner = function (x) {\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n    };\n\n    treemap.paddingOuter = function (x) {\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n    };\n\n    treemap.paddingTop = function (x) {\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n    };\n\n    treemap.paddingRight = function (x) {\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n    };\n\n    treemap.paddingBottom = function (x) {\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n    };\n\n    treemap.paddingLeft = function (x) {\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n    };\n\n    return treemap;\n  };\n\n  var binary = function binary(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        i,\n        n = nodes.length,\n        sum,\n        sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes[i].value;\n    }\n\n    partition(0, n, parent.value, x0, y0, x1, y1);\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes[i];\n        node.x0 = x0, node.y0 = y0;\n        node.x1 = x1, node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = value / 2 + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;\n      }\n\n      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;\n\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if (x1 - x0 > y1 - y0) {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  };\n\n  var sliceDice = function sliceDice(parent, x0, y0, x1, y1) {\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n  };\n\n  var resquarify = function custom(ratio) {\n\n    function resquarify(parent, x0, y0, x1, y1) {\n      if ((rows = parent._squarify) && rows.ratio === ratio) {\n        var rows,\n            row,\n            nodes,\n            i,\n            j = -1,\n            n,\n            m = rows.length,\n            value = parent.value;\n\n        while (++j < m) {\n          row = rows[j], nodes = row.children;\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) {\n            row.value += nodes[i].value;\n          }if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n          value -= row.value;\n        }\n      } else {\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n        rows.ratio = ratio;\n      }\n    }\n\n    resquarify.ratio = function (x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return resquarify;\n  }(phi);\n\n  exports.cluster = cluster;\n  exports.hierarchy = hierarchy;\n  exports.pack = index;\n  exports.packSiblings = siblings;\n  exports.packEnclose = enclose;\n  exports.partition = partition;\n  exports.stratify = stratify;\n  exports.tree = tree;\n  exports.treemap = index$1;\n  exports.treemapBinary = binary;\n  exports.treemapDice = treemapDice;\n  exports.treemapSlice = treemapSlice;\n  exports.treemapSliceDice = sliceDice;\n  exports.treemapSquarify = squarify;\n  exports.treemapResquarify = resquarify;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dsv/build/d3-dsv.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dsv/build/d3-dsv.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-dsv/ Version 1.0.7. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var EOL = {};\n  var EOF = {};\n  var QUOTE = 34;\n  var NEWLINE = 10;\n  var RETURN = 13;\n\n  function objectConverter(columns) {\n    return new Function(\"d\", \"return {\" + columns.map(function (name, i) {\n      return JSON.stringify(name) + \": d[\" + i + \"]\";\n    }).join(\",\") + \"}\");\n  }\n\n  function customConverter(columns, f) {\n    var object = objectConverter(columns);\n    return function (row, i) {\n      return f(object(row), i, columns);\n    };\n  }\n\n  // Compute unique columns in order of discovery.\n  function inferColumns(rows) {\n    var columnSet = Object.create(null),\n        columns = [];\n\n    rows.forEach(function (row) {\n      for (var column in row) {\n        if (!(column in columnSet)) {\n          columns.push(columnSet[column] = column);\n        }\n      }\n    });\n\n    return columns;\n  }\n\n  var dsv = function dsv(delimiter) {\n    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n        DELIMITER = delimiter.charCodeAt(0);\n\n    function parse(text, f) {\n      var convert,\n          columns,\n          rows = parseRows(text, function (row, i) {\n        if (convert) return convert(row, i - 1);\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n      });\n      rows.columns = columns;\n      return rows;\n    }\n\n    function parseRows(text, f) {\n      var rows = [],\n          // output rows\n      N = text.length,\n          I = 0,\n          // current character index\n      n = 0,\n          // current line number\n      t,\n          // current token\n      eof = N <= 0,\n          // current token followed by EOF?\n      eol = false; // current token followed by EOL?\n\n      // Strip the trailing newline.\n      if (text.charCodeAt(N - 1) === NEWLINE) --N;\n      if (text.charCodeAt(N - 1) === RETURN) --N;\n\n      function token() {\n        if (eof) return EOF;\n        if (eol) return eol = false, EOL;\n\n        // Unescape quotes.\n        var i,\n            j = I,\n            c;\n        if (text.charCodeAt(j) === QUOTE) {\n          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE) {}\n          if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n            eol = true;if (text.charCodeAt(I) === NEWLINE) ++I;\n          }\n          return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n        }\n\n        // Find next delimiter or newline.\n        while (I < N) {\n          if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n            eol = true;if (text.charCodeAt(I) === NEWLINE) ++I;\n          } else if (c !== DELIMITER) continue;\n          return text.slice(j, i);\n        }\n\n        // Return last token before EOF.\n        return eof = true, text.slice(j, N);\n      }\n\n      while ((t = token()) !== EOF) {\n        var row = [];\n        while (t !== EOL && t !== EOF) {\n          row.push(t), t = token();\n        }if (f && (row = f(row, n++)) == null) continue;\n        rows.push(row);\n      }\n\n      return rows;\n    }\n\n    function format(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return [columns.map(formatValue).join(delimiter)].concat(rows.map(function (row) {\n        return columns.map(function (column) {\n          return formatValue(row[column]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    }\n\n    function formatRows(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    }\n\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n\n    function formatValue(text) {\n      return text == null ? \"\" : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\" : text;\n    }\n\n    return {\n      parse: parse,\n      parseRows: parseRows,\n      format: format,\n      formatRows: formatRows\n    };\n  };\n\n  var csv = dsv(\",\");\n\n  var csvParse = csv.parse;\n  var csvParseRows = csv.parseRows;\n  var csvFormat = csv.format;\n  var csvFormatRows = csv.formatRows;\n\n  var tsv = dsv(\"\\t\");\n\n  var tsvParse = tsv.parse;\n  var tsvParseRows = tsv.parseRows;\n  var tsvFormat = tsv.format;\n  var tsvFormatRows = tsv.formatRows;\n\n  exports.dsvFormat = dsv;\n  exports.csvParse = csvParse;\n  exports.csvParseRows = csvParseRows;\n  exports.csvFormat = csvFormat;\n  exports.csvFormatRows = csvFormatRows;\n  exports.tsvParse = tsvParse;\n  exports.tsvParseRows = tsvParseRows;\n  exports.tsvFormat = tsvFormat;\n  exports.tsvFormatRows = tsvFormatRows;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-polygon/build/d3-polygon.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-polygon/build/d3-polygon.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-polygon/ Version 1.0.3. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var area = function area(polygon) {\n    var i = -1,\n        n = polygon.length,\n        a,\n        b = polygon[n - 1],\n        area = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n\n    return area / 2;\n  };\n\n  var centroid = function centroid(polygon) {\n    var i = -1,\n        n = polygon.length,\n        x = 0,\n        y = 0,\n        a,\n        b = polygon[n - 1],\n        c,\n        k = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      k += c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n\n    return k *= 3, [x / k, y / k];\n  };\n\n  // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n  // the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n  // right, +y is up). Returns a positive value if ABC is counter-clockwise,\n  // negative if clockwise, and zero if the points are collinear.\n  var cross = function cross(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  };\n\n  function lexicographicOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n\n  // Computes the upper convex hull per the monotone chain algorithm.\n  // Assumes points.length >= 3, is sorted by x, unique in y.\n  // Returns an array of indices into points in left-to-right order.\n  function computeUpperHullIndexes(points) {\n    var n = points.length,\n        indexes = [0, 1],\n        size = 2;\n\n    for (var i = 2; i < n; ++i) {\n      while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) {\n        --size;\n      }indexes[size++] = i;\n    }\n\n    return indexes.slice(0, size); // remove popped points\n  }\n\n  var hull = function hull(points) {\n    if ((n = points.length) < 3) return null;\n\n    var i,\n        n,\n        sortedPoints = new Array(n),\n        flippedPoints = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      sortedPoints[i] = [+points[i][0], +points[i][1], i];\n    }sortedPoints.sort(lexicographicOrder);\n    for (i = 0; i < n; ++i) {\n      flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n    }var upperIndexes = computeUpperHullIndexes(sortedPoints),\n        lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n    // Construct the hull polygon, removing possible duplicate endpoints.\n    var skipLeft = lowerIndexes[0] === upperIndexes[0],\n        skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n        hull = [];\n\n    // Add upper hull in right-to-l order.\n    // Then add lower hull in left-to-right order.\n    for (i = upperIndexes.length - 1; i >= 0; --i) {\n      hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n    }for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) {\n      hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n    }return hull;\n  };\n\n  var contains = function contains(polygon, point) {\n    var n = polygon.length,\n        p = polygon[n - 1],\n        x = point[0],\n        y = point[1],\n        x0 = p[0],\n        y0 = p[1],\n        x1,\n        y1,\n        inside = false;\n\n    for (var i = 0; i < n; ++i) {\n      p = polygon[i], x1 = p[0], y1 = p[1];\n      if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1) inside = !inside;\n      x0 = x1, y0 = y1;\n    }\n\n    return inside;\n  };\n\n  var length = function length(polygon) {\n    var i = -1,\n        n = polygon.length,\n        b = polygon[n - 1],\n        xa,\n        ya,\n        xb = b[0],\n        yb = b[1],\n        perimeter = 0;\n\n    while (++i < n) {\n      xa = xb;\n      ya = yb;\n      b = polygon[i];\n      xb = b[0];\n      yb = b[1];\n      xa -= xb;\n      ya -= yb;\n      perimeter += Math.sqrt(xa * xa + ya * ya);\n    }\n\n    return perimeter;\n  };\n\n  exports.polygonArea = area;\n  exports.polygonCentroid = centroid;\n  exports.polygonHull = hull;\n  exports.polygonContains = contains;\n  exports.polygonLength = length;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-path/build/d3-path.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-path/build/d3-path.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-path/ Version 1.0.5. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var pi = Math.PI;\n  var tau = 2 * pi;\n  var epsilon = 1e-6;\n  var tauEpsilon = tau - epsilon;\n\n  function Path() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n\n  function path() {\n    return new Path();\n  }\n\n  Path.prototype = path.prototype = {\n    constructor: Path,\n    moveTo: function moveTo(x, y) {\n      this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n    },\n    closePath: function closePath() {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._ += \"Z\";\n      }\n    },\n    lineTo: function lineTo(x, y) {\n      this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n    },\n    quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {\n      this._ += \"Q\" + +x1 + \",\" + +y1 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n    },\n    bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n      this._ += \"C\" + +x1 + \",\" + +y1 + \",\" + +x2 + \",\" + +y2 + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n    },\n    arcTo: function arcTo(x1, y1, x2, y2, r) {\n      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n      var x0 = this._x1,\n          y0 = this._y1,\n          x21 = x2 - x1,\n          y21 = y2 - y1,\n          x01 = x0 - x1,\n          y01 = y0 - y1,\n          l01_2 = x01 * x01 + y01 * y01;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x1,y1).\n      if (this._x1 === null) {\n        this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n      }\n\n      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n      else if (!(l01_2 > epsilon)) {}\n\n        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n        // Equivalently, is (x1,y1) coincident with (x2,y2)?\n        // Or, is the radius zero? Line to (x1,y1).\n        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n            this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n          }\n\n          // Otherwise, draw an arc!\n          else {\n              var x20 = x2 - x0,\n                  y20 = y2 - y0,\n                  l21_2 = x21 * x21 + y21 * y21,\n                  l20_2 = x20 * x20 + y20 * y20,\n                  l21 = Math.sqrt(l21_2),\n                  l01 = Math.sqrt(l01_2),\n                  l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n                  t01 = l / l01,\n                  t21 = l / l21;\n\n              // If the start tangent is not coincident with (x0,y0), line to.\n              if (Math.abs(t01 - 1) > epsilon) {\n                this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n              }\n\n              this._ += \"A\" + r + \",\" + r + \",0,0,\" + +(y01 * x20 > x01 * y20) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n            }\n    },\n    arc: function arc(x, y, r, a0, a1, ccw) {\n      x = +x, y = +y, r = +r;\n      var dx = r * Math.cos(a0),\n          dy = r * Math.sin(a0),\n          x0 = x + dx,\n          y0 = y + dy,\n          cw = 1 ^ ccw,\n          da = ccw ? a0 - a1 : a1 - a0;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x0,y0).\n      if (this._x1 === null) {\n        this._ += \"M\" + x0 + \",\" + y0;\n      }\n\n      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n      else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n          this._ += \"L\" + x0 + \",\" + y0;\n        }\n\n      // Is this arc empty? We’re done.\n      if (!r) return;\n\n      // Does the angle go the wrong way? Flip the direction.\n      if (da < 0) da = da % tau + tau;\n\n      // Is this a complete circle? Draw two arcs to complete the circle.\n      if (da > tauEpsilon) {\n        this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n      }\n\n      // Is this arc non-empty? Draw an arc!\n      else if (da > epsilon) {\n          this._ += \"A\" + r + \",\" + r + \",0,\" + +(da >= pi) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n        }\n    },\n    rect: function rect(x, y, w, h) {\n      this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + +w + \"v\" + +h + \"h\" + -w + \"Z\";\n    },\n    toString: function toString() {\n      return this._;\n    }\n  };\n\n  exports.path = path;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-queue/build/d3-queue.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-queue/build/d3-queue.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-queue/ Version 3.0.7. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var slice = [].slice;\n\n  var noabort = {};\n\n  function Queue(size) {\n    this._size = size;\n    this._call = this._error = null;\n    this._tasks = [];\n    this._data = [];\n    this._waiting = this._active = this._ended = this._start = 0; // inside a synchronous task callback?\n  }\n\n  Queue.prototype = queue.prototype = {\n    constructor: Queue,\n    defer: function defer(callback) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback\");\n      if (this._call) throw new Error(\"defer after await\");\n      if (this._error != null) return this;\n      var t = slice.call(arguments, 1);\n      t.push(callback);\n      ++this._waiting, this._tasks.push(t);\n      poke(this);\n      return this;\n    },\n    abort: function abort() {\n      if (this._error == null) _abort(this, new Error(\"abort\"));\n      return this;\n    },\n    await: function _await(callback) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback\");\n      if (this._call) throw new Error(\"multiple await\");\n      this._call = function (error, results) {\n        callback.apply(null, [error].concat(results));\n      };\n      maybeNotify(this);\n      return this;\n    },\n    awaitAll: function awaitAll(callback) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback\");\n      if (this._call) throw new Error(\"multiple await\");\n      this._call = callback;\n      maybeNotify(this);\n      return this;\n    }\n  };\n\n  function poke(q) {\n    if (!q._start) {\n      try {\n        start(q);\n      } // let the current task complete\n      catch (e) {\n        if (q._tasks[q._ended + q._active - 1]) _abort(q, e); // task errored synchronously\n        else if (!q._data) throw e; // await callback errored synchronously\n      }\n    }\n  }\n\n  function start(q) {\n    while (q._start = q._waiting && q._active < q._size) {\n      var i = q._ended + q._active,\n          t = q._tasks[i],\n          j = t.length - 1,\n          c = t[j];\n      t[j] = end(q, i);\n      --q._waiting, ++q._active;\n      t = c.apply(null, t);\n      if (!q._tasks[i]) continue; // task finished synchronously\n      q._tasks[i] = t || noabort;\n    }\n  }\n\n  function end(q, i) {\n    return function (e, r) {\n      if (!q._tasks[i]) return; // ignore multiple callbacks\n      --q._active, ++q._ended;\n      q._tasks[i] = null;\n      if (q._error != null) return; // ignore secondary errors\n      if (e != null) {\n        _abort(q, e);\n      } else {\n        q._data[i] = r;\n        if (q._waiting) poke(q);else maybeNotify(q);\n      }\n    };\n  }\n\n  function _abort(q, e) {\n    var i = q._tasks.length,\n        t;\n    q._error = e; // ignore active callbacks\n    q._data = undefined; // allow gc\n    q._waiting = NaN; // prevent starting\n\n    while (--i >= 0) {\n      if (t = q._tasks[i]) {\n        q._tasks[i] = null;\n        if (t.abort) {\n          try {\n            t.abort();\n          } catch (e) {/* ignore */}\n        }\n      }\n    }\n\n    q._active = NaN; // allow notification\n    maybeNotify(q);\n  }\n\n  function maybeNotify(q) {\n    if (!q._active && q._call) {\n      var d = q._data;\n      q._data = undefined; // allow gc\n      q._call(q._error, d);\n    }\n  }\n\n  function queue(concurrency) {\n    if (concurrency == null) concurrency = Infinity;else if (!((concurrency = +concurrency) >= 1)) throw new Error(\"invalid concurrency\");\n    return new Queue(concurrency);\n  }\n\n  exports.queue = queue;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-quadtree/build/d3-quadtree.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-quadtree/build/d3-quadtree.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-quadtree/ Version 1.0.3. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var tree_add = function tree_add(d) {\n    var x = +this._x.call(null, d),\n        y = +this._y.call(null, d);\n    return add(this.cover(x, y), x, y, d);\n  };\n\n  function add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n    var parent,\n        node = tree._root,\n        leaf = { data: d },\n        x0 = tree._x0,\n        y0 = tree._y0,\n        x1 = tree._x1,\n        y1 = tree._y1,\n        xm,\n        ym,\n        xp,\n        yp,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n\n    // Find the existing leaf for the new point, or add it.\n    while (node.length) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));\n    return parent[j] = node, parent[i] = leaf, tree;\n  }\n\n  function addAll(data) {\n    var d,\n        i,\n        n = data.length,\n        x,\n        y,\n        xz = new Array(n),\n        yz = new Array(n),\n        x0 = Infinity,\n        y0 = Infinity,\n        x1 = -Infinity,\n        y1 = -Infinity;\n\n    // Compute the points and their extent.\n    for (i = 0; i < n; ++i) {\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n      xz[i] = x;\n      yz[i] = y;\n      if (x < x0) x0 = x;\n      if (x > x1) x1 = x;\n      if (y < y0) y0 = y;\n      if (y > y1) y1 = y;\n    }\n\n    // If there were no (valid) points, inherit the existing extent.\n    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n\n    // Add the new points.\n    for (i = 0; i < n; ++i) {\n      add(this, xz[i], yz[i], data[i]);\n    }\n\n    return this;\n  }\n\n  var tree_cover = function tree_cover(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n    var x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1;\n\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n      x1 = (x0 = Math.floor(x)) + 1;\n      y1 = (y0 = Math.floor(y)) + 1;\n    }\n\n    // Otherwise, double repeatedly to cover.\n    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n        var z = x1 - x0,\n            node = this._root,\n            parent,\n            i;\n\n        switch (i = (y < (y0 + y1) / 2) << 1 | x < (x0 + x1) / 2) {\n          case 0:\n            {\n              do {\n                parent = new Array(4), parent[i] = node, node = parent;\n              } while ((z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1));\n              break;\n            }\n          case 1:\n            {\n              do {\n                parent = new Array(4), parent[i] = node, node = parent;\n              } while ((z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1));\n              break;\n            }\n          case 2:\n            {\n              do {\n                parent = new Array(4), parent[i] = node, node = parent;\n              } while ((z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y));\n              break;\n            }\n          case 3:\n            {\n              do {\n                parent = new Array(4), parent[i] = node, node = parent;\n              } while ((z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y));\n              break;\n            }\n        }\n\n        if (this._root && this._root.length) this._root = node;\n      }\n\n      // If the quadtree covers the point already, just return.\n      else return this;\n\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n  };\n\n  var tree_data = function tree_data() {\n    var data = [];\n    this.visit(function (node) {\n      if (!node.length) do {\n        data.push(node.data);\n      } while (node = node.next);\n    });\n    return data;\n  };\n\n  var tree_extent = function tree_extent(_) {\n    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n  };\n\n  var Quad = function Quad(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  };\n\n  var tree_find = function tree_find(x, y, radius) {\n    var data,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1,\n        y1,\n        x2,\n        y2,\n        x3 = this._x1,\n        y3 = this._y1,\n        quads = [],\n        node = this._root,\n        q,\n        i;\n\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;else {\n      x0 = x - radius, y0 = y - radius;\n      x3 = x + radius, y3 = y + radius;\n      radius *= radius;\n    }\n\n    while (q = quads.pop()) {\n\n      // Stop searching if this quadrant can’t contain a closer node.\n      if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue;\n\n      // Bisect the current quadrant.\n      if (node.length) {\n        var xm = (x1 + x2) / 2,\n            ym = (y1 + y2) / 2;\n\n        quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym));\n\n        // Visit the closest quadrant first.\n        if (i = (y >= ym) << 1 | x >= xm) {\n          q = quads[quads.length - 1];\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\n          quads[quads.length - 1 - i] = q;\n        }\n      }\n\n      // Visit this point. (Visiting coincident points isn’t necessary!)\n      else {\n          var dx = x - +this._x.call(null, node.data),\n              dy = y - +this._y.call(null, node.data),\n              d2 = dx * dx + dy * dy;\n          if (d2 < radius) {\n            var d = Math.sqrt(radius = d2);\n            x0 = x - d, y0 = y - d;\n            x3 = x + d, y3 = y + d;\n            data = node.data;\n          }\n        }\n    }\n\n    return data;\n  };\n\n  var tree_remove = function tree_remove(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n    var parent,\n        node = this._root,\n        retainer,\n        previous,\n        next,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1,\n        x,\n        y,\n        xm,\n        ym,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while (true) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n      if (!node.length) break;\n      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;\n    }\n\n    // Find the point to remove.\n    while (node.data !== d) {\n      if (!(previous = node, node = node.next)) return this;\n    }if (next = node.next) delete node.next;\n\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return next ? previous.next = next : delete previous.next, this;\n\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {\n      if (retainer) retainer[j] = node;else this._root = node;\n    }\n\n    return this;\n  };\n\n  function removeAll(data) {\n    for (var i = 0, n = data.length; i < n; ++i) {\n      this.remove(data[i]);\n    }return this;\n  }\n\n  var tree_root = function tree_root() {\n    return this._root;\n  };\n\n  var tree_size = function tree_size() {\n    var size = 0;\n    this.visit(function (node) {\n      if (!node.length) do {\n        ++size;\n      } while (node = node.next);\n    });\n    return size;\n  };\n\n  var tree_visit = function tree_visit(callback) {\n    var quads = [],\n        q,\n        node = this._root,\n        child,\n        x0,\n        y0,\n        x1,\n        y1;\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2,\n            ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      }\n    }\n    return this;\n  };\n\n  var tree_visitAfter = function tree_visitAfter(callback) {\n    var quads = [],\n        next = [],\n        q;\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      var node = q.node;\n      if (node.length) {\n        var child,\n            x0 = q.x0,\n            y0 = q.y0,\n            x1 = q.x1,\n            y1 = q.y1,\n            xm = (x0 + x1) / 2,\n            ym = (y0 + y1) / 2;\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      }\n      next.push(q);\n    }\n    while (q = next.pop()) {\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    }\n    return this;\n  };\n\n  function defaultX(d) {\n    return d[0];\n  }\n\n  var tree_x = function tree_x(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n  };\n\n  function defaultY(d) {\n    return d[1];\n  }\n\n  var tree_y = function tree_y(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n  };\n\n  function quadtree(nodes, x, y) {\n    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n  }\n\n  function Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n  }\n\n  function leaf_copy(leaf) {\n    var copy = { data: leaf.data },\n        next = copy;\n    while (leaf = leaf.next) {\n      next = next.next = { data: leaf.data };\n    }return copy;\n  }\n\n  var treeProto = quadtree.prototype = Quadtree.prototype;\n\n  treeProto.copy = function () {\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        node = this._root,\n        nodes,\n        child;\n\n    if (!node) return copy;\n\n    if (!node.length) return copy._root = leaf_copy(node), copy;\n\n    nodes = [{ source: node, target: copy._root = new Array(4) }];\n    while (node = nodes.pop()) {\n      for (var i = 0; i < 4; ++i) {\n        if (child = node.source[i]) {\n          if (child.length) nodes.push({ source: child, target: node.target[i] = new Array(4) });else node.target[i] = leaf_copy(child);\n        }\n      }\n    }\n\n    return copy;\n  };\n\n  treeProto.add = tree_add;\n  treeProto.addAll = addAll;\n  treeProto.cover = tree_cover;\n  treeProto.data = tree_data;\n  treeProto.extent = tree_extent;\n  treeProto.find = tree_find;\n  treeProto.remove = tree_remove;\n  treeProto.removeAll = removeAll;\n  treeProto.root = tree_root;\n  treeProto.size = tree_size;\n  treeProto.visit = tree_visit;\n  treeProto.visitAfter = tree_visitAfter;\n  treeProto.x = tree_x;\n  treeProto.y = tree_y;\n\n  exports.quadtree = quadtree;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-random/build/d3-random.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-random/build/d3-random.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-random/ Version 1.1.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var defaultSource = function defaultSource() {\n    return Math.random();\n  };\n\n  var uniform = function sourceRandomUniform(source) {\n    function randomUniform(min, max) {\n      min = min == null ? 0 : +min;\n      max = max == null ? 1 : +max;\n      if (arguments.length === 1) max = min, min = 0;else max -= min;\n      return function () {\n        return source() * max + min;\n      };\n    }\n\n    randomUniform.source = sourceRandomUniform;\n\n    return randomUniform;\n  }(defaultSource);\n\n  var normal = function sourceRandomNormal(source) {\n    function randomNormal(mu, sigma) {\n      var x, r;\n      mu = mu == null ? 0 : +mu;\n      sigma = sigma == null ? 1 : +sigma;\n      return function () {\n        var y;\n\n        // If available, use the second previously-generated uniform random.\n        if (x != null) y = x, x = null;\n\n        // Otherwise, generate a new x and y.\n        else do {\n            x = source() * 2 - 1;\n            y = source() * 2 - 1;\n            r = x * x + y * y;\n          } while (!r || r > 1);\n\n        return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    }\n\n    randomNormal.source = sourceRandomNormal;\n\n    return randomNormal;\n  }(defaultSource);\n\n  var logNormal = function sourceRandomLogNormal(source) {\n    function randomLogNormal() {\n      var randomNormal = normal.source(source).apply(this, arguments);\n      return function () {\n        return Math.exp(randomNormal());\n      };\n    }\n\n    randomLogNormal.source = sourceRandomLogNormal;\n\n    return randomLogNormal;\n  }(defaultSource);\n\n  var irwinHall = function sourceRandomIrwinHall(source) {\n    function randomIrwinHall(n) {\n      return function () {\n        for (var sum = 0, i = 0; i < n; ++i) {\n          sum += source();\n        }return sum;\n      };\n    }\n\n    randomIrwinHall.source = sourceRandomIrwinHall;\n\n    return randomIrwinHall;\n  }(defaultSource);\n\n  var bates = function sourceRandomBates(source) {\n    function randomBates(n) {\n      var randomIrwinHall = irwinHall.source(source)(n);\n      return function () {\n        return randomIrwinHall() / n;\n      };\n    }\n\n    randomBates.source = sourceRandomBates;\n\n    return randomBates;\n  }(defaultSource);\n\n  var exponential = function sourceRandomExponential(source) {\n    function randomExponential(lambda) {\n      return function () {\n        return -Math.log(1 - source()) / lambda;\n      };\n    }\n\n    randomExponential.source = sourceRandomExponential;\n\n    return randomExponential;\n  }(defaultSource);\n\n  exports.randomUniform = uniform;\n  exports.randomNormal = normal;\n  exports.randomLogNormal = logNormal;\n  exports.randomBates = bates;\n  exports.randomIrwinHall = irwinHall;\n  exports.randomExponential = exponential;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time/build/d3-time.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time/build/d3-time.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-time/ Version 1.0.7. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var t0 = new Date();\n  var t1 = new Date();\n\n  function newInterval(floori, offseti, count, field) {\n\n    function interval(date) {\n      return floori(date = new Date(+date)), date;\n    }\n\n    interval.floor = interval;\n\n    interval.ceil = function (date) {\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n    };\n\n    interval.round = function (date) {\n      var d0 = interval(date),\n          d1 = interval.ceil(date);\n      return date - d0 < d1 - date ? d0 : d1;\n    };\n\n    interval.offset = function (date, step) {\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n    };\n\n    interval.range = function (start, stop, step) {\n      var range = [];\n      start = interval.ceil(start);\n      step = step == null ? 1 : Math.floor(step);\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n      do {\n        range.push(new Date(+start));\n      } while ((offseti(start, step), floori(start), start < stop));\n      return range;\n    };\n\n    interval.filter = function (test) {\n      return newInterval(function (date) {\n        if (date >= date) while (floori(date), !test(date)) {\n          date.setTime(date - 1);\n        }\n      }, function (date, step) {\n        if (date >= date) {\n          if (step < 0) while (++step <= 0) {\n            while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n          } else while (--step >= 0) {\n            while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n          }\n        }\n      });\n    };\n\n    if (count) {\n      interval.count = function (start, end) {\n        t0.setTime(+start), t1.setTime(+end);\n        floori(t0), floori(t1);\n        return Math.floor(count(t0, t1));\n      };\n\n      interval.every = function (step) {\n        step = Math.floor(step);\n        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n          return field(d) % step === 0;\n        } : function (d) {\n          return interval.count(0, d) % step === 0;\n        });\n      };\n    }\n\n    return interval;\n  }\n\n  var millisecond = newInterval(function () {\n    // noop\n  }, function (date, step) {\n    date.setTime(+date + step);\n  }, function (start, end) {\n    return end - start;\n  });\n\n  // An optimized implementation for this simple case.\n  millisecond.every = function (k) {\n    k = Math.floor(k);\n    if (!isFinite(k) || !(k > 0)) return null;\n    if (!(k > 1)) return millisecond;\n    return newInterval(function (date) {\n      date.setTime(Math.floor(date / k) * k);\n    }, function (date, step) {\n      date.setTime(+date + step * k);\n    }, function (start, end) {\n      return (end - start) / k;\n    });\n  };\n\n  var milliseconds = millisecond.range;\n\n  var durationSecond = 1e3;\n  var durationMinute = 6e4;\n  var durationHour = 36e5;\n  var durationDay = 864e5;\n  var durationWeek = 6048e5;\n\n  var second = newInterval(function (date) {\n    date.setTime(Math.floor(date / durationSecond) * durationSecond);\n  }, function (date, step) {\n    date.setTime(+date + step * durationSecond);\n  }, function (start, end) {\n    return (end - start) / durationSecond;\n  }, function (date) {\n    return date.getUTCSeconds();\n  });\n\n  var seconds = second.range;\n\n  var minute = newInterval(function (date) {\n    date.setTime(Math.floor(date / durationMinute) * durationMinute);\n  }, function (date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function (start, end) {\n    return (end - start) / durationMinute;\n  }, function (date) {\n    return date.getMinutes();\n  });\n\n  var minutes = minute.range;\n\n  var hour = newInterval(function (date) {\n    var offset = date.getTimezoneOffset() * durationMinute % durationHour;\n    if (offset < 0) offset += durationHour;\n    date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);\n  }, function (date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function (start, end) {\n    return (end - start) / durationHour;\n  }, function (date) {\n    return date.getHours();\n  });\n\n  var hours = hour.range;\n\n  var day = newInterval(function (date) {\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setDate(date.getDate() + step);\n  }, function (start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n  }, function (date) {\n    return date.getDate() - 1;\n  });\n\n  var days = day.range;\n\n  function weekday(i) {\n    return newInterval(function (date) {\n      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n      date.setHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setDate(date.getDate() + step * 7);\n    }, function (start, end) {\n      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n    });\n  }\n\n  var sunday = weekday(0);\n  var monday = weekday(1);\n  var tuesday = weekday(2);\n  var wednesday = weekday(3);\n  var thursday = weekday(4);\n  var friday = weekday(5);\n  var saturday = weekday(6);\n\n  var sundays = sunday.range;\n  var mondays = monday.range;\n  var tuesdays = tuesday.range;\n  var wednesdays = wednesday.range;\n  var thursdays = thursday.range;\n  var fridays = friday.range;\n  var saturdays = saturday.range;\n\n  var month = newInterval(function (date) {\n    date.setDate(1);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setMonth(date.getMonth() + step);\n  }, function (start, end) {\n    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n  }, function (date) {\n    return date.getMonth();\n  });\n\n  var months = month.range;\n\n  var year = newInterval(function (date) {\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setFullYear(date.getFullYear() + step);\n  }, function (start, end) {\n    return end.getFullYear() - start.getFullYear();\n  }, function (date) {\n    return date.getFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  year.every = function (k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n      date.setMonth(0, 1);\n      date.setHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setFullYear(date.getFullYear() + step * k);\n    });\n  };\n\n  var years = year.range;\n\n  var utcMinute = newInterval(function (date) {\n    date.setUTCSeconds(0, 0);\n  }, function (date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function (start, end) {\n    return (end - start) / durationMinute;\n  }, function (date) {\n    return date.getUTCMinutes();\n  });\n\n  var utcMinutes = utcMinute.range;\n\n  var utcHour = newInterval(function (date) {\n    date.setUTCMinutes(0, 0, 0);\n  }, function (date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function (start, end) {\n    return (end - start) / durationHour;\n  }, function (date) {\n    return date.getUTCHours();\n  });\n\n  var utcHours = utcHour.range;\n\n  var utcDay = newInterval(function (date) {\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCDate(date.getUTCDate() + step);\n  }, function (start, end) {\n    return (end - start) / durationDay;\n  }, function (date) {\n    return date.getUTCDate() - 1;\n  });\n\n  var utcDays = utcDay.range;\n\n  function utcWeekday(i) {\n    return newInterval(function (date) {\n      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setUTCDate(date.getUTCDate() + step * 7);\n    }, function (start, end) {\n      return (end - start) / durationWeek;\n    });\n  }\n\n  var utcSunday = utcWeekday(0);\n  var utcMonday = utcWeekday(1);\n  var utcTuesday = utcWeekday(2);\n  var utcWednesday = utcWeekday(3);\n  var utcThursday = utcWeekday(4);\n  var utcFriday = utcWeekday(5);\n  var utcSaturday = utcWeekday(6);\n\n  var utcSundays = utcSunday.range;\n  var utcMondays = utcMonday.range;\n  var utcTuesdays = utcTuesday.range;\n  var utcWednesdays = utcWednesday.range;\n  var utcThursdays = utcThursday.range;\n  var utcFridays = utcFriday.range;\n  var utcSaturdays = utcSaturday.range;\n\n  var utcMonth = newInterval(function (date) {\n    date.setUTCDate(1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCMonth(date.getUTCMonth() + step);\n  }, function (start, end) {\n    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n  }, function (date) {\n    return date.getUTCMonth();\n  });\n\n  var utcMonths = utcMonth.range;\n\n  var utcYear = newInterval(function (date) {\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step);\n  }, function (start, end) {\n    return end.getUTCFullYear() - start.getUTCFullYear();\n  }, function (date) {\n    return date.getUTCFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  utcYear.every = function (k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n      date.setUTCMonth(0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function (date, step) {\n      date.setUTCFullYear(date.getUTCFullYear() + step * k);\n    });\n  };\n\n  var utcYears = utcYear.range;\n\n  exports.timeInterval = newInterval;\n  exports.timeMillisecond = millisecond;\n  exports.timeMilliseconds = milliseconds;\n  exports.utcMillisecond = millisecond;\n  exports.utcMilliseconds = milliseconds;\n  exports.timeSecond = second;\n  exports.timeSeconds = seconds;\n  exports.utcSecond = second;\n  exports.utcSeconds = seconds;\n  exports.timeMinute = minute;\n  exports.timeMinutes = minutes;\n  exports.timeHour = hour;\n  exports.timeHours = hours;\n  exports.timeDay = day;\n  exports.timeDays = days;\n  exports.timeWeek = sunday;\n  exports.timeWeeks = sundays;\n  exports.timeSunday = sunday;\n  exports.timeSundays = sundays;\n  exports.timeMonday = monday;\n  exports.timeMondays = mondays;\n  exports.timeTuesday = tuesday;\n  exports.timeTuesdays = tuesdays;\n  exports.timeWednesday = wednesday;\n  exports.timeWednesdays = wednesdays;\n  exports.timeThursday = thursday;\n  exports.timeThursdays = thursdays;\n  exports.timeFriday = friday;\n  exports.timeFridays = fridays;\n  exports.timeSaturday = saturday;\n  exports.timeSaturdays = saturdays;\n  exports.timeMonth = month;\n  exports.timeMonths = months;\n  exports.timeYear = year;\n  exports.timeYears = years;\n  exports.utcMinute = utcMinute;\n  exports.utcMinutes = utcMinutes;\n  exports.utcHour = utcHour;\n  exports.utcHours = utcHours;\n  exports.utcDay = utcDay;\n  exports.utcDays = utcDays;\n  exports.utcWeek = utcSunday;\n  exports.utcWeeks = utcSundays;\n  exports.utcSunday = utcSunday;\n  exports.utcSundays = utcSundays;\n  exports.utcMonday = utcMonday;\n  exports.utcMondays = utcMondays;\n  exports.utcTuesday = utcTuesday;\n  exports.utcTuesdays = utcTuesdays;\n  exports.utcWednesday = utcWednesday;\n  exports.utcWednesdays = utcWednesdays;\n  exports.utcThursday = utcThursday;\n  exports.utcThursdays = utcThursdays;\n  exports.utcFriday = utcFriday;\n  exports.utcFridays = utcFridays;\n  exports.utcSaturday = utcSaturday;\n  exports.utcSaturdays = utcSaturdays;\n  exports.utcMonth = utcMonth;\n  exports.utcMonths = utcMonths;\n  exports.utcYear = utcYear;\n  exports.utcYears = utcYears;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-selection/build/d3-selection.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-selection/build/d3-selection.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-selection/ Version 1.1.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var xhtml = \"http://www.w3.org/1999/xhtml\";\n\n  var namespaces = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: xhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n\n  var namespace = function namespace(name) {\n    var prefix = name += \"\",\n        i = prefix.indexOf(\":\");\n    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n    return namespaces.hasOwnProperty(prefix) ? { space: namespaces[prefix], local: name } : name;\n  };\n\n  function creatorInherit(name) {\n    return function () {\n      var document = this.ownerDocument,\n          uri = this.namespaceURI;\n      return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);\n    };\n  }\n\n  function creatorFixed(fullname) {\n    return function () {\n      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n    };\n  }\n\n  var creator = function creator(name) {\n    var fullname = namespace(name);\n    return (fullname.local ? creatorFixed : creatorInherit)(fullname);\n  };\n\n  var nextId = 0;\n\n  function local() {\n    return new Local();\n  }\n\n  function Local() {\n    this._ = \"@\" + (++nextId).toString(36);\n  }\n\n  Local.prototype = local.prototype = {\n    constructor: Local,\n    get: function get(node) {\n      var id = this._;\n      while (!(id in node)) {\n        if (!(node = node.parentNode)) return;\n      }return node[id];\n    },\n    set: function set(node, value) {\n      return node[this._] = value;\n    },\n    remove: function remove(node) {\n      return this._ in node && delete node[this._];\n    },\n    toString: function toString() {\n      return this._;\n    }\n  };\n\n  var matcher = function matcher(selector) {\n    return function () {\n      return this.matches(selector);\n    };\n  };\n\n  if (typeof document !== \"undefined\") {\n    var element = document.documentElement;\n    if (!element.matches) {\n      var vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;\n      matcher = function matcher(selector) {\n        return function () {\n          return vendorMatches.call(this, selector);\n        };\n      };\n    }\n  }\n\n  var matcher$1 = matcher;\n\n  var filterEvents = {};\n\n  exports.event = null;\n\n  if (typeof document !== \"undefined\") {\n    var element$1 = document.documentElement;\n    if (!(\"onmouseenter\" in element$1)) {\n      filterEvents = { mouseenter: \"mouseover\", mouseleave: \"mouseout\" };\n    }\n  }\n\n  function filterContextListener(listener, index, group) {\n    listener = contextListener(listener, index, group);\n    return function (event) {\n      var related = event.relatedTarget;\n      if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {\n        listener.call(this, event);\n      }\n    };\n  }\n\n  function contextListener(listener, index, group) {\n    return function (event1) {\n      var event0 = exports.event; // Events can be reentrant (e.g., focus).\n      exports.event = event1;\n      try {\n        listener.call(this, this.__data__, index, group);\n      } finally {\n        exports.event = event0;\n      }\n    };\n  }\n\n  function parseTypenames(typenames) {\n    return typenames.trim().split(/^|\\s+/).map(function (t) {\n      var name = \"\",\n          i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      return { type: t, name: name };\n    });\n  }\n\n  function onRemove(typename) {\n    return function () {\n      var on = this.__on;\n      if (!on) return;\n      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n        } else {\n          on[++i] = o;\n        }\n      }\n      if (++i) on.length = i;else delete this.__on;\n    };\n  }\n\n  function onAdd(typename, value, capture) {\n    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n    return function (d, i, group) {\n      var on = this.__on,\n          o,\n          listener = wrap(value, i, group);\n      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n          o.value = value;\n          return;\n        }\n      }\n      this.addEventListener(typename.type, listener, capture);\n      o = { type: typename.type, name: typename.name, value: value, listener: listener, capture: capture };\n      if (!on) this.__on = [o];else on.push(o);\n    };\n  }\n\n  var selection_on = function selection_on(typename, value, capture) {\n    var typenames = parseTypenames(typename + \"\"),\n        i,\n        n = typenames.length,\n        t;\n\n    if (arguments.length < 2) {\n      var on = this.node().__on;\n      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n        for (i = 0, o = on[j]; i < n; ++i) {\n          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n            return o.value;\n          }\n        }\n      }\n      return;\n    }\n\n    on = value ? onAdd : onRemove;\n    if (capture == null) capture = false;\n    for (i = 0; i < n; ++i) {\n      this.each(on(typenames[i], value, capture));\n    }return this;\n  };\n\n  function customEvent(event1, listener, that, args) {\n    var event0 = exports.event;\n    event1.sourceEvent = exports.event;\n    exports.event = event1;\n    try {\n      return listener.apply(that, args);\n    } finally {\n      exports.event = event0;\n    }\n  }\n\n  var sourceEvent = function sourceEvent() {\n    var current = exports.event,\n        source;\n    while (source = current.sourceEvent) {\n      current = source;\n    }return current;\n  };\n\n  var point = function point(node, event) {\n    var svg = node.ownerSVGElement || node;\n\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n\n    var rect = node.getBoundingClientRect();\n    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n  };\n\n  var mouse = function mouse(node) {\n    var event = sourceEvent();\n    if (event.changedTouches) event = event.changedTouches[0];\n    return point(node, event);\n  };\n\n  function none() {}\n\n  var selector = function selector(_selector) {\n    return _selector == null ? none : function () {\n      return this.querySelector(_selector);\n    };\n  };\n\n  var selection_select = function selection_select(select) {\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  };\n\n  function empty() {\n    return [];\n  }\n\n  var selectorAll = function selectorAll(selector) {\n    return selector == null ? empty : function () {\n      return this.querySelectorAll(selector);\n    };\n  };\n\n  var selection_selectAll = function selection_selectAll(select) {\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          subgroups.push(select.call(node, node.__data__, i, group));\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, parents);\n  };\n\n  var selection_filter = function selection_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  };\n\n  var sparse = function sparse(update) {\n    return new Array(update.length);\n  };\n\n  var selection_enter = function selection_enter() {\n    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n  };\n\n  function EnterNode(parent, datum) {\n    this.ownerDocument = parent.ownerDocument;\n    this.namespaceURI = parent.namespaceURI;\n    this._next = null;\n    this._parent = parent;\n    this.__data__ = datum;\n  }\n\n  EnterNode.prototype = {\n    constructor: EnterNode,\n    appendChild: function appendChild(child) {\n      return this._parent.insertBefore(child, this._next);\n    },\n    insertBefore: function insertBefore(child, next) {\n      return this._parent.insertBefore(child, next);\n    },\n    querySelector: function querySelector(selector) {\n      return this._parent.querySelector(selector);\n    },\n    querySelectorAll: function querySelectorAll(selector) {\n      return this._parent.querySelectorAll(selector);\n    }\n  };\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\n  function bindIndex(parent, group, enter, update, exit, data) {\n    var i = 0,\n        node,\n        groupLength = group.length,\n        dataLength = data.length;\n\n    // Put any non-null nodes that fit into update.\n    // Put any null nodes into enter.\n    // Put any remaining data into enter.\n    for (; i < dataLength; ++i) {\n      if (node = group[i]) {\n        node.__data__ = data[i];\n        update[i] = node;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Put any non-null nodes that don’t fit into exit.\n    for (; i < groupLength; ++i) {\n      if (node = group[i]) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function bindKey(parent, group, enter, update, exit, data, key) {\n    var i,\n        node,\n        nodeByKeyValue = {},\n        groupLength = group.length,\n        dataLength = data.length,\n        keyValues = new Array(groupLength),\n        keyValue;\n\n    // Compute the key for each node.\n    // If multiple nodes have the same key, the duplicates are added to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if (node = group[i]) {\n        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n        if (keyValue in nodeByKeyValue) {\n          exit[i] = node;\n        } else {\n          nodeByKeyValue[keyValue] = node;\n        }\n      }\n    }\n\n    // Compute the key for each datum.\n    // If there a node associated with this key, join and add it to update.\n    // If there is not (or the key is a duplicate), add it to enter.\n    for (i = 0; i < dataLength; ++i) {\n      keyValue = keyPrefix + key.call(parent, data[i], i, data);\n      if (node = nodeByKeyValue[keyValue]) {\n        update[i] = node;\n        node.__data__ = data[i];\n        nodeByKeyValue[keyValue] = null;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Add any remaining nodes that were not bound to data to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  var selection_data = function selection_data(value, key) {\n    if (!value) {\n      data = new Array(this.size()), j = -1;\n      this.each(function (d) {\n        data[++j] = d;\n      });\n      return data;\n    }\n\n    var bind = key ? bindKey : bindIndex,\n        parents = this._parents,\n        groups = this._groups;\n\n    if (typeof value !== \"function\") value = constant(value);\n\n    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n      var parent = parents[j],\n          group = groups[j],\n          groupLength = group.length,\n          data = value.call(parent, parent && parent.__data__, j, parents),\n          dataLength = data.length,\n          enterGroup = enter[j] = new Array(dataLength),\n          updateGroup = update[j] = new Array(dataLength),\n          exitGroup = exit[j] = new Array(groupLength);\n\n      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n      // Now connect the enter nodes to their following update node, such that\n      // appendChild can insert the materialized enter node before this node,\n      // rather than at the end of the parent node.\n      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n        if (previous = enterGroup[i0]) {\n          if (i0 >= i1) i1 = i0 + 1;\n          while (!(next = updateGroup[i1]) && ++i1 < dataLength) {}\n          previous._next = next || null;\n        }\n      }\n    }\n\n    update = new Selection(update, parents);\n    update._enter = enter;\n    update._exit = exit;\n    return update;\n  };\n\n  var selection_exit = function selection_exit() {\n    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n  };\n\n  var selection_merge = function selection_merge(selection) {\n\n    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Selection(merges, this._parents);\n  };\n\n  var selection_order = function selection_order() {\n\n    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n\n    return this;\n  };\n\n  var selection_sort = function selection_sort(compare) {\n    if (!compare) compare = ascending;\n\n    function compareNode(a, b) {\n      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n    }\n\n    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          sortgroup[i] = node;\n        }\n      }\n      sortgroup.sort(compareNode);\n    }\n\n    return new Selection(sortgroups, this._parents).order();\n  };\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  var selection_call = function selection_call() {\n    var callback = arguments[0];\n    arguments[0] = this;\n    callback.apply(null, arguments);\n    return this;\n  };\n\n  var selection_nodes = function selection_nodes() {\n    var nodes = new Array(this.size()),\n        i = -1;\n    this.each(function () {\n      nodes[++i] = this;\n    });\n    return nodes;\n  };\n\n  var selection_node = function selection_node() {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n\n    return null;\n  };\n\n  var selection_size = function selection_size() {\n    var size = 0;\n    this.each(function () {\n      ++size;\n    });\n    return size;\n  };\n\n  var selection_empty = function selection_empty() {\n    return !this.node();\n  };\n\n  var selection_each = function selection_each(callback) {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n        if (node = group[i]) callback.call(node, node.__data__, i, group);\n      }\n    }\n\n    return this;\n  };\n\n  function attrRemove(name) {\n    return function () {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS(fullname) {\n    return function () {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant(name, value) {\n    return function () {\n      this.setAttribute(name, value);\n    };\n  }\n\n  function attrConstantNS(fullname, value) {\n    return function () {\n      this.setAttributeNS(fullname.space, fullname.local, value);\n    };\n  }\n\n  function attrFunction(name, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);\n    };\n  }\n\n  function attrFunctionNS(fullname, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);\n    };\n  }\n\n  var selection_attr = function selection_attr(name, value) {\n    var fullname = namespace(name);\n\n    if (arguments.length < 2) {\n      var node = this.node();\n      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);\n    }\n\n    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === \"function\" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));\n  };\n\n  var defaultView = function defaultView(node) {\n    return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node\n    node.document && node // node is a Window\n    || node.defaultView; // node is a Document\n  };\n\n  function styleRemove(name) {\n    return function () {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant(name, value, priority) {\n    return function () {\n      this.style.setProperty(name, value, priority);\n    };\n  }\n\n  function styleFunction(name, value, priority) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);\n    };\n  }\n\n  var selection_style = function selection_style(name, value, priority) {\n    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === \"function\" ? styleFunction : styleConstant)(name, value, priority == null ? \"\" : priority)) : styleValue(this.node(), name);\n  };\n\n  function styleValue(node, name) {\n    return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n  }\n\n  function propertyRemove(name) {\n    return function () {\n      delete this[name];\n    };\n  }\n\n  function propertyConstant(name, value) {\n    return function () {\n      this[name] = value;\n    };\n  }\n\n  function propertyFunction(name, value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      if (v == null) delete this[name];else this[name] = v;\n    };\n  }\n\n  var selection_property = function selection_property(name, value) {\n    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === \"function\" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];\n  };\n\n  function classArray(string) {\n    return string.trim().split(/^|\\s+/);\n  }\n\n  function classList(node) {\n    return node.classList || new ClassList(node);\n  }\n\n  function ClassList(node) {\n    this._node = node;\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\n  }\n\n  ClassList.prototype = {\n    add: function add(name) {\n      var i = this._names.indexOf(name);\n      if (i < 0) {\n        this._names.push(name);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    remove: function remove(name) {\n      var i = this._names.indexOf(name);\n      if (i >= 0) {\n        this._names.splice(i, 1);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    contains: function contains(name) {\n      return this._names.indexOf(name) >= 0;\n    }\n  };\n\n  function classedAdd(node, names) {\n    var list = classList(node),\n        i = -1,\n        n = names.length;\n    while (++i < n) {\n      list.add(names[i]);\n    }\n  }\n\n  function classedRemove(node, names) {\n    var list = classList(node),\n        i = -1,\n        n = names.length;\n    while (++i < n) {\n      list.remove(names[i]);\n    }\n  }\n\n  function classedTrue(names) {\n    return function () {\n      classedAdd(this, names);\n    };\n  }\n\n  function classedFalse(names) {\n    return function () {\n      classedRemove(this, names);\n    };\n  }\n\n  function classedFunction(names, value) {\n    return function () {\n      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n    };\n  }\n\n  var selection_classed = function selection_classed(name, value) {\n    var names = classArray(name + \"\");\n\n    if (arguments.length < 2) {\n      var list = classList(this.node()),\n          i = -1,\n          n = names.length;\n      while (++i < n) {\n        if (!list.contains(names[i])) return false;\n      }return true;\n    }\n\n    return this.each((typeof value === \"function\" ? classedFunction : value ? classedTrue : classedFalse)(names, value));\n  };\n\n  function textRemove() {\n    this.textContent = \"\";\n  }\n\n  function textConstant(value) {\n    return function () {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction(value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    };\n  }\n\n  var selection_text = function selection_text(value) {\n    return arguments.length ? this.each(value == null ? textRemove : (typeof value === \"function\" ? textFunction : textConstant)(value)) : this.node().textContent;\n  };\n\n  function htmlRemove() {\n    this.innerHTML = \"\";\n  }\n\n  function htmlConstant(value) {\n    return function () {\n      this.innerHTML = value;\n    };\n  }\n\n  function htmlFunction(value) {\n    return function () {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    };\n  }\n\n  var selection_html = function selection_html(value) {\n    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === \"function\" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;\n  };\n\n  function raise() {\n    if (this.nextSibling) this.parentNode.appendChild(this);\n  }\n\n  var selection_raise = function selection_raise() {\n    return this.each(raise);\n  };\n\n  function lower() {\n    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n  }\n\n  var selection_lower = function selection_lower() {\n    return this.each(lower);\n  };\n\n  var selection_append = function selection_append(name) {\n    var create = typeof name === \"function\" ? name : creator(name);\n    return this.select(function () {\n      return this.appendChild(create.apply(this, arguments));\n    });\n  };\n\n  function constantNull() {\n    return null;\n  }\n\n  var selection_insert = function selection_insert(name, before) {\n    var create = typeof name === \"function\" ? name : creator(name),\n        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n    return this.select(function () {\n      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n    });\n  };\n\n  function remove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n\n  var selection_remove = function selection_remove() {\n    return this.each(remove);\n  };\n\n  var selection_datum = function selection_datum(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.node().__data__;\n  };\n\n  function dispatchEvent(node, type, params) {\n    var window = defaultView(node),\n        event = window.CustomEvent;\n\n    if (typeof event === \"function\") {\n      event = new event(type, params);\n    } else {\n      event = window.document.createEvent(\"Event\");\n      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);\n    }\n\n    node.dispatchEvent(event);\n  }\n\n  function dispatchConstant(type, params) {\n    return function () {\n      return dispatchEvent(this, type, params);\n    };\n  }\n\n  function dispatchFunction(type, params) {\n    return function () {\n      return dispatchEvent(this, type, params.apply(this, arguments));\n    };\n  }\n\n  var selection_dispatch = function selection_dispatch(type, params) {\n    return this.each((typeof params === \"function\" ? dispatchFunction : dispatchConstant)(type, params));\n  };\n\n  var root = [null];\n\n  function Selection(groups, parents) {\n    this._groups = groups;\n    this._parents = parents;\n  }\n\n  function selection() {\n    return new Selection([[document.documentElement]], root);\n  }\n\n  Selection.prototype = selection.prototype = {\n    constructor: Selection,\n    select: selection_select,\n    selectAll: selection_selectAll,\n    filter: selection_filter,\n    data: selection_data,\n    enter: selection_enter,\n    exit: selection_exit,\n    merge: selection_merge,\n    order: selection_order,\n    sort: selection_sort,\n    call: selection_call,\n    nodes: selection_nodes,\n    node: selection_node,\n    size: selection_size,\n    empty: selection_empty,\n    each: selection_each,\n    attr: selection_attr,\n    style: selection_style,\n    property: selection_property,\n    classed: selection_classed,\n    text: selection_text,\n    html: selection_html,\n    raise: selection_raise,\n    lower: selection_lower,\n    append: selection_append,\n    insert: selection_insert,\n    remove: selection_remove,\n    datum: selection_datum,\n    on: selection_on,\n    dispatch: selection_dispatch\n  };\n\n  var select = function select(selector) {\n    return typeof selector === \"string\" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);\n  };\n\n  var selectAll = function selectAll(selector) {\n    return typeof selector === \"string\" ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([selector == null ? [] : selector], root);\n  };\n\n  var touch = function touch(node, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n\n    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return point(node, touch);\n      }\n    }\n\n    return null;\n  };\n\n  var touches = function touches(node, _touches) {\n    if (_touches == null) _touches = sourceEvent().touches;\n\n    for (var i = 0, n = _touches ? _touches.length : 0, points = new Array(n); i < n; ++i) {\n      points[i] = point(node, _touches[i]);\n    }\n\n    return points;\n  };\n\n  exports.creator = creator;\n  exports.local = local;\n  exports.matcher = matcher$1;\n  exports.mouse = mouse;\n  exports.namespace = namespace;\n  exports.namespaces = namespaces;\n  exports.select = select;\n  exports.selectAll = selectAll;\n  exports.selection = selection;\n  exports.selector = selector;\n  exports.selectorAll = selectorAll;\n  exports.style = styleValue;\n  exports.touch = touch;\n  exports.touches = touches;\n  exports.window = defaultView;\n  exports.customEvent = customEvent;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-voronoi/build/d3-voronoi.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-voronoi/build/d3-voronoi.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-voronoi/ Version 1.1.2. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  function x(d) {\n    return d[0];\n  }\n\n  function y(d) {\n    return d[1];\n  }\n\n  function RedBlackTree() {\n    this._ = null; // root node\n  }\n\n  function RedBlackNode(node) {\n    node.U = // parent node\n    node.C = // color - true for red, false for black\n    node.L = // left node\n    node.R = // right node\n    node.P = // previous node\n    node.N = null; // next node\n  }\n\n  RedBlackTree.prototype = {\n    constructor: RedBlackTree,\n\n    insert: function insert(after, node) {\n      var parent, grandpa, uncle;\n\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) {\n            after = after.L;\n          }after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = RedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              RedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              RedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n\n    remove: function remove(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n\n      var parent = node.U,\n          sibling,\n          left = node.L,\n          right = node.R,\n          next,\n          red;\n\n      if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);\n\n      if (parent) {\n        if (parent.L === node) parent.L = next;else parent.R = next;\n      } else {\n        this._ = next;\n      }\n\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;return;\n      }\n\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              RedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            RedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              RedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            RedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n\n      if (node) node.C = false;\n    }\n  };\n\n  function RedBlackRotateLeft(tree, node) {\n    var p = node,\n        q = node.R,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n\n  function RedBlackRotateRight(tree, node) {\n    var p = node,\n        q = node.L,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n\n  function RedBlackFirst(node) {\n    while (node.L) {\n      node = node.L;\n    }return node;\n  }\n\n  function createEdge(left, right, v0, v1) {\n    var edge = [null, null],\n        index = edges.push(edge) - 1;\n    edge.left = left;\n    edge.right = right;\n    if (v0) setEdgeEnd(edge, left, right, v0);\n    if (v1) setEdgeEnd(edge, right, left, v1);\n    cells[left.index].halfedges.push(index);\n    cells[right.index].halfedges.push(index);\n    return edge;\n  }\n\n  function createBorderEdge(left, v0, v1) {\n    var edge = [v0, v1];\n    edge.left = left;\n    return edge;\n  }\n\n  function setEdgeEnd(edge, left, right, vertex) {\n    if (!edge[0] && !edge[1]) {\n      edge[0] = vertex;\n      edge.left = left;\n      edge.right = right;\n    } else if (edge.left === right) {\n      edge[1] = vertex;\n    } else {\n      edge[0] = vertex;\n    }\n  }\n\n  // Liang–Barsky line clipping.\n  function clipEdge(edge, x0, y0, x1, y1) {\n    var a = edge[0],\n        b = edge[1],\n        ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n    if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n    if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n    return true;\n  }\n\n  function connectEdge(edge, x0, y0, x1, y1) {\n    var v1 = edge[1];\n    if (v1) return true;\n\n    var v0 = edge[0],\n        left = edge.left,\n        right = edge.right,\n        lx = left[0],\n        ly = left[1],\n        rx = right[0],\n        ry = right[1],\n        fx = (lx + rx) / 2,\n        fy = (ly + ry) / 2,\n        fm,\n        fb;\n\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;\n        v1 = [fx, y1];\n      } else {\n        if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;\n        v1 = [fx, y0];\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;\n          v1 = [(y1 - fb) / fm, y1];\n        } else {\n          if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;\n          v1 = [(y0 - fb) / fm, y0];\n        }\n      } else {\n        if (ly < ry) {\n          if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;\n          v1 = [x1, fm * x1 + fb];\n        } else {\n          if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;\n          v1 = [x0, fm * x0 + fb];\n        }\n      }\n    }\n\n    edge[0] = v0;\n    edge[1] = v1;\n    return true;\n  }\n\n  function clipEdges(x0, y0, x1, y1) {\n    var i = edges.length,\n        edge;\n\n    while (i--) {\n      if (!connectEdge(edge = edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {\n        delete edges[i];\n      }\n    }\n  }\n\n  function createCell(site) {\n    return cells[site.index] = {\n      site: site,\n      halfedges: []\n    };\n  }\n\n  function cellHalfedgeAngle(cell, edge) {\n    var site = cell.site,\n        va = edge.left,\n        vb = edge.right;\n    if (site === vb) vb = va, va = site;\n    if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n    if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];\n    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n  }\n\n  function cellHalfedgeStart(cell, edge) {\n    return edge[+(edge.left !== cell.site)];\n  }\n\n  function cellHalfedgeEnd(cell, edge) {\n    return edge[+(edge.left === cell.site)];\n  }\n\n  function sortCellHalfedges() {\n    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n      if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n        var index = new Array(m),\n            array = new Array(m);\n        for (j = 0; j < m; ++j) {\n          index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n        }index.sort(function (i, j) {\n          return array[j] - array[i];\n        });\n        for (j = 0; j < m; ++j) {\n          array[j] = halfedges[index[j]];\n        }for (j = 0; j < m; ++j) {\n          halfedges[j] = array[j];\n        }\n      }\n    }\n  }\n\n  function clipCells(x0, y0, x1, y1) {\n    var nCells = cells.length,\n        iCell,\n        cell,\n        site,\n        iHalfedge,\n        halfedges,\n        nHalfedges,\n        start,\n        startX,\n        startY,\n        end,\n        endX,\n        endY,\n        cover = true;\n\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        halfedges = cell.halfedges;\n        iHalfedge = halfedges.length;\n\n        // Remove any dangling clipped edges.\n        while (iHalfedge--) {\n          if (!edges[halfedges[iHalfedge]]) {\n            halfedges.splice(iHalfedge, 1);\n          }\n        }\n\n        // Insert any border edges as necessary.\n        iHalfedge = 0, nHalfedges = halfedges.length;\n        while (iHalfedge < nHalfedges) {\n          end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n          start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n          if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {\n            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end, Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1] : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1] : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0] : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0] : null)) - 1);\n            ++nHalfedges;\n          }\n        }\n\n        if (nHalfedges) cover = false;\n      }\n    }\n\n    // If there weren’t any edges, have the closest site cover the extent.\n    // It doesn’t matter which corner of the extent we measure!\n    if (cover) {\n      var dx,\n          dy,\n          d2,\n          dc = Infinity;\n\n      for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n        if (cell = cells[iCell]) {\n          site = cell.site;\n          dx = site[0] - x0;\n          dy = site[1] - y0;\n          d2 = dx * dx + dy * dy;\n          if (d2 < dc) dc = d2, cover = cell;\n        }\n      }\n\n      if (cover) {\n        var v00 = [x0, y0],\n            v01 = [x0, y1],\n            v11 = [x1, y1],\n            v10 = [x1, y0];\n        cover.halfedges.push(edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1, edges.push(createBorderEdge(site, v01, v11)) - 1, edges.push(createBorderEdge(site, v11, v10)) - 1, edges.push(createBorderEdge(site, v10, v00)) - 1);\n      }\n    }\n\n    // Lastly delete any cells with no edges; these were entirely clipped.\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        if (!cell.halfedges.length) {\n          delete cells[iCell];\n        }\n      }\n    }\n  }\n\n  var circlePool = [];\n\n  var firstCircle;\n\n  function Circle() {\n    RedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n\n  function attachCircle(arc) {\n    var lArc = arc.P,\n        rArc = arc.N;\n\n    if (!lArc || !rArc) return;\n\n    var lSite = lArc.site,\n        cSite = arc.site,\n        rSite = rArc.site;\n\n    if (lSite === rSite) return;\n\n    var bx = cSite[0],\n        by = cSite[1],\n        ax = lSite[0] - bx,\n        ay = lSite[1] - by,\n        cx = rSite[0] - bx,\n        cy = rSite[1] - by;\n\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -epsilon2) return;\n\n    var ha = ax * ax + ay * ay,\n        hc = cx * cx + cy * cy,\n        x = (cy * ha - ay * hc) / d,\n        y = (ax * hc - cx * ha) / d;\n\n    var circle = circlePool.pop() || new Circle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n    arc.circle = circle;\n\n    var before = null,\n        node = circles._;\n\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L;else {\n          before = node.P;break;\n        }\n      } else {\n        if (node.R) node = node.R;else {\n          before = node;break;\n        }\n      }\n    }\n\n    circles.insert(before, circle);\n    if (!before) firstCircle = circle;\n  }\n\n  function detachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) firstCircle = circle.N;\n      circles.remove(circle);\n      circlePool.push(circle);\n      RedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n\n  var beachPool = [];\n\n  function Beach() {\n    RedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n\n  function createBeach(site) {\n    var beach = beachPool.pop() || new Beach();\n    beach.site = site;\n    return beach;\n  }\n\n  function detachBeach(beach) {\n    detachCircle(beach);\n    beaches.remove(beach);\n    beachPool.push(beach);\n    RedBlackNode(beach);\n  }\n\n  function removeBeach(beach) {\n    var circle = beach.circle,\n        x = circle.x,\n        y = circle.cy,\n        vertex = [x, y],\n        previous = beach.P,\n        next = beach.N,\n        disappearing = [beach];\n\n    detachBeach(beach);\n\n    var lArc = previous;\n    while (lArc.circle && Math.abs(x - lArc.circle.x) < epsilon && Math.abs(y - lArc.circle.cy) < epsilon) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      detachBeach(lArc);\n      lArc = previous;\n    }\n\n    disappearing.unshift(lArc);\n    detachCircle(lArc);\n\n    var rArc = next;\n    while (rArc.circle && Math.abs(x - rArc.circle.x) < epsilon && Math.abs(y - rArc.circle.cy) < epsilon) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      detachBeach(rArc);\n      rArc = next;\n    }\n\n    disappearing.push(rArc);\n    detachCircle(rArc);\n\n    var nArcs = disappearing.length,\n        iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function addBeach(site) {\n    var x = site[0],\n        directrix = site[1],\n        lArc,\n        rArc,\n        dxl,\n        dxr,\n        node = beaches._;\n\n    while (node) {\n      dxl = leftBreakPoint(node, directrix) - x;\n      if (dxl > epsilon) node = node.L;else {\n        dxr = x - rightBreakPoint(node, directrix);\n        if (dxr > epsilon) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -epsilon) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -epsilon) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n\n    createCell(site);\n    var newArc = createBeach(site);\n    beaches.insert(lArc, newArc);\n\n    if (!lArc && !rArc) return;\n\n    if (lArc === rArc) {\n      detachCircle(lArc);\n      rArc = createBeach(lArc.site);\n      beaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n      attachCircle(lArc);\n      attachCircle(rArc);\n      return;\n    }\n\n    if (!rArc) {\n      // && lArc\n      newArc.edge = createEdge(lArc.site, newArc.site);\n      return;\n    }\n\n    // else lArc !== rArc\n    detachCircle(lArc);\n    detachCircle(rArc);\n\n    var lSite = lArc.site,\n        ax = lSite[0],\n        ay = lSite[1],\n        bx = site[0] - ax,\n        by = site[1] - ay,\n        rSite = rArc.site,\n        cx = rSite[0] - ax,\n        cy = rSite[1] - ay,\n        d = 2 * (bx * cy - by * cx),\n        hb = bx * bx + by * by,\n        hc = cx * cx + cy * cy,\n        vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\n    setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = createEdge(lSite, site, null, vertex);\n    rArc.edge = createEdge(site, rSite, null, vertex);\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function leftBreakPoint(arc, directrix) {\n    var site = arc.site,\n        rfocx = site[0],\n        rfocy = site[1],\n        pby2 = rfocy - directrix;\n\n    if (!pby2) return rfocx;\n\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n\n    site = lArc.site;\n    var lfocx = site[0],\n        lfocy = site[1],\n        plby2 = lfocy - directrix;\n\n    if (!plby2) return lfocx;\n\n    var hl = lfocx - rfocx,\n        aby2 = 1 / pby2 - 1 / plby2,\n        b = hl / plby2;\n\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\n    return (rfocx + lfocx) / 2;\n  }\n\n  function rightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return leftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site[1] === directrix ? site[0] : Infinity;\n  }\n\n  var epsilon = 1e-6;\n  var epsilon2 = 1e-12;\n  var beaches;\n  var cells;\n  var circles;\n  var edges;\n\n  function triangleArea(a, b, c) {\n    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n  }\n\n  function lexicographic(a, b) {\n    return b[1] - a[1] || b[0] - a[0];\n  }\n\n  function Diagram(sites, extent) {\n    var site = sites.sort(lexicographic).pop(),\n        x,\n        y,\n        circle;\n\n    edges = [];\n    cells = new Array(sites.length);\n    beaches = new RedBlackTree();\n    circles = new RedBlackTree();\n\n    while (true) {\n      circle = firstCircle;\n      if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {\n        if (site[0] !== x || site[1] !== y) {\n          addBeach(site);\n          x = site[0], y = site[1];\n        }\n        site = sites.pop();\n      } else if (circle) {\n        removeBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n\n    sortCellHalfedges();\n\n    if (extent) {\n      var x0 = +extent[0][0],\n          y0 = +extent[0][1],\n          x1 = +extent[1][0],\n          y1 = +extent[1][1];\n      clipEdges(x0, y0, x1, y1);\n      clipCells(x0, y0, x1, y1);\n    }\n\n    this.edges = edges;\n    this.cells = cells;\n\n    beaches = circles = edges = cells = null;\n  }\n\n  Diagram.prototype = {\n    constructor: Diagram,\n\n    polygons: function polygons() {\n      var edges = this.edges;\n\n      return this.cells.map(function (cell) {\n        var polygon = cell.halfedges.map(function (i) {\n          return cellHalfedgeStart(cell, edges[i]);\n        });\n        polygon.data = cell.site.data;\n        return polygon;\n      });\n    },\n\n    triangles: function triangles() {\n      var triangles = [],\n          edges = this.edges;\n\n      this.cells.forEach(function (cell, i) {\n        if (!(m = (halfedges = cell.halfedges).length)) return;\n        var site = cell.site,\n            halfedges,\n            j = -1,\n            m,\n            s0,\n            e1 = edges[halfedges[m - 1]],\n            s1 = e1.left === site ? e1.right : e1.left;\n\n        while (++j < m) {\n          s0 = s1;\n          e1 = edges[halfedges[j]];\n          s1 = e1.left === site ? e1.right : e1.left;\n          if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n            triangles.push([site.data, s0.data, s1.data]);\n          }\n        }\n      });\n\n      return triangles;\n    },\n\n    links: function links() {\n      return this.edges.filter(function (edge) {\n        return edge.right;\n      }).map(function (edge) {\n        return {\n          source: edge.left.data,\n          target: edge.right.data\n        };\n      });\n    },\n\n    find: function find(x, y, radius) {\n      var that = this,\n          i0,\n          i1 = that._found || 0,\n          n = that.cells.length,\n          cell;\n\n      // Use the previously-found cell, or start with an arbitrary one.\n      while (!(cell = that.cells[i1])) {\n        if (++i1 >= n) return null;\n      }var dx = x - cell.site[0],\n          dy = y - cell.site[1],\n          d2 = dx * dx + dy * dy;\n\n      // Traverse the half-edges to find a closer cell, if any.\n      do {\n        cell = that.cells[i0 = i1], i1 = null;\n        cell.halfedges.forEach(function (e) {\n          var edge = that.edges[e],\n              v = edge.left;\n          if ((v === cell.site || !v) && !(v = edge.right)) return;\n          var vx = x - v[0],\n              vy = y - v[1],\n              v2 = vx * vx + vy * vy;\n          if (v2 < d2) d2 = v2, i1 = v.index;\n        });\n      } while (i1 !== null);\n\n      that._found = i0;\n\n      return radius == null || d2 <= radius * radius ? cell.site : null;\n    }\n  };\n\n  var voronoi = function voronoi() {\n    var x$$1 = x,\n        y$$1 = y,\n        extent = null;\n\n    function voronoi(data) {\n      return new Diagram(data.map(function (d, i) {\n        var s = [Math.round(x$$1(d, i, data) / epsilon) * epsilon, Math.round(y$$1(d, i, data) / epsilon) * epsilon];\n        s.index = i;\n        s.data = d;\n        return s;\n      }), extent);\n    }\n\n    voronoi.polygons = function (data) {\n      return voronoi(data).polygons();\n    };\n\n    voronoi.links = function (data) {\n      return voronoi(data).links();\n    };\n\n    voronoi.triangles = function (data) {\n      return voronoi(data).triangles();\n    };\n\n    voronoi.x = function (_) {\n      return arguments.length ? (x$$1 = typeof _ === \"function\" ? _ : constant(+_), voronoi) : x$$1;\n    };\n\n    voronoi.y = function (_) {\n      return arguments.length ? (y$$1 = typeof _ === \"function\" ? _ : constant(+_), voronoi) : y$$1;\n    };\n\n    voronoi.extent = function (_) {\n      return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n    };\n\n    voronoi.size = function (_) {\n      return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\n    };\n\n    return voronoi;\n  };\n\n  exports.voronoi = voronoi;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-timer/build/d3-timer.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-timer/build/d3-timer.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-timer/ Version 1.0.7. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});\n})(undefined, function (exports) {\n  'use strict';\n\n  var frame = 0;\n  var timeout = 0;\n  var interval = 0;\n  var pokeDelay = 1000;\n  var taskHead;\n  var taskTail;\n  var clockLast = 0;\n  var clockNow = 0;\n  var clockSkew = 0;\n  var clock = (typeof performance === 'undefined' ? 'undefined' : _typeof(performance)) === \"object\" && performance.now ? performance : Date;\n  var setFrame = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {\n    setTimeout(f, 17);\n  };\n\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer() {\n    this._call = this._time = this._next = null;\n  }\n\n  Timer.prototype = timer.prototype = {\n    constructor: Timer,\n    restart: function restart(callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;else taskHead = this;\n        taskTail = this;\n      }\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function stop() {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n\n  function timer(callback, delay, time) {\n    var t = new Timer();\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = taskHead,\n        e;\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n    --frame;\n  }\n\n  function wake() {\n    clockNow = (clockLast = clock.now()) + clockSkew;\n    frame = timeout = 0;\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke() {\n    var now = clock.now(),\n        delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0,\n        t1 = taskHead,\n        t2,\n        time = Infinity;\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n      if (interval) interval = clearInterval(interval);\n    } else {\n      if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  var timeout$1 = function timeout$1(callback, delay, time) {\n    var t = new Timer();\n    delay = delay == null ? 0 : +delay;\n    t.restart(function (elapsed) {\n      t.stop();\n      callback(elapsed + delay);\n    }, delay, time);\n    return t;\n  };\n\n  var interval$1 = function interval$1(callback, delay, time) {\n    var t = new Timer(),\n        total = delay;\n    if (delay == null) return t.restart(callback, delay, time), t;\n    delay = +delay, time = time == null ? now() : +time;\n    t.restart(function tick(elapsed) {\n      elapsed += total;\n      t.restart(tick, total += delay, time);\n      callback(elapsed);\n    }, delay, time);\n    return t;\n  };\n\n  exports.now = now;\n  exports.timer = timer;\n  exports.timerFlush = timerFlush;\n  exports.timeout = timeout$1;\n  exports.interval = interval$1;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-drag/build/d3-drag.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-drag/build/d3-drag.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-drag/ Version 1.2.1. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-selection')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-selection'], factory) : factory(global.d3 = global.d3 || {}, global.d3, global.d3);\n})(undefined, function (exports, d3Dispatch, d3Selection) {\n  'use strict';\n\n  function nopropagation() {\n    d3Selection.event.stopImmediatePropagation();\n  }\n\n  var noevent = function noevent() {\n    d3Selection.event.preventDefault();\n    d3Selection.event.stopImmediatePropagation();\n  };\n\n  var nodrag = function nodrag(view) {\n    var root = view.document.documentElement,\n        selection = d3Selection.select(view).on(\"dragstart.drag\", noevent, true);\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", noevent, true);\n    } else {\n      root.__noselect = root.style.MozUserSelect;\n      root.style.MozUserSelect = \"none\";\n    }\n  };\n\n  function yesdrag(view, noclick) {\n    var root = view.document.documentElement,\n        selection = d3Selection.select(view).on(\"dragstart.drag\", null);\n    if (noclick) {\n      selection.on(\"click.drag\", noevent, true);\n      setTimeout(function () {\n        selection.on(\"click.drag\", null);\n      }, 0);\n    }\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", null);\n    } else {\n      root.style.MozUserSelect = root.__noselect;\n      delete root.__noselect;\n    }\n  }\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch$$1) {\n    this.target = target;\n    this.type = type;\n    this.subject = subject;\n    this.identifier = id;\n    this.active = active;\n    this.x = x;\n    this.y = y;\n    this.dx = dx;\n    this.dy = dy;\n    this._ = dispatch$$1;\n  }\n\n  DragEvent.prototype.on = function () {\n    var value = this._.on.apply(this._, arguments);\n    return value === this._ ? this : value;\n  };\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter() {\n    return !d3Selection.event.button;\n  }\n\n  function defaultContainer() {\n    return this.parentNode;\n  }\n\n  function defaultSubject(d) {\n    return d == null ? { x: d3Selection.event.x, y: d3Selection.event.y } : d;\n  }\n\n  function defaultTouchable() {\n    return \"ontouchstart\" in this;\n  }\n\n  var drag = function drag() {\n    var filter = defaultFilter,\n        container = defaultContainer,\n        subject = defaultSubject,\n        touchable = defaultTouchable,\n        gestures = {},\n        listeners = d3Dispatch.dispatch(\"start\", \"drag\", \"end\"),\n        active = 0,\n        mousedownx,\n        mousedowny,\n        mousemoving,\n        touchending,\n        clickDistance2 = 0;\n\n    function drag(selection) {\n      selection.on(\"mousedown.drag\", mousedowned).filter(touchable).on(\"touchstart.drag\", touchstarted).on(\"touchmove.drag\", touchmoved).on(\"touchend.drag touchcancel.drag\", touchended).style(\"touch-action\", \"none\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var gesture = beforestart(\"mouse\", container.apply(this, arguments), d3Selection.mouse, this, arguments);\n      if (!gesture) return;\n      d3Selection.select(d3Selection.event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n      nodrag(d3Selection.event.view);\n      nopropagation();\n      mousemoving = false;\n      mousedownx = d3Selection.event.clientX;\n      mousedowny = d3Selection.event.clientY;\n      gesture(\"start\");\n    }\n\n    function mousemoved() {\n      noevent();\n      if (!mousemoving) {\n        var dx = d3Selection.event.clientX - mousedownx,\n            dy = d3Selection.event.clientY - mousedowny;\n        mousemoving = dx * dx + dy * dy > clickDistance2;\n      }\n      gestures.mouse(\"drag\");\n    }\n\n    function mouseupped() {\n      d3Selection.select(d3Selection.event.view).on(\"mousemove.drag mouseup.drag\", null);\n      yesdrag(d3Selection.event.view, mousemoving);\n      noevent();\n      gestures.mouse(\"end\");\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var touches = d3Selection.event.changedTouches,\n          c = container.apply(this, arguments),\n          n = touches.length,\n          i,\n          gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = beforestart(touches[i].identifier, c, d3Selection.touch, this, arguments)) {\n          nopropagation();\n          gesture(\"start\");\n        }\n      }\n    }\n\n    function touchmoved() {\n      var touches = d3Selection.event.changedTouches,\n          n = touches.length,\n          i,\n          gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          noevent();\n          gesture(\"drag\");\n        }\n      }\n    }\n\n    function touchended() {\n      var touches = d3Selection.event.changedTouches,\n          n = touches.length,\n          i,\n          gesture;\n\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function () {\n        touchending = null;\n      }, 500); // Ghost clicks are delayed!\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          nopropagation();\n          gesture(\"end\");\n        }\n      }\n    }\n\n    function beforestart(id, container, point, that, args) {\n      var p = point(container, id),\n          s,\n          dx,\n          dy,\n          sublisteners = listeners.copy();\n\n      if (!d3Selection.customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function () {\n        if ((d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;\n        dx = s.x - p[0] || 0;\n        dy = s.y - p[1] || 0;\n        return true;\n      })) return;\n\n      return function gesture(type) {\n        var p0 = p,\n            n;\n        switch (type) {\n          case \"start\":\n            gestures[id] = gesture, n = active++;break;\n          case \"end\":\n            delete gestures[id], --active; // nobreak\n          case \"drag\":\n            p = point(container, id), n = active;break;\n        }\n        d3Selection.customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\n      };\n    }\n\n    drag.filter = function (_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), drag) : filter;\n    };\n\n    drag.container = function (_) {\n      return arguments.length ? (container = typeof _ === \"function\" ? _ : constant(_), drag) : container;\n    };\n\n    drag.subject = function (_) {\n      return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant(_), drag) : subject;\n    };\n\n    drag.touchable = function (_) {\n      return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), drag) : touchable;\n    };\n\n    drag.on = function () {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? drag : value;\n    };\n\n    drag.clickDistance = function (_) {\n      return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\n    };\n\n    return drag;\n  };\n\n  exports.drag = drag;\n  exports.dragDisable = nodrag;\n  exports.dragEnable = yesdrag;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-dispatch":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js","d3-selection":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-selection/build/d3-selection.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-brush/build/d3-brush.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-brush/build/d3-brush.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-brush/ Version 1.0.4. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-drag'), require('d3-interpolate'), require('d3-selection'), require('d3-transition')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) : factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3);\n})(undefined, function (exports, d3Dispatch, d3Drag, d3Interpolate, d3Selection, d3Transition) {\n  'use strict';\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  var BrushEvent = function BrushEvent(target, type, selection) {\n    this.target = target;\n    this.type = type;\n    this.selection = selection;\n  };\n\n  function nopropagation() {\n    d3Selection.event.stopImmediatePropagation();\n  }\n\n  var noevent = function noevent() {\n    d3Selection.event.preventDefault();\n    d3Selection.event.stopImmediatePropagation();\n  };\n\n  var MODE_DRAG = { name: \"drag\" };\n  var MODE_SPACE = { name: \"space\" };\n  var MODE_HANDLE = { name: \"handle\" };\n  var MODE_CENTER = { name: \"center\" };\n\n  var X = {\n    name: \"x\",\n    handles: [\"e\", \"w\"].map(type),\n    input: function input(x, e) {\n      return x && [[x[0], e[0][1]], [x[1], e[1][1]]];\n    },\n    output: function output(xy) {\n      return xy && [xy[0][0], xy[1][0]];\n    }\n  };\n\n  var Y = {\n    name: \"y\",\n    handles: [\"n\", \"s\"].map(type),\n    input: function input(y, e) {\n      return y && [[e[0][0], y[0]], [e[1][0], y[1]]];\n    },\n    output: function output(xy) {\n      return xy && [xy[0][1], xy[1][1]];\n    }\n  };\n\n  var XY = {\n    name: \"xy\",\n    handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(type),\n    input: function input(xy) {\n      return xy;\n    },\n    output: function output(xy) {\n      return xy;\n    }\n  };\n\n  var cursors = {\n    overlay: \"crosshair\",\n    selection: \"move\",\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n\n  var flipX = {\n    e: \"w\",\n    w: \"e\",\n    nw: \"ne\",\n    ne: \"nw\",\n    se: \"sw\",\n    sw: \"se\"\n  };\n\n  var flipY = {\n    n: \"s\",\n    s: \"n\",\n    nw: \"sw\",\n    ne: \"se\",\n    se: \"ne\",\n    sw: \"nw\"\n  };\n\n  var signsX = {\n    overlay: +1,\n    selection: +1,\n    n: null,\n    e: +1,\n    s: null,\n    w: -1,\n    nw: -1,\n    ne: +1,\n    se: +1,\n    sw: -1\n  };\n\n  var signsY = {\n    overlay: +1,\n    selection: +1,\n    n: -1,\n    e: null,\n    s: +1,\n    w: null,\n    nw: -1,\n    ne: -1,\n    se: +1,\n    sw: +1\n  };\n\n  function type(t) {\n    return { type: t };\n  }\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter() {\n    return !d3Selection.event.button;\n  }\n\n  function defaultExtent() {\n    var svg = this.ownerSVGElement || this;\n    return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n  }\n\n  // Like d3.local, but with the name “__brush” rather than auto-generated.\n  function local(node) {\n    while (!node.__brush) {\n      if (!(node = node.parentNode)) return;\n    }return node.__brush;\n  }\n\n  function empty(extent) {\n    return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];\n  }\n\n  function brushSelection(node) {\n    var state = node.__brush;\n    return state ? state.dim.output(state.selection) : null;\n  }\n\n  function brushX() {\n    return brush$1(X);\n  }\n\n  function brushY() {\n    return brush$1(Y);\n  }\n\n  var brush = function brush() {\n    return brush$1(XY);\n  };\n\n  function brush$1(dim) {\n    var extent = defaultExtent,\n        filter = defaultFilter,\n        listeners = d3Dispatch.dispatch(brush, \"start\", \"brush\", \"end\"),\n        handleSize = 6,\n        touchending;\n\n    function brush(group) {\n      var overlay = group.property(\"__brush\", initialize).selectAll(\".overlay\").data([type(\"overlay\")]);\n\n      overlay.enter().append(\"rect\").attr(\"class\", \"overlay\").attr(\"pointer-events\", \"all\").attr(\"cursor\", cursors.overlay).merge(overlay).each(function () {\n        var extent = local(this).extent;\n        d3Selection.select(this).attr(\"x\", extent[0][0]).attr(\"y\", extent[0][1]).attr(\"width\", extent[1][0] - extent[0][0]).attr(\"height\", extent[1][1] - extent[0][1]);\n      });\n\n      group.selectAll(\".selection\").data([type(\"selection\")]).enter().append(\"rect\").attr(\"class\", \"selection\").attr(\"cursor\", cursors.selection).attr(\"fill\", \"#777\").attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"#fff\").attr(\"shape-rendering\", \"crispEdges\");\n\n      var handle = group.selectAll(\".handle\").data(dim.handles, function (d) {\n        return d.type;\n      });\n\n      handle.exit().remove();\n\n      handle.enter().append(\"rect\").attr(\"class\", function (d) {\n        return \"handle handle--\" + d.type;\n      }).attr(\"cursor\", function (d) {\n        return cursors[d.type];\n      });\n\n      group.each(redraw).attr(\"fill\", \"none\").attr(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush touchstart.brush\", started);\n    }\n\n    brush.move = function (group, selection) {\n      if (group.selection) {\n        group.on(\"start.brush\", function () {\n          emitter(this, arguments).beforestart().start();\n        }).on(\"interrupt.brush end.brush\", function () {\n          emitter(this, arguments).end();\n        }).tween(\"brush\", function () {\n          var that = this,\n              state = that.__brush,\n              emit = emitter(that, arguments),\n              selection0 = state.selection,\n              selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n              i = d3Interpolate.interpolate(selection0, selection1);\n\n          function tween(t) {\n            state.selection = t === 1 && empty(selection1) ? null : i(t);\n            redraw.call(that);\n            emit.brush();\n          }\n\n          return selection0 && selection1 ? tween : tween(1);\n        });\n      } else {\n        group.each(function () {\n          var that = this,\n              args = arguments,\n              state = that.__brush,\n              selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n              emit = emitter(that, args).beforestart();\n\n          d3Transition.interrupt(that);\n          state.selection = selection1 == null || empty(selection1) ? null : selection1;\n          redraw.call(that);\n          emit.start().brush().end();\n        });\n      }\n    };\n\n    function redraw() {\n      var group = d3Selection.select(this),\n          selection = local(this).selection;\n\n      if (selection) {\n        group.selectAll(\".selection\").style(\"display\", null).attr(\"x\", selection[0][0]).attr(\"y\", selection[0][1]).attr(\"width\", selection[1][0] - selection[0][0]).attr(\"height\", selection[1][1] - selection[0][1]);\n\n        group.selectAll(\".handle\").style(\"display\", null).attr(\"x\", function (d) {\n          return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;\n        }).attr(\"y\", function (d) {\n          return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;\n        }).attr(\"width\", function (d) {\n          return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize;\n        }).attr(\"height\", function (d) {\n          return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize;\n        });\n      } else {\n        group.selectAll(\".selection,.handle\").style(\"display\", \"none\").attr(\"x\", null).attr(\"y\", null).attr(\"width\", null).attr(\"height\", null);\n      }\n    }\n\n    function emitter(that, args) {\n      return that.__brush.emitter || new Emitter(that, args);\n    }\n\n    function Emitter(that, args) {\n      this.that = that;\n      this.args = args;\n      this.state = that.__brush;\n      this.active = 0;\n    }\n\n    Emitter.prototype = {\n      beforestart: function beforestart() {\n        if (++this.active === 1) this.state.emitter = this, this.starting = true;\n        return this;\n      },\n      start: function start() {\n        if (this.starting) this.starting = false, this.emit(\"start\");\n        return this;\n      },\n      brush: function brush() {\n        this.emit(\"brush\");\n        return this;\n      },\n      end: function end() {\n        if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\n        return this;\n      },\n      emit: function emit(type) {\n        d3Selection.customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function started() {\n      if (d3Selection.event.touches) {\n        if (d3Selection.event.changedTouches.length < d3Selection.event.touches.length) return noevent();\n      } else if (touchending) return;\n      if (!filter.apply(this, arguments)) return;\n\n      var that = this,\n          type = d3Selection.event.target.__data__.type,\n          mode = (d3Selection.event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE,\n          signX = dim === Y ? null : signsX[type],\n          signY = dim === X ? null : signsY[type],\n          state = local(that),\n          extent = state.extent,\n          selection = state.selection,\n          W = extent[0][0],\n          w0,\n          w1,\n          N = extent[0][1],\n          n0,\n          n1,\n          E = extent[1][0],\n          e0,\n          e1,\n          S = extent[1][1],\n          s0,\n          s1,\n          dx,\n          dy,\n          moving,\n          shifting = signX && signY && d3Selection.event.shiftKey,\n          lockX,\n          lockY,\n          point0 = d3Selection.mouse(that),\n          point = point0,\n          emit = emitter(that, arguments).beforestart();\n\n      if (type === \"overlay\") {\n        state.selection = selection = [[w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]], [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]];\n      } else {\n        w0 = selection[0][0];\n        n0 = selection[0][1];\n        e0 = selection[1][0];\n        s0 = selection[1][1];\n      }\n\n      w1 = w0;\n      n1 = n0;\n      e1 = e0;\n      s1 = s0;\n\n      var group = d3Selection.select(that).attr(\"pointer-events\", \"none\");\n\n      var overlay = group.selectAll(\".overlay\").attr(\"cursor\", cursors[type]);\n\n      if (d3Selection.event.touches) {\n        group.on(\"touchmove.brush\", moved, true).on(\"touchend.brush touchcancel.brush\", ended, true);\n      } else {\n        var view = d3Selection.select(d3Selection.event.view).on(\"keydown.brush\", keydowned, true).on(\"keyup.brush\", keyupped, true).on(\"mousemove.brush\", moved, true).on(\"mouseup.brush\", ended, true);\n\n        d3Drag.dragDisable(d3Selection.event.view);\n      }\n\n      nopropagation();\n      d3Transition.interrupt(that);\n      redraw.call(that);\n      emit.start();\n\n      function moved() {\n        var point1 = d3Selection.mouse(that);\n        if (shifting && !lockX && !lockY) {\n          if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;else lockX = true;\n        }\n        point = point1;\n        moving = true;\n        noevent();\n        move();\n      }\n\n      function move() {\n        var t;\n\n        dx = point[0] - point0[0];\n        dy = point[1] - point0[1];\n\n        switch (mode) {\n          case MODE_SPACE:\n          case MODE_DRAG:\n            {\n              if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n              if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n              break;\n            }\n          case MODE_HANDLE:\n            {\n              if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n              if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n              break;\n            }\n          case MODE_CENTER:\n            {\n              if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\n              if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\n              break;\n            }\n        }\n\n        if (e1 < w1) {\n          signX *= -1;\n          t = w0, w0 = e0, e0 = t;\n          t = w1, w1 = e1, e1 = t;\n          if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n        }\n\n        if (s1 < n1) {\n          signY *= -1;\n          t = n0, n0 = s0, s0 = t;\n          t = n1, n1 = s1, s1 = t;\n          if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n        }\n\n        if (state.selection) selection = state.selection; // May be set by brush.move!\n        if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n        if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n        if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {\n          state.selection = [[w1, n1], [e1, s1]];\n          redraw.call(that);\n          emit.brush();\n        }\n      }\n\n      function ended() {\n        nopropagation();\n        if (d3Selection.event.touches) {\n          if (d3Selection.event.touches.length) return;\n          if (touchending) clearTimeout(touchending);\n          touchending = setTimeout(function () {\n            touchending = null;\n          }, 500); // Ghost clicks are delayed!\n          group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\n        } else {\n          d3Drag.dragEnable(d3Selection.event.view, moving);\n          view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n        }\n        group.attr(\"pointer-events\", \"all\");\n        overlay.attr(\"cursor\", cursors.overlay);\n        if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n        if (empty(selection)) state.selection = null, redraw.call(that);\n        emit.end();\n      }\n\n      function keydowned() {\n        switch (d3Selection.event.keyCode) {\n          case 16:\n            {\n              // SHIFT\n              shifting = signX && signY;\n              break;\n            }\n          case 18:\n            {\n              // ALT\n              if (mode === MODE_HANDLE) {\n                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n                mode = MODE_CENTER;\n                move();\n              }\n              break;\n            }\n          case 32:\n            {\n              // SPACE; takes priority over ALT\n              if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n                if (signX < 0) e0 = e1 - dx;else if (signX > 0) w0 = w1 - dx;\n                if (signY < 0) s0 = s1 - dy;else if (signY > 0) n0 = n1 - dy;\n                mode = MODE_SPACE;\n                overlay.attr(\"cursor\", cursors.selection);\n                move();\n              }\n              break;\n            }\n          default:\n            return;\n        }\n        noevent();\n      }\n\n      function keyupped() {\n        switch (d3Selection.event.keyCode) {\n          case 16:\n            {\n              // SHIFT\n              if (shifting) {\n                lockX = lockY = shifting = false;\n                move();\n              }\n              break;\n            }\n          case 18:\n            {\n              // ALT\n              if (mode === MODE_CENTER) {\n                if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;\n                if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;\n                mode = MODE_HANDLE;\n                move();\n              }\n              break;\n            }\n          case 32:\n            {\n              // SPACE\n              if (mode === MODE_SPACE) {\n                if (d3Selection.event.altKey) {\n                  if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n                  if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n                  mode = MODE_CENTER;\n                } else {\n                  if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;\n                  if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;\n                  mode = MODE_HANDLE;\n                }\n                overlay.attr(\"cursor\", cursors[type]);\n                move();\n              }\n              break;\n            }\n          default:\n            return;\n        }\n        noevent();\n      }\n    }\n\n    function initialize() {\n      var state = this.__brush || { selection: null };\n      state.extent = extent.apply(this, arguments);\n      state.dim = dim;\n      return state;\n    }\n\n    brush.extent = function (_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\n    };\n\n    brush.filter = function (_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\n    };\n\n    brush.handleSize = function (_) {\n      return arguments.length ? (handleSize = +_, brush) : handleSize;\n    };\n\n    brush.on = function () {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? brush : value;\n    };\n\n    return brush;\n  }\n\n  exports.brush = brush;\n  exports.brushX = brushX;\n  exports.brushY = brushY;\n  exports.brushSelection = brushSelection;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-transition":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-transition/build/d3-transition.js","d3-drag":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-drag/build/d3-drag.js","d3-interpolate":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-interpolate/build/d3-interpolate.js","d3-selection":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-selection/build/d3-selection.js","d3-dispatch":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-chord/build/d3-chord.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-chord/build/d3-chord.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-chord/ Version 1.0.4. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-path')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-path'], factory) : factory(global.d3 = global.d3 || {}, global.d3, global.d3);\n})(undefined, function (exports, d3Array, d3Path) {\n  'use strict';\n\n  var cos = Math.cos;\n  var sin = Math.sin;\n  var pi = Math.PI;\n  var halfPi = pi / 2;\n  var tau = pi * 2;\n  var max = Math.max;\n\n  function compareValue(compare) {\n    return function (a, b) {\n      return compare(a.source.value + a.target.value, b.source.value + b.target.value);\n    };\n  }\n\n  var chord = function chord() {\n    var padAngle = 0,\n        sortGroups = null,\n        sortSubgroups = null,\n        sortChords = null;\n\n    function chord(matrix) {\n      var n = matrix.length,\n          groupSums = [],\n          groupIndex = d3Array.range(n),\n          subgroupIndex = [],\n          chords = [],\n          groups = chords.groups = new Array(n),\n          subgroups = new Array(n * n),\n          k,\n          x,\n          x0,\n          dx,\n          i,\n          j;\n\n      // Compute the sum.\n      k = 0, i = -1;while (++i < n) {\n        x = 0, j = -1;while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3Array.range(n));\n        k += x;\n      }\n\n      // Sort groups…\n      if (sortGroups) groupIndex.sort(function (a, b) {\n        return sortGroups(groupSums[a], groupSums[b]);\n      });\n\n      // Sort subgroups…\n      if (sortSubgroups) subgroupIndex.forEach(function (d, i) {\n        d.sort(function (a, b) {\n          return sortSubgroups(matrix[i][a], matrix[i][b]);\n        });\n      });\n\n      // Convert the sum to scaling factor for [0, 2pi].\n      // TODO Allow start and end angle to be specified?\n      // TODO Allow padding to be specified as percentage?\n      k = max(0, tau - padAngle * n) / k;\n      dx = k ? padAngle : tau / n;\n\n      // Compute the start and end angle for each group and subgroup.\n      // Note: Opera has a bug reordering object literal properties!\n      x = 0, i = -1;while (++i < n) {\n        x0 = x, j = -1;while (++j < n) {\n          var di = groupIndex[i],\n              dj = subgroupIndex[di][j],\n              v = matrix[di][dj],\n              a0 = x,\n              a1 = x += v * k;\n          subgroups[dj * n + di] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += dx;\n      }\n\n      // Generate chords for each (non-empty) subgroup-subgroup link.\n      i = -1;while (++i < n) {\n        j = i - 1;while (++j < n) {\n          var source = subgroups[j * n + i],\n              target = subgroups[i * n + j];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? { source: target, target: source } : { source: source, target: target });\n          }\n        }\n      }\n\n      return sortChords ? chords.sort(sortChords) : chords;\n    }\n\n    chord.padAngle = function (_) {\n      return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n    };\n\n    chord.sortGroups = function (_) {\n      return arguments.length ? (sortGroups = _, chord) : sortGroups;\n    };\n\n    chord.sortSubgroups = function (_) {\n      return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n    };\n\n    chord.sortChords = function (_) {\n      return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n    };\n\n    return chord;\n  };\n\n  var slice = Array.prototype.slice;\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  function defaultSource(d) {\n    return d.source;\n  }\n\n  function defaultTarget(d) {\n    return d.target;\n  }\n\n  function defaultRadius(d) {\n    return d.radius;\n  }\n\n  function defaultStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function defaultEndAngle(d) {\n    return d.endAngle;\n  }\n\n  var ribbon = function ribbon() {\n    var source = defaultSource,\n        target = defaultTarget,\n        radius = defaultRadius,\n        startAngle = defaultStartAngle,\n        endAngle = defaultEndAngle,\n        context = null;\n\n    function ribbon() {\n      var buffer,\n          argv = slice.call(arguments),\n          s = source.apply(this, argv),\n          t = target.apply(this, argv),\n          sr = +radius.apply(this, (argv[0] = s, argv)),\n          sa0 = startAngle.apply(this, argv) - halfPi,\n          sa1 = endAngle.apply(this, argv) - halfPi,\n          sx0 = sr * cos(sa0),\n          sy0 = sr * sin(sa0),\n          tr = +radius.apply(this, (argv[0] = t, argv)),\n          ta0 = startAngle.apply(this, argv) - halfPi,\n          ta1 = endAngle.apply(this, argv) - halfPi;\n\n      if (!context) context = buffer = d3Path.path();\n\n      context.moveTo(sx0, sy0);\n      context.arc(0, 0, sr, sa0, sa1);\n      if (sa0 !== ta0 || sa1 !== ta1) {\n        // TODO sr !== tr?\n        context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n        context.arc(0, 0, tr, ta0, ta1);\n      }\n      context.quadraticCurveTo(0, 0, sx0, sy0);\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    ribbon.radius = function (_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : radius;\n    };\n\n    ribbon.startAngle = function (_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : startAngle;\n    };\n\n    ribbon.endAngle = function (_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : endAngle;\n    };\n\n    ribbon.source = function (_) {\n      return arguments.length ? (source = _, ribbon) : source;\n    };\n\n    ribbon.target = function (_) {\n      return arguments.length ? (target = _, ribbon) : target;\n    };\n\n    ribbon.context = function (_) {\n      return arguments.length ? (context = _ == null ? null : _, ribbon) : context;\n    };\n\n    return ribbon;\n  };\n\n  exports.chord = chord;\n  exports.ribbon = ribbon;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-array":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-array/build/d3-array.js","d3-path":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-path/build/d3-path.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-force/build/d3-force.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-force/build/d3-force.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-force/ Version 1.1.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-quadtree'), require('d3-collection'), require('d3-dispatch'), require('d3-timer')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) : factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3);\n})(undefined, function (exports, d3Quadtree, d3Collection, d3Dispatch, d3Timer) {\n  'use strict';\n\n  var center = function center(x, y) {\n    var nodes;\n\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force() {\n      var i,\n          n = nodes.length,\n          node,\n          sx = 0,\n          sy = 0;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], sx += node.x, sy += node.y;\n      }\n\n      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n        node = nodes[i], node.x -= sx, node.y -= sy;\n      }\n    }\n\n    force.initialize = function (_) {\n      nodes = _;\n    };\n\n    force.x = function (_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function (_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    return force;\n  };\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  var jiggle = function jiggle() {\n    return (Math.random() - 0.5) * 1e-6;\n  };\n\n  function x(d) {\n    return d.x + d.vx;\n  }\n\n  function y(d) {\n    return d.y + d.vy;\n  }\n\n  var collide = function collide(radius) {\n    var nodes,\n        radii,\n        strength = 1,\n        iterations = 1;\n\n    if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n    function force() {\n      var i,\n          n = nodes.length,\n          tree,\n          node,\n          xi,\n          yi,\n          ri,\n          ri2;\n\n      for (var k = 0; k < iterations; ++k) {\n        tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          ri = radii[node.index], ri2 = ri * ri;\n          xi = node.x + node.vx;\n          yi = node.y + node.vy;\n          tree.visit(apply);\n        }\n      }\n\n      function apply(quad, x0, y0, x1, y1) {\n        var data = quad.data,\n            rj = quad.r,\n            r = ri + rj;\n        if (data) {\n          if (data.index > node.index) {\n            var x = xi - data.x - data.vx,\n                y = yi - data.y - data.vy,\n                l = x * x + y * y;\n            if (l < r * r) {\n              if (x === 0) x = jiggle(), l += x * x;\n              if (y === 0) y = jiggle(), l += y * y;\n              l = (r - (l = Math.sqrt(l))) / l * strength;\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n              node.vy += (y *= l) * r;\n              data.vx -= x * (r = 1 - r);\n              data.vy -= y * r;\n            }\n          }\n          return;\n        }\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n      }\n    }\n\n    function prepare(quad) {\n      if (quad.data) return quad.r = radii[quad.data.index];\n      for (var i = quad.r = 0; i < 4; ++i) {\n        if (quad[i] && quad[i].r > quad.r) {\n          quad.r = quad[i].r;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length,\n          node;\n      radii = new Array(n);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n      }\n    }\n\n    force.initialize = function (_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.iterations = function (_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    force.radius = function (_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n    };\n\n    return force;\n  };\n\n  function index(d) {\n    return d.index;\n  }\n\n  function find(nodeById, nodeId) {\n    var node = nodeById.get(nodeId);\n    if (!node) throw new Error(\"missing: \" + nodeId);\n    return node;\n  }\n\n  var link = function link(links) {\n    var id = index,\n        strength = defaultStrength,\n        strengths,\n        distance = constant(30),\n        distances,\n        nodes,\n        count,\n        bias,\n        iterations = 1;\n\n    if (links == null) links = [];\n\n    function defaultStrength(link) {\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n\n    function force(alpha) {\n      for (var k = 0, n = links.length; k < iterations; ++k) {\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n          link = links[i], source = link.source, target = link.target;\n          x = target.x + target.vx - source.x - source.vx || jiggle();\n          y = target.y + target.vy - source.y - source.vy || jiggle();\n          l = Math.sqrt(x * x + y * y);\n          l = (l - distances[i]) / l * alpha * strengths[i];\n          x *= l, y *= l;\n          target.vx -= x * (b = bias[i]);\n          target.vy -= y * b;\n          source.vx += x * (b = 1 - b);\n          source.vy += y * b;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n\n      var i,\n          n = nodes.length,\n          m = links.length,\n          nodeById = d3Collection.map(nodes, id),\n          link;\n\n      for (i = 0, count = new Array(n); i < m; ++i) {\n        link = links[i], link.index = i;\n        if (_typeof(link.source) !== \"object\") link.source = find(nodeById, link.source);\n        if (_typeof(link.target) !== \"object\") link.target = find(nodeById, link.target);\n        count[link.source.index] = (count[link.source.index] || 0) + 1;\n        count[link.target.index] = (count[link.target.index] || 0) + 1;\n      }\n\n      for (i = 0, bias = new Array(m); i < m; ++i) {\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n      }\n\n      strengths = new Array(m), initializeStrength();\n      distances = new Array(m), initializeDistance();\n    }\n\n    function initializeStrength() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        strengths[i] = +strength(links[i], i, links);\n      }\n    }\n\n    function initializeDistance() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        distances[i] = +distance(links[i], i, links);\n      }\n    }\n\n    force.initialize = function (_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.links = function (_) {\n      return arguments.length ? (links = _, initialize(), force) : links;\n    };\n\n    force.id = function (_) {\n      return arguments.length ? (id = _, force) : id;\n    };\n\n    force.iterations = function (_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n    };\n\n    force.distance = function (_) {\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n    };\n\n    return force;\n  };\n\n  function x$1(d) {\n    return d.x;\n  }\n\n  function y$1(d) {\n    return d.y;\n  }\n\n  var initialRadius = 10;\n  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n\n  var simulation = function simulation(_nodes) {\n    var simulation,\n        _alpha = 1,\n        _alphaMin = 0.001,\n        _alphaDecay = 1 - Math.pow(_alphaMin, 1 / 300),\n        _alphaTarget = 0,\n        _velocityDecay = 0.6,\n        forces = d3Collection.map(),\n        stepper = d3Timer.timer(step),\n        event = d3Dispatch.dispatch(\"tick\", \"end\");\n\n    if (_nodes == null) _nodes = [];\n\n    function step() {\n      tick();\n      event.call(\"tick\", simulation);\n      if (_alpha < _alphaMin) {\n        stepper.stop();\n        event.call(\"end\", simulation);\n      }\n    }\n\n    function tick() {\n      var i,\n          n = _nodes.length,\n          node;\n\n      _alpha += (_alphaTarget - _alpha) * _alphaDecay;\n\n      forces.each(function (force) {\n        force(_alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = _nodes[i];\n        if (node.fx == null) node.x += node.vx *= _velocityDecay;else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= _velocityDecay;else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    function initializeNodes() {\n      for (var i = 0, n = _nodes.length, node; i < n; ++i) {\n        node = _nodes[i], node.index = i;\n        if (isNaN(node.x) || isNaN(node.y)) {\n          var radius = initialRadius * Math.sqrt(i),\n              angle = i * initialAngle;\n          node.x = radius * Math.cos(angle);\n          node.y = radius * Math.sin(angle);\n        }\n        if (isNaN(node.vx) || isNaN(node.vy)) {\n          node.vx = node.vy = 0;\n        }\n      }\n    }\n\n    function initializeForce(force) {\n      if (force.initialize) force.initialize(_nodes);\n      return force;\n    }\n\n    initializeNodes();\n\n    return simulation = {\n      tick: tick,\n\n      restart: function restart() {\n        return stepper.restart(step), simulation;\n      },\n\n      stop: function stop() {\n        return stepper.stop(), simulation;\n      },\n\n      nodes: function nodes(_) {\n        return arguments.length ? (_nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : _nodes;\n      },\n\n      alpha: function alpha(_) {\n        return arguments.length ? (_alpha = +_, simulation) : _alpha;\n      },\n\n      alphaMin: function alphaMin(_) {\n        return arguments.length ? (_alphaMin = +_, simulation) : _alphaMin;\n      },\n\n      alphaDecay: function alphaDecay(_) {\n        return arguments.length ? (_alphaDecay = +_, simulation) : +_alphaDecay;\n      },\n\n      alphaTarget: function alphaTarget(_) {\n        return arguments.length ? (_alphaTarget = +_, simulation) : _alphaTarget;\n      },\n\n      velocityDecay: function velocityDecay(_) {\n        return arguments.length ? (_velocityDecay = 1 - _, simulation) : 1 - _velocityDecay;\n      },\n\n      force: function force(name, _) {\n        return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);\n      },\n\n      find: function find(x, y, radius) {\n        var i = 0,\n            n = _nodes.length,\n            dx,\n            dy,\n            d2,\n            node,\n            closest;\n\n        if (radius == null) radius = Infinity;else radius *= radius;\n\n        for (i = 0; i < n; ++i) {\n          node = _nodes[i];\n          dx = x - node.x;\n          dy = y - node.y;\n          d2 = dx * dx + dy * dy;\n          if (d2 < radius) closest = node, radius = d2;\n        }\n\n        return closest;\n      },\n\n      on: function on(name, _) {\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n      }\n    };\n  };\n\n  var manyBody = function manyBody() {\n    var nodes,\n        node,\n        alpha,\n        strength = constant(-30),\n        strengths,\n        distanceMin2 = 1,\n        distanceMax2 = Infinity,\n        theta2 = 0.81;\n\n    function force(_) {\n      var i,\n          n = nodes.length,\n          tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);\n      for (alpha = _, i = 0; i < n; ++i) {\n        node = nodes[i], tree.visit(apply);\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length,\n          node;\n      strengths = new Array(n);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n      }\n    }\n\n    function accumulate(quad) {\n      var strength = 0,\n          q,\n          c,\n          weight = 0,\n          x,\n          y,\n          i;\n\n      // For internal nodes, accumulate forces from child quadrants.\n      if (quad.length) {\n        for (x = y = i = 0; i < 4; ++i) {\n          if ((q = quad[i]) && (c = Math.abs(q.value))) {\n            strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n          }\n        }\n        quad.x = x / weight;\n        quad.y = y / weight;\n      }\n\n      // For leaf nodes, accumulate forces from coincident quadrants.\n      else {\n          q = quad;\n          q.x = q.data.x;\n          q.y = q.data.y;\n          do {\n            strength += strengths[q.data.index];\n          } while (q = q.next);\n        }\n\n      quad.value = strength;\n    }\n\n    function apply(quad, x1, _, x2) {\n      if (!quad.value) return true;\n\n      var x = quad.x - node.x,\n          y = quad.y - node.y,\n          w = x2 - x1,\n          l = x * x + y * y;\n\n      // Apply the Barnes-Hut approximation if possible.\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (w * w / theta2 < l) {\n        if (l < distanceMax2) {\n          if (x === 0) x = jiggle(), l += x * x;\n          if (y === 0) y = jiggle(), l += y * y;\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n          node.vx += x * quad.value * alpha / l;\n          node.vy += y * quad.value * alpha / l;\n        }\n        return true;\n      }\n\n      // Otherwise, process points directly.\n      else if (quad.length || l >= distanceMax2) return;\n\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (quad.data !== node || quad.next) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n      }\n\n      do {\n        if (quad.data !== node) {\n          w = strengths[quad.data.index] * alpha / l;\n          node.vx += x * w;\n          node.vy += y * w;\n        }\n      } while (quad = quad.next);\n    }\n\n    force.initialize = function (_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.distanceMin = function (_) {\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n\n    force.distanceMax = function (_) {\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n\n    force.theta = function (_) {\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n\n    return force;\n  };\n\n  var radial = function radial(radius, x, y) {\n    var nodes,\n        strength = constant(0.1),\n        strengths,\n        radiuses;\n\n    if (typeof radius !== \"function\") radius = constant(+radius);\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length; i < n; ++i) {\n        var node = nodes[i],\n            dx = node.x - x || 1e-6,\n            dy = node.y - y || 1e-6,\n            r = Math.sqrt(dx * dx + dy * dy),\n            k = (radiuses[i] - r) * strengths[i] * alpha / r;\n        node.vx += dx * k;\n        node.vy += dy * k;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length;\n      strengths = new Array(n);\n      radiuses = new Array(n);\n      for (i = 0; i < n; ++i) {\n        radiuses[i] = +radius(nodes[i], i, nodes);\n        strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function (_) {\n      nodes = _, initialize();\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.radius = function (_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n    };\n\n    force.x = function (_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function (_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    return force;\n  };\n\n  var x$2 = function x$2(x) {\n    var strength = constant(0.1),\n        nodes,\n        strengths,\n        xz;\n\n    if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length;\n      strengths = new Array(n);\n      xz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function (_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.x = function (_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n    };\n\n    return force;\n  };\n\n  var y$2 = function y$2(y) {\n    var strength = constant(0.1),\n        nodes,\n        strengths,\n        yz;\n\n    if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i,\n          n = nodes.length;\n      strengths = new Array(n);\n      yz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function (_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function (_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n    };\n\n    force.y = function (_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n    };\n\n    return force;\n  };\n\n  exports.forceCenter = center;\n  exports.forceCollide = collide;\n  exports.forceLink = link;\n  exports.forceManyBody = manyBody;\n  exports.forceRadial = radial;\n  exports.forceSimulation = simulation;\n  exports.forceX = x$2;\n  exports.forceY = y$2;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQzLWZvcmNlLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsImQzIiwiZDNRdWFkdHJlZSIsImQzQ29sbGVjdGlvbiIsImQzRGlzcGF0Y2giLCJkM1RpbWVyIiwiY2VudGVyIiwieCIsInkiLCJub2RlcyIsImZvcmNlIiwiaSIsIm4iLCJsZW5ndGgiLCJub2RlIiwic3giLCJzeSIsImluaXRpYWxpemUiLCJfIiwiYXJndW1lbnRzIiwiY29uc3RhbnQiLCJqaWdnbGUiLCJNYXRoIiwicmFuZG9tIiwiZCIsInZ4IiwidnkiLCJjb2xsaWRlIiwicmFkaXVzIiwicmFkaWkiLCJzdHJlbmd0aCIsIml0ZXJhdGlvbnMiLCJ0cmVlIiwieGkiLCJ5aSIsInJpIiwicmkyIiwiayIsInF1YWR0cmVlIiwidmlzaXRBZnRlciIsInByZXBhcmUiLCJpbmRleCIsInZpc2l0IiwiYXBwbHkiLCJxdWFkIiwieDAiLCJ5MCIsIngxIiwieTEiLCJkYXRhIiwicmoiLCJyIiwibCIsInNxcnQiLCJBcnJheSIsImZpbmQiLCJub2RlQnlJZCIsIm5vZGVJZCIsImdldCIsIkVycm9yIiwibGluayIsImxpbmtzIiwiaWQiLCJkZWZhdWx0U3RyZW5ndGgiLCJzdHJlbmd0aHMiLCJkaXN0YW5jZSIsImRpc3RhbmNlcyIsImNvdW50IiwiYmlhcyIsIm1pbiIsInNvdXJjZSIsInRhcmdldCIsImFscGhhIiwiYiIsIm0iLCJtYXAiLCJpbml0aWFsaXplU3RyZW5ndGgiLCJpbml0aWFsaXplRGlzdGFuY2UiLCJ4JDEiLCJ5JDEiLCJpbml0aWFsUmFkaXVzIiwiaW5pdGlhbEFuZ2xlIiwiUEkiLCJzaW11bGF0aW9uIiwiYWxwaGFNaW4iLCJhbHBoYURlY2F5IiwicG93IiwiYWxwaGFUYXJnZXQiLCJ2ZWxvY2l0eURlY2F5IiwiZm9yY2VzIiwic3RlcHBlciIsInRpbWVyIiwic3RlcCIsImV2ZW50IiwiZGlzcGF0Y2giLCJ0aWNrIiwiY2FsbCIsInN0b3AiLCJlYWNoIiwiZngiLCJmeSIsImluaXRpYWxpemVOb2RlcyIsImlzTmFOIiwiYW5nbGUiLCJjb3MiLCJzaW4iLCJpbml0aWFsaXplRm9yY2UiLCJyZXN0YXJ0IiwibmFtZSIsInJlbW92ZSIsInNldCIsImR4IiwiZHkiLCJkMiIsImNsb3Nlc3QiLCJJbmZpbml0eSIsIm9uIiwibWFueUJvZHkiLCJkaXN0YW5jZU1pbjIiLCJkaXN0YW5jZU1heDIiLCJ0aGV0YTIiLCJhY2N1bXVsYXRlIiwicSIsImMiLCJ3ZWlnaHQiLCJhYnMiLCJ2YWx1ZSIsIm5leHQiLCJ4MiIsInciLCJkaXN0YW5jZU1pbiIsImRpc3RhbmNlTWF4IiwidGhldGEiLCJyYWRpYWwiLCJyYWRpdXNlcyIsIngkMiIsInh6IiwieSQyIiwieXoiLCJmb3JjZUNlbnRlciIsImZvcmNlQ29sbGlkZSIsImZvcmNlTGluayIsImZvcmNlTWFueUJvZHkiLCJmb3JjZVJhZGlhbCIsImZvcmNlU2ltdWxhdGlvbiIsImZvcmNlWCIsImZvcmNlWSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQyxXQUFVQSxNQUFWLEVBQWtCQyxPQUFsQixFQUEyQjtBQUMzQixVQUFPQyxPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQW5CLElBQStCLE9BQU9DLE1BQVAsS0FBa0IsV0FBakQsR0FBK0RGLFFBQVFDLE9BQVIsRUFBaUJFLFFBQVEsYUFBUixDQUFqQixFQUF5Q0EsUUFBUSxlQUFSLENBQXpDLEVBQW1FQSxRQUFRLGFBQVIsQ0FBbkUsRUFBMkZBLFFBQVEsVUFBUixDQUEzRixDQUEvRCxHQUNBLE9BQU9DLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0NBLE9BQU9DLEdBQXZDLEdBQTZDRCxPQUFPLENBQUMsU0FBRCxFQUFZLGFBQVosRUFBMkIsZUFBM0IsRUFBNEMsYUFBNUMsRUFBMkQsVUFBM0QsQ0FBUCxFQUErRUosT0FBL0UsQ0FBN0MsR0FDQ0EsUUFBU0QsT0FB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QSxDQUExQixHQUE4QkUsU0FBUyxDQUFDRixDQUFWLENBQWxDLEVBQWdERCxZQUFoRCxFQUE4RFAsS0FBbEYsSUFBMkZGLENBQWxHO0FBQ0QsS0FGRDs7QUFJQSxXQUFPRSxLQUFQO0FBQ0QsR0F0Q0Q7O0FBd0NBZCxVQUFRK0ksV0FBUixHQUFzQnJJLE1BQXRCO0FBQ0FWLFVBQVFnSixZQUFSLEdBQXVCakgsT0FBdkI7QUFDQS9CLFVBQVFpSixTQUFSLEdBQW9CakYsSUFBcEI7QUFDQWhFLFVBQVFrSixhQUFSLEdBQXdCekIsUUFBeEI7QUFDQXpILFVBQVFtSixXQUFSLEdBQXNCVixNQUF0QjtBQUNBekksVUFBUW9KLGVBQVIsR0FBMEI3RCxVQUExQjtBQUNBdkYsVUFBUXFKLE1BQVIsR0FBaUJWLEdBQWpCO0FBQ0EzSSxVQUFRc0osTUFBUixHQUFpQlQsR0FBakI7O0FBRUFVLFNBQU9DLGNBQVAsQ0FBc0J4SixPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFa0ksT0FBTyxJQUFULEVBQTdDO0FBRUMsQ0FscEJBLENBQUQiLCJmaWxlIjoiZDMtZm9yY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2QzanMub3JnL2QzLWZvcmNlLyBWZXJzaW9uIDEuMS4wLiBDb3B5cmlnaHQgMjAxNyBNaWtlIEJvc3RvY2suXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ2QzLXF1YWR0cmVlJyksIHJlcXVpcmUoJ2QzLWNvbGxlY3Rpb24nKSwgcmVxdWlyZSgnZDMtZGlzcGF0Y2gnKSwgcmVxdWlyZSgnZDMtdGltZXInKSkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ2QzLXF1YWR0cmVlJywgJ2QzLWNvbGxlY3Rpb24nLCAnZDMtZGlzcGF0Y2gnLCAnZDMtdGltZXInXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeSgoZ2xvYmFsLmQzID0gZ2xvYmFsLmQzIHx8IHt9KSxnbG9iYWwuZDMsZ2xvYmFsLmQzLGdsb2JhbC5kMyxnbG9iYWwuZDMpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzLGQzUXVhZHRyZWUsZDNDb2xsZWN0aW9uLGQzRGlzcGF0Y2gsZDNUaW1lcikgeyAndXNlIHN0cmljdCc7XG5cbnZhciBjZW50ZXIgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBub2RlcztcblxuICBpZiAoeCA9PSBudWxsKSB4ID0gMDtcbiAgaWYgKHkgPT0gbnVsbCkgeSA9IDA7XG5cbiAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHN4ID0gMCxcbiAgICAgICAgc3kgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBzeCArPSBub2RlLngsIHN5ICs9IG5vZGUueTtcbiAgICB9XG5cbiAgICBmb3IgKHN4ID0gc3ggLyBuIC0geCwgc3kgPSBzeSAvIG4gLSB5LCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnggLT0gc3gsIG5vZGUueSAtPSBzeTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgfTtcblxuICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSArXywgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59O1xuXG52YXIgY29uc3RhbnQgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG5cbnZhciBqaWdnbGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG59O1xuXG5mdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueCArIGQudng7XG59XG5cbmZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55ICsgZC52eTtcbn1cblxudmFyIGNvbGxpZGUgPSBmdW5jdGlvbihyYWRpdXMpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgcmFkaWksXG4gICAgICBzdHJlbmd0aCA9IDEsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudChyYWRpdXMgPT0gbnVsbCA/IDEgOiArcmFkaXVzKTtcblxuICBmdW5jdGlvbiBmb3JjZSgpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgdHJlZSxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgeGksXG4gICAgICAgIHlpLFxuICAgICAgICByaSxcbiAgICAgICAgcmkyO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIHRyZWUgPSBkM1F1YWR0cmVlLnF1YWR0cmVlKG5vZGVzLCB4LCB5KS52aXNpdEFmdGVyKHByZXBhcmUpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHJpID0gcmFkaWlbbm9kZS5pbmRleF0sIHJpMiA9IHJpICogcmk7XG4gICAgICAgIHhpID0gbm9kZS54ICsgbm9kZS52eDtcbiAgICAgICAgeWkgPSBub2RlLnkgKyBub2RlLnZ5O1xuICAgICAgICB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgICAgdmFyIGRhdGEgPSBxdWFkLmRhdGEsIHJqID0gcXVhZC5yLCByID0gcmkgKyByajtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLmluZGV4ID4gbm9kZS5pbmRleCkge1xuICAgICAgICAgIHZhciB4ID0geGkgLSBkYXRhLnggLSBkYXRhLnZ4LFxuICAgICAgICAgICAgICB5ID0geWkgLSBkYXRhLnkgLSBkYXRhLnZ5LFxuICAgICAgICAgICAgICBsID0geCAqIHggKyB5ICogeTtcbiAgICAgICAgICBpZiAobCA8IHIgKiByKSB7XG4gICAgICAgICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZSgpLCBsICs9IHggKiB4O1xuICAgICAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgICAgIGwgPSAociAtIChsID0gTWF0aC5zcXJ0KGwpKSkgLyBsICogc3RyZW5ndGg7XG4gICAgICAgICAgICBub2RlLnZ4ICs9ICh4ICo9IGwpICogKHIgPSAocmogKj0gcmopIC8gKHJpMiArIHJqKSk7XG4gICAgICAgICAgICBub2RlLnZ5ICs9ICh5ICo9IGwpICogcjtcbiAgICAgICAgICAgIGRhdGEudnggLT0geCAqIChyID0gMSAtIHIpO1xuICAgICAgICAgICAgZGF0YS52eSAtPSB5ICogcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHgwID4geGkgKyByIHx8IHgxIDwgeGkgLSByIHx8IHkwID4geWkgKyByIHx8IHkxIDwgeWkgLSByO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXBhcmUocXVhZCkge1xuICAgIGlmIChxdWFkLmRhdGEpIHJldHVybiBxdWFkLnIgPSByYWRpaVtxdWFkLmRhdGEuaW5kZXhdO1xuICAgIGZvciAodmFyIGkgPSBxdWFkLnIgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICBpZiAocXVhZFtpXSAmJiBxdWFkW2ldLnIgPiBxdWFkLnIpIHtcbiAgICAgICAgcXVhZC5yID0gcXVhZFtpXS5yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuICAgIHJhZGlpID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgcmFkaWlbbm9kZS5pbmRleF0gPSArcmFkaXVzKG5vZGUsIGksIG5vZGVzKTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9ICtfLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogcmFkaXVzO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn07XG5cbmZ1bmN0aW9uIGluZGV4KGQpIHtcbiAgcmV0dXJuIGQuaW5kZXg7XG59XG5cbmZ1bmN0aW9uIGZpbmQobm9kZUJ5SWQsIG5vZGVJZCkge1xuICB2YXIgbm9kZSA9IG5vZGVCeUlkLmdldChub2RlSWQpO1xuICBpZiAoIW5vZGUpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmc6IFwiICsgbm9kZUlkKTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbnZhciBsaW5rID0gZnVuY3Rpb24obGlua3MpIHtcbiAgdmFyIGlkID0gaW5kZXgsXG4gICAgICBzdHJlbmd0aCA9IGRlZmF1bHRTdHJlbmd0aCxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIGRpc3RhbmNlID0gY29uc3RhbnQoMzApLFxuICAgICAgZGlzdGFuY2VzLFxuICAgICAgbm9kZXMsXG4gICAgICBjb3VudCxcbiAgICAgIGJpYXMsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAobGlua3MgPT0gbnVsbCkgbGlua3MgPSBbXTtcblxuICBmdW5jdGlvbiBkZWZhdWx0U3RyZW5ndGgobGluaykge1xuICAgIHJldHVybiAxIC8gTWF0aC5taW4oY291bnRbbGluay5zb3VyY2UuaW5kZXhdLCBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBrID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxpbmssIHNvdXJjZSwgdGFyZ2V0LCB4LCB5LCBsLCBiOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgc291cmNlID0gbGluay5zb3VyY2UsIHRhcmdldCA9IGxpbmsudGFyZ2V0O1xuICAgICAgICB4ID0gdGFyZ2V0LnggKyB0YXJnZXQudnggLSBzb3VyY2UueCAtIHNvdXJjZS52eCB8fCBqaWdnbGUoKTtcbiAgICAgICAgeSA9IHRhcmdldC55ICsgdGFyZ2V0LnZ5IC0gc291cmNlLnkgLSBzb3VyY2UudnkgfHwgamlnZ2xlKCk7XG4gICAgICAgIGwgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgIGwgPSAobCAtIGRpc3RhbmNlc1tpXSkgLyBsICogYWxwaGEgKiBzdHJlbmd0aHNbaV07XG4gICAgICAgIHggKj0gbCwgeSAqPSBsO1xuICAgICAgICB0YXJnZXQudnggLT0geCAqIChiID0gYmlhc1tpXSk7XG4gICAgICAgIHRhcmdldC52eSAtPSB5ICogYjtcbiAgICAgICAgc291cmNlLnZ4ICs9IHggKiAoYiA9IDEgLSBiKTtcbiAgICAgICAgc291cmNlLnZ5ICs9IHkgKiBiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG0gPSBsaW5rcy5sZW5ndGgsXG4gICAgICAgIG5vZGVCeUlkID0gZDNDb2xsZWN0aW9uLm1hcChub2RlcywgaWQpLFxuICAgICAgICBsaW5rO1xuXG4gICAgZm9yIChpID0gMCwgY291bnQgPSBuZXcgQXJyYXkobik7IGkgPCBtOyArK2kpIHtcbiAgICAgIGxpbmsgPSBsaW5rc1tpXSwgbGluay5pbmRleCA9IGk7XG4gICAgICBpZiAodHlwZW9mIGxpbmsuc291cmNlICE9PSBcIm9iamVjdFwiKSBsaW5rLnNvdXJjZSA9IGZpbmQobm9kZUJ5SWQsIGxpbmsuc291cmNlKTtcbiAgICAgIGlmICh0eXBlb2YgbGluay50YXJnZXQgIT09IFwib2JqZWN0XCIpIGxpbmsudGFyZ2V0ID0gZmluZChub2RlQnlJZCwgbGluay50YXJnZXQpO1xuICAgICAgY291bnRbbGluay5zb3VyY2UuaW5kZXhdID0gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSB8fCAwKSArIDE7XG4gICAgICBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0gPSAoY291bnRbbGluay50YXJnZXQuaW5kZXhdIHx8IDApICsgMTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBiaWFzID0gbmV3IEFycmF5KG0pOyBpIDwgbTsgKytpKSB7XG4gICAgICBsaW5rID0gbGlua3NbaV0sIGJpYXNbaV0gPSBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gLyAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdICsgY291bnRbbGluay50YXJnZXQuaW5kZXhdKTtcbiAgICB9XG5cbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVTdHJlbmd0aCgpO1xuICAgIGRpc3RhbmNlcyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplU3RyZW5ndGgoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9ICtzdHJlbmd0aChsaW5rc1tpXSwgaSwgbGlua3MpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVEaXN0YW5jZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgZGlzdGFuY2VzW2ldID0gK2Rpc3RhbmNlKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLmxpbmtzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxpbmtzID0gXywgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBsaW5rcztcbiAgfTtcblxuICBmb3JjZS5pZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IF8sIGZvcmNlKSA6IGlkO1xuICB9O1xuXG4gIGZvcmNlLml0ZXJhdGlvbnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemVTdHJlbmd0aCgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplRGlzdGFuY2UoKSwgZm9yY2UpIDogZGlzdGFuY2U7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufTtcblxuZnVuY3Rpb24geCQxKGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZnVuY3Rpb24geSQxKGQpIHtcbiAgcmV0dXJuIGQueTtcbn1cblxudmFyIGluaXRpYWxSYWRpdXMgPSAxMDtcbnZhciBpbml0aWFsQW5nbGUgPSBNYXRoLlBJICogKDMgLSBNYXRoLnNxcnQoNSkpO1xuXG52YXIgc2ltdWxhdGlvbiA9IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IGQzQ29sbGVjdGlvbi5tYXAoKSxcbiAgICAgIHN0ZXBwZXIgPSBkM1RpbWVyLnRpbWVyKHN0ZXApLFxuICAgICAgZXZlbnQgPSBkM0Rpc3BhdGNoLmRpc3BhdGNoKFwidGlja1wiLCBcImVuZFwiKTtcblxuICBpZiAobm9kZXMgPT0gbnVsbCkgbm9kZXMgPSBbXTtcblxuICBmdW5jdGlvbiBzdGVwKCkge1xuICAgIHRpY2soKTtcbiAgICBldmVudC5jYWxsKFwidGlja1wiLCBzaW11bGF0aW9uKTtcbiAgICBpZiAoYWxwaGEgPCBhbHBoYU1pbikge1xuICAgICAgc3RlcHBlci5zdG9wKCk7XG4gICAgICBldmVudC5jYWxsKFwiZW5kXCIsIHNpbXVsYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7XG5cbiAgICBhbHBoYSArPSAoYWxwaGFUYXJnZXQgLSBhbHBoYSkgKiBhbHBoYURlY2F5O1xuXG4gICAgZm9yY2VzLmVhY2goZnVuY3Rpb24oZm9yY2UpIHtcbiAgICAgIGZvcmNlKGFscGhhKTtcbiAgICB9KTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGlmIChub2RlLmZ4ID09IG51bGwpIG5vZGUueCArPSBub2RlLnZ4ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICBlbHNlIG5vZGUueCA9IG5vZGUuZngsIG5vZGUudnggPSAwO1xuICAgICAgaWYgKG5vZGUuZnkgPT0gbnVsbCkgbm9kZS55ICs9IG5vZGUudnkgKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgIGVsc2Ugbm9kZS55ID0gbm9kZS5meSwgbm9kZS52eSA9IDA7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZU5vZGVzKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUuaW5kZXggPSBpO1xuICAgICAgaWYgKGlzTmFOKG5vZGUueCkgfHwgaXNOYU4obm9kZS55KSkge1xuICAgICAgICB2YXIgcmFkaXVzID0gaW5pdGlhbFJhZGl1cyAqIE1hdGguc3FydChpKSwgYW5nbGUgPSBpICogaW5pdGlhbEFuZ2xlO1xuICAgICAgICBub2RlLnggPSByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIG5vZGUueSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc05hTihub2RlLnZ4KSB8fCBpc05hTihub2RlLnZ5KSkge1xuICAgICAgICBub2RlLnZ4ID0gbm9kZS52eSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcmNlKGZvcmNlKSB7XG4gICAgaWYgKGZvcmNlLmluaXRpYWxpemUpIGZvcmNlLmluaXRpYWxpemUobm9kZXMpO1xuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGluaXRpYWxpemVOb2RlcygpO1xuXG4gIHJldHVybiBzaW11bGF0aW9uID0ge1xuICAgIHRpY2s6IHRpY2ssXG5cbiAgICByZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnJlc3RhcnQoc3RlcCksIHNpbXVsYXRpb247XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0ZXBwZXIuc3RvcCgpLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBub2RlczogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZXMgPSBfLCBpbml0aWFsaXplTm9kZXMoKSwgZm9yY2VzLmVhY2goaW5pdGlhbGl6ZUZvcmNlKSwgc2ltdWxhdGlvbikgOiBub2RlcztcbiAgICB9LFxuXG4gICAgYWxwaGE6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGE7XG4gICAgfSxcblxuICAgIGFscGhhTWluOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYU1pbiA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhTWluO1xuICAgIH0sXG5cbiAgICBhbHBoYURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYURlY2F5ID0gK18sIHNpbXVsYXRpb24pIDogK2FscGhhRGVjYXk7XG4gICAgfSxcblxuICAgIGFscGhhVGFyZ2V0OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYVRhcmdldCA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhVGFyZ2V0O1xuICAgIH0sXG5cbiAgICB2ZWxvY2l0eURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2ZWxvY2l0eURlY2F5ID0gMSAtIF8sIHNpbXVsYXRpb24pIDogMSAtIHZlbG9jaXR5RGVjYXk7XG4gICAgfSxcblxuICAgIGZvcmNlOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoKF8gPT0gbnVsbCA/IGZvcmNlcy5yZW1vdmUobmFtZSkgOiBmb3JjZXMuc2V0KG5hbWUsIGluaXRpYWxpemVGb3JjZShfKSkpLCBzaW11bGF0aW9uKSA6IGZvcmNlcy5nZXQobmFtZSk7XG4gICAgfSxcblxuICAgIGZpbmQ6IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgZHgsXG4gICAgICAgICAgZHksXG4gICAgICAgICAgZDIsXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBjbG9zZXN0O1xuXG4gICAgICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICAgICAgZWxzZSByYWRpdXMgKj0gcmFkaXVzO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgZHggPSB4IC0gbm9kZS54O1xuICAgICAgICBkeSA9IHkgLSBub2RlLnk7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IHJhZGl1cykgY2xvc2VzdCA9IG5vZGUsIHJhZGl1cyA9IGQyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xvc2VzdDtcbiAgICB9LFxuXG4gICAgb246IGZ1bmN0aW9uKG5hbWUsIF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IChldmVudC5vbihuYW1lLCBfKSwgc2ltdWxhdGlvbikgOiBldmVudC5vbihuYW1lKTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgbWFueUJvZHkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgbm9kZSxcbiAgICAgIGFscGhhLFxuICAgICAgc3RyZW5ndGggPSBjb25zdGFudCgtMzApLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgZGlzdGFuY2VNaW4yID0gMSxcbiAgICAgIGRpc3RhbmNlTWF4MiA9IEluZmluaXR5LFxuICAgICAgdGhldGEyID0gMC44MTtcblxuICBmdW5jdGlvbiBmb3JjZShfKSB7XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIHRyZWUgPSBkM1F1YWR0cmVlLnF1YWR0cmVlKG5vZGVzLCB4JDEsIHkkMSkudmlzaXRBZnRlcihhY2N1bXVsYXRlKTtcbiAgICBmb3IgKGFscGhhID0gXywgaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgdHJlZS52aXNpdChhcHBseSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCBzdHJlbmd0aHNbbm9kZS5pbmRleF0gPSArc3RyZW5ndGgobm9kZSwgaSwgbm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWNjdW11bGF0ZShxdWFkKSB7XG4gICAgdmFyIHN0cmVuZ3RoID0gMCwgcSwgYywgd2VpZ2h0ID0gMCwgeCwgeSwgaTtcblxuICAgIC8vIEZvciBpbnRlcm5hbCBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjaGlsZCBxdWFkcmFudHMuXG4gICAgaWYgKHF1YWQubGVuZ3RoKSB7XG4gICAgICBmb3IgKHggPSB5ID0gaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgaWYgKChxID0gcXVhZFtpXSkgJiYgKGMgPSBNYXRoLmFicyhxLnZhbHVlKSkpIHtcbiAgICAgICAgICBzdHJlbmd0aCArPSBxLnZhbHVlLCB3ZWlnaHQgKz0gYywgeCArPSBjICogcS54LCB5ICs9IGMgKiBxLnk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHF1YWQueCA9IHggLyB3ZWlnaHQ7XG4gICAgICBxdWFkLnkgPSB5IC8gd2VpZ2h0O1xuICAgIH1cblxuICAgIC8vIEZvciBsZWFmIG5vZGVzLCBhY2N1bXVsYXRlIGZvcmNlcyBmcm9tIGNvaW5jaWRlbnQgcXVhZHJhbnRzLlxuICAgIGVsc2Uge1xuICAgICAgcSA9IHF1YWQ7XG4gICAgICBxLnggPSBxLmRhdGEueDtcbiAgICAgIHEueSA9IHEuZGF0YS55O1xuICAgICAgZG8gc3RyZW5ndGggKz0gc3RyZW5ndGhzW3EuZGF0YS5pbmRleF07XG4gICAgICB3aGlsZSAocSA9IHEubmV4dCk7XG4gICAgfVxuXG4gICAgcXVhZC52YWx1ZSA9IHN0cmVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgaWYgKCFxdWFkLnZhbHVlKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZhciB4ID0gcXVhZC54IC0gbm9kZS54LFxuICAgICAgICB5ID0gcXVhZC55IC0gbm9kZS55LFxuICAgICAgICB3ID0geDIgLSB4MSxcbiAgICAgICAgbCA9IHggKiB4ICsgeSAqIHk7XG5cbiAgICAvLyBBcHBseSB0aGUgQmFybmVzLUh1dCBhcHByb3hpbWF0aW9uIGlmIHBvc3NpYmxlLlxuICAgIC8vIExpbWl0IGZvcmNlcyBmb3IgdmVyeSBjbG9zZSBub2RlczsgcmFuZG9taXplIGRpcmVjdGlvbiBpZiBjb2luY2lkZW50LlxuICAgIGlmICh3ICogdyAvIHRoZXRhMiA8IGwpIHtcbiAgICAgIGlmIChsIDwgZGlzdGFuY2VNYXgyKSB7XG4gICAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKCksIGwgKz0geCAqIHg7XG4gICAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xuICAgICAgICBub2RlLnZ4ICs9IHggKiBxdWFkLnZhbHVlICogYWxwaGEgLyBsO1xuICAgICAgICBub2RlLnZ5ICs9IHkgKiBxdWFkLnZhbHVlICogYWxwaGEgLyBsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIHBvaW50cyBkaXJlY3RseS5cbiAgICBlbHNlIGlmIChxdWFkLmxlbmd0aCB8fCBsID49IGRpc3RhbmNlTWF4MikgcmV0dXJuO1xuXG4gICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSB8fCBxdWFkLm5leHQpIHtcbiAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKCksIGwgKz0geCAqIHg7XG4gICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgfVxuXG4gICAgZG8gaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSkge1xuICAgICAgdyA9IHN0cmVuZ3Roc1txdWFkLmRhdGEuaW5kZXhdICogYWxwaGEgLyBsO1xuICAgICAgbm9kZS52eCArPSB4ICogdztcbiAgICAgIG5vZGUudnkgKz0geSAqIHc7XG4gICAgfSB3aGlsZSAocXVhZCA9IHF1YWQubmV4dCk7XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZU1pbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1pbjIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWluMik7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2VNYXggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNYXgyID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1heDIpO1xuICB9O1xuXG4gIGZvcmNlLnRoZXRhID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoZXRhMiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQodGhldGEyKTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59O1xuXG52YXIgcmFkaWFsID0gZnVuY3Rpb24ocmFkaXVzLCB4LCB5KSB7XG4gIHZhciBub2RlcyxcbiAgICAgIHN0cmVuZ3RoID0gY29uc3RhbnQoMC4xKSxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIHJhZGl1c2VzO1xuXG4gIGlmICh0eXBlb2YgcmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIHJhZGl1cyA9IGNvbnN0YW50KCtyYWRpdXMpO1xuICBpZiAoeCA9PSBudWxsKSB4ID0gMDtcbiAgaWYgKHkgPT0gbnVsbCkgeSA9IDA7XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXSxcbiAgICAgICAgICBkeCA9IG5vZGUueCAtIHggfHwgMWUtNixcbiAgICAgICAgICBkeSA9IG5vZGUueSAtIHkgfHwgMWUtNixcbiAgICAgICAgICByID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KSxcbiAgICAgICAgICBrID0gKHJhZGl1c2VzW2ldIC0gcikgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYSAvIHI7XG4gICAgICBub2RlLnZ4ICs9IGR4ICogaztcbiAgICAgIG5vZGUudnkgKz0gZHkgKiBrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICByYWRpdXNlcyA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICByYWRpdXNlc1tpXSA9ICtyYWRpdXMobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHJhZGl1c2VzW2ldKSA/IDAgOiArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXywgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHJhZGl1cztcbiAgfTtcblxuICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSArXywgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59O1xuXG52YXIgeCQyID0gZnVuY3Rpb24oeCkge1xuICB2YXIgc3RyZW5ndGggPSBjb25zdGFudCgwLjEpLFxuICAgICAgbm9kZXMsXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICB4ejtcblxuICBpZiAodHlwZW9mIHggIT09IFwiZnVuY3Rpb25cIikgeCA9IGNvbnN0YW50KHggPT0gbnVsbCA/IDAgOiAreCk7XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnZ4ICs9ICh4eltpXSAtIG5vZGUueCkgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgeHogPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gaXNOYU4oeHpbaV0gPSAreChub2Rlc1tpXSwgaSwgbm9kZXMpKSA/IDAgOiArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB4O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn07XG5cbnZhciB5JDIgPSBmdW5jdGlvbih5KSB7XG4gIHZhciBzdHJlbmd0aCA9IGNvbnN0YW50KDAuMSksXG4gICAgICBub2RlcyxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIHl6O1xuXG4gIGlmICh0eXBlb2YgeSAhPT0gXCJmdW5jdGlvblwiKSB5ID0gY29uc3RhbnQoeSA9PSBudWxsID8gMCA6ICt5KTtcblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnkgKz0gKHl6W2ldIC0gbm9kZS55KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICB5eiA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih5eltpXSA9ICt5KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHk7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufTtcblxuZXhwb3J0cy5mb3JjZUNlbnRlciA9IGNlbnRlcjtcbmV4cG9ydHMuZm9yY2VDb2xsaWRlID0gY29sbGlkZTtcbmV4cG9ydHMuZm9yY2VMaW5rID0gbGluaztcbmV4cG9ydHMuZm9yY2VNYW55Qm9keSA9IG1hbnlCb2R5O1xuZXhwb3J0cy5mb3JjZVJhZGlhbCA9IHJhZGlhbDtcbmV4cG9ydHMuZm9yY2VTaW11bGF0aW9uID0gc2ltdWxhdGlvbjtcbmV4cG9ydHMuZm9yY2VYID0geCQyO1xuZXhwb3J0cy5mb3JjZVkgPSB5JDI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iXX0=","deps":{"d3-dispatch":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js","d3-timer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-timer/build/d3-timer.js","d3-quadtree":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-quadtree/build/d3-quadtree.js","d3-collection":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-collection/build/d3-collection.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-interpolate/build/d3-interpolate.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-interpolate/build/d3-interpolate.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-interpolate/ Version 1.1.5. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-color')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-color'], factory) : factory(global.d3 = global.d3 || {}, global.d3);\n})(undefined, function (exports, d3Color) {\n  'use strict';\n\n  function basis(t1, v0, v1, v2, v3) {\n    var t2 = t1 * t1,\n        t3 = t2 * t1;\n    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;\n  }\n\n  var basis$1 = function basis$1(values) {\n    var n = values.length - 1;\n    return function (t) {\n      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n          v1 = values[i],\n          v2 = values[i + 1],\n          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n      return basis((t - i / n) * n, v0, v1, v2, v3);\n    };\n  };\n\n  var basisClosed = function basisClosed(values) {\n    var n = values.length;\n    return function (t) {\n      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n          v0 = values[(i + n - 1) % n],\n          v1 = values[i % n],\n          v2 = values[(i + 1) % n],\n          v3 = values[(i + 2) % n];\n      return basis((t - i / n) * n, v0, v1, v2, v3);\n    };\n  };\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  function linear(a, d) {\n    return function (t) {\n      return a + t * d;\n    };\n  }\n\n  function exponential(a, b, y) {\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {\n      return Math.pow(a + t * b, y);\n    };\n  }\n\n  function hue(a, b) {\n    var d = b - a;\n    return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n  }\n\n  function gamma(y) {\n    return (y = +y) === 1 ? nogamma : function (a, b) {\n      return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n    };\n  }\n\n  function nogamma(a, b) {\n    var d = b - a;\n    return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n  }\n\n  var rgb$1 = function rgbGamma(y) {\n    var color$$1 = gamma(y);\n\n    function rgb$$1(start, end) {\n      var r = color$$1((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r),\n          g = color$$1(start.g, end.g),\n          b = color$$1(start.b, end.b),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function (t) {\n        start.r = r(t);\n        start.g = g(t);\n        start.b = b(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    rgb$$1.gamma = rgbGamma;\n\n    return rgb$$1;\n  }(1);\n\n  function rgbSpline(spline) {\n    return function (colors) {\n      var n = colors.length,\n          r = new Array(n),\n          g = new Array(n),\n          b = new Array(n),\n          i,\n          color$$1;\n      for (i = 0; i < n; ++i) {\n        color$$1 = d3Color.rgb(colors[i]);\n        r[i] = color$$1.r || 0;\n        g[i] = color$$1.g || 0;\n        b[i] = color$$1.b || 0;\n      }\n      r = spline(r);\n      g = spline(g);\n      b = spline(b);\n      color$$1.opacity = 1;\n      return function (t) {\n        color$$1.r = r(t);\n        color$$1.g = g(t);\n        color$$1.b = b(t);\n        return color$$1 + \"\";\n      };\n    };\n  }\n\n  var rgbBasis = rgbSpline(basis$1);\n  var rgbBasisClosed = rgbSpline(basisClosed);\n\n  var array = function array(a, b) {\n    var nb = b ? b.length : 0,\n        na = a ? Math.min(nb, a.length) : 0,\n        x = new Array(nb),\n        c = new Array(nb),\n        i;\n\n    for (i = 0; i < na; ++i) {\n      x[i] = value(a[i], b[i]);\n    }for (; i < nb; ++i) {\n      c[i] = b[i];\n    }return function (t) {\n      for (i = 0; i < na; ++i) {\n        c[i] = x[i](t);\n      }return c;\n    };\n  };\n\n  var date = function date(a, b) {\n    var d = new Date();\n    return a = +a, b -= a, function (t) {\n      return d.setTime(a + b * t), d;\n    };\n  };\n\n  var number = function number(a, b) {\n    return a = +a, b -= a, function (t) {\n      return a + b * t;\n    };\n  };\n\n  var object = function object(a, b) {\n    var i = {},\n        c = {},\n        k;\n\n    if (a === null || (typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== \"object\") a = {};\n    if (b === null || (typeof b === 'undefined' ? 'undefined' : _typeof(b)) !== \"object\") b = {};\n\n    for (k in b) {\n      if (k in a) {\n        i[k] = value(a[k], b[k]);\n      } else {\n        c[k] = b[k];\n      }\n    }\n\n    return function (t) {\n      for (k in i) {\n        c[k] = i[k](t);\n      }return c;\n    };\n  };\n\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g;\n  var reB = new RegExp(reA.source, \"g\");\n\n  function zero(b) {\n    return function () {\n      return b;\n    };\n  }\n\n  function one(b) {\n    return function (t) {\n      return b(t) + \"\";\n    };\n  }\n\n  var string = function string(a, b) {\n    var bi = reA.lastIndex = reB.lastIndex = 0,\n        // scan index for next number in b\n    am,\n        // current match in a\n    bm,\n        // current match in b\n    bs,\n        // string preceding current number in b, if any\n    i = -1,\n        // index in s\n    s = [],\n        // string constants and placeholders\n    q = []; // number interpolators\n\n    // Coerce inputs to strings.\n    a = a + \"\", b = b + \"\";\n\n    // Interpolate pairs of numbers in a & b.\n    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        // a string precedes the next number in b\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; // coalesce with previous string\n        else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        // numbers in a & b match\n        if (s[i]) s[i] += bm; // coalesce with previous string\n        else s[++i] = bm;\n      } else {\n        // interpolate non-matching numbers\n        s[++i] = null;\n        q.push({ i: i, x: number(am, bm) });\n      }\n      bi = reB.lastIndex;\n    }\n\n    // Add remains of b.\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    // Special optimization for only a single match.\n    // Otherwise, interpolate each of the numbers and rejoin the string.\n    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {\n      for (var i = 0, o; i < b; ++i) {\n        s[(o = q[i]).i] = o.x(t);\n      }return s.join(\"\");\n    });\n  };\n\n  var value = function value(a, b) {\n    var t = typeof b === 'undefined' ? 'undefined' : _typeof(b),\n        c;\n    return b == null || t === \"boolean\" ? constant(b) : (t === \"number\" ? number : t === \"string\" ? (c = d3Color.color(b)) ? (b = c, rgb$1) : string : b instanceof d3Color.color ? rgb$1 : b instanceof Date ? date : Array.isArray(b) ? array : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object : number)(a, b);\n  };\n\n  var round = function round(a, b) {\n    return a = +a, b -= a, function (t) {\n      return Math.round(a + b * t);\n    };\n  };\n\n  var degrees = 180 / Math.PI;\n\n  var identity = {\n    translateX: 0,\n    translateY: 0,\n    rotate: 0,\n    skewX: 0,\n    scaleX: 1,\n    scaleY: 1\n  };\n\n  var decompose = function decompose(a, b, c, d, e, f) {\n    var scaleX, scaleY, skewX;\n    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n    return {\n      translateX: e,\n      translateY: f,\n      rotate: Math.atan2(b, a) * degrees,\n      skewX: Math.atan(skewX) * degrees,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  };\n\n  var cssNode;\n  var cssRoot;\n  var cssView;\n  var svgNode;\n\n  function parseCss(value) {\n    if (value === \"none\") return identity;\n    if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n    cssNode.style.transform = value;\n    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n    cssRoot.removeChild(cssNode);\n    value = value.slice(7, -1).split(\",\");\n    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\n  }\n\n  function parseSvg(value) {\n    if (value == null) return identity;\n    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    svgNode.setAttribute(\"transform\", value);\n    if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n    value = value.matrix;\n    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n  }\n\n  function interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n    function pop(s) {\n      return s.length ? s.pop() + \" \" : \"\";\n    }\n\n    function translate(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n        q.push({ i: i - 4, x: number(xa, xb) }, { i: i - 2, x: number(ya, yb) });\n      } else if (xb || yb) {\n        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n      }\n    }\n\n    function rotate(a, b, s, q) {\n      if (a !== b) {\n        if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path\n        q.push({ i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b) });\n      } else if (b) {\n        s.push(pop(s) + \"rotate(\" + b + degParen);\n      }\n    }\n\n    function skewX(a, b, s, q) {\n      if (a !== b) {\n        q.push({ i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b) });\n      } else if (b) {\n        s.push(pop(s) + \"skewX(\" + b + degParen);\n      }\n    }\n\n    function scale(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n        q.push({ i: i - 4, x: number(xa, xb) }, { i: i - 2, x: number(ya, yb) });\n      } else if (xb !== 1 || yb !== 1) {\n        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n      }\n    }\n\n    return function (a, b) {\n      var s = [],\n          // string constants and placeholders\n      q = []; // number interpolators\n      a = parse(a), b = parse(b);\n      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n      rotate(a.rotate, b.rotate, s, q);\n      skewX(a.skewX, b.skewX, s, q);\n      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n      a = b = null; // gc\n      return function (t) {\n        var i = -1,\n            n = q.length,\n            o;\n        while (++i < n) {\n          s[(o = q[i]).i] = o.x(t);\n        }return s.join(\"\");\n      };\n    };\n  }\n\n  var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\n  var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n\n  var rho = Math.SQRT2;\n  var rho2 = 2;\n  var rho4 = 4;\n  var epsilon2 = 1e-12;\n\n  function cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n\n  function sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n\n  function tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n\n  // p0 = [ux0, uy0, w0]\n  // p1 = [ux1, uy1, w1]\n  var zoom = function zoom(p0, p1) {\n    var ux0 = p0[0],\n        uy0 = p0[1],\n        w0 = p0[2],\n        ux1 = p1[0],\n        uy1 = p1[1],\n        w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n\n    // Special case for u0 ≅ u1.\n    if (d2 < epsilon2) {\n      S = Math.log(w1 / w0) / rho;\n      i = function i(t) {\n        return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];\n      };\n    }\n\n    // General case.\n    else {\n        var d1 = Math.sqrt(d2),\n            b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n            b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n            r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n            r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n        S = (r1 - r0) / rho;\n        i = function i(t) {\n          var s = t * S,\n              coshr0 = cosh(r0),\n              u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n          return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];\n        };\n      }\n\n    i.duration = S * 1000;\n\n    return i;\n  };\n\n  function hsl$1(hue$$1) {\n    return function (start, end) {\n      var h = hue$$1((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h),\n          s = nogamma(start.s, end.s),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function (t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    };\n  }\n\n  var hsl$2 = hsl$1(hue);\n  var hslLong = hsl$1(nogamma);\n\n  function lab$1(start, end) {\n    var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l),\n        a = nogamma(start.a, end.a),\n        b = nogamma(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function (t) {\n      start.l = l(t);\n      start.a = a(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  function hcl$1(hue$$1) {\n    return function (start, end) {\n      var h = hue$$1((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h),\n          c = nogamma(start.c, end.c),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function (t) {\n        start.h = h(t);\n        start.c = c(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    };\n  }\n\n  var hcl$2 = hcl$1(hue);\n  var hclLong = hcl$1(nogamma);\n\n  function cubehelix$1(hue$$1) {\n    return function cubehelixGamma(y) {\n      y = +y;\n\n      function cubehelix$$1(start, end) {\n        var h = hue$$1((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h),\n            s = nogamma(start.s, end.s),\n            l = nogamma(start.l, end.l),\n            opacity = nogamma(start.opacity, end.opacity);\n        return function (t) {\n          start.h = h(t);\n          start.s = s(t);\n          start.l = l(Math.pow(t, y));\n          start.opacity = opacity(t);\n          return start + \"\";\n        };\n      }\n\n      cubehelix$$1.gamma = cubehelixGamma;\n\n      return cubehelix$$1;\n    }(1);\n  }\n\n  var cubehelix$2 = cubehelix$1(hue);\n  var cubehelixLong = cubehelix$1(nogamma);\n\n  var quantize = function quantize(interpolator, n) {\n    var samples = new Array(n);\n    for (var i = 0; i < n; ++i) {\n      samples[i] = interpolator(i / (n - 1));\n    }return samples;\n  };\n\n  exports.interpolate = value;\n  exports.interpolateArray = array;\n  exports.interpolateBasis = basis$1;\n  exports.interpolateBasisClosed = basisClosed;\n  exports.interpolateDate = date;\n  exports.interpolateNumber = number;\n  exports.interpolateObject = object;\n  exports.interpolateRound = round;\n  exports.interpolateString = string;\n  exports.interpolateTransformCss = interpolateTransformCss;\n  exports.interpolateTransformSvg = interpolateTransformSvg;\n  exports.interpolateZoom = zoom;\n  exports.interpolateRgb = rgb$1;\n  exports.interpolateRgbBasis = rgbBasis;\n  exports.interpolateRgbBasisClosed = rgbBasisClosed;\n  exports.interpolateHsl = hsl$2;\n  exports.interpolateHslLong = hslLong;\n  exports.interpolateLab = lab$1;\n  exports.interpolateHcl = hcl$2;\n  exports.interpolateHclLong = hclLong;\n  exports.interpolateCubehelix = cubehelix$2;\n  exports.interpolateCubehelixLong = cubehelixLong;\n  exports.quantize = quantize;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-color":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-color/build/d3-color.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-scale/build/d3-scale.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-scale/build/d3-scale.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-scale/ Version 1.0.6. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-collection'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format'), require('d3-color')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-collection', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format', 'd3-color'], factory) : factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3);\n})(undefined, function (exports, d3Array, d3Collection, d3Interpolate, d3Format, d3Time, d3TimeFormat, d3Color) {\n  'use strict';\n\n  var array = Array.prototype;\n\n  var map$1 = array.map;\n  var slice = array.slice;\n\n  var implicit = { name: \"implicit\" };\n\n  function ordinal(range$$1) {\n    var index = d3Collection.map(),\n        domain = [],\n        unknown = implicit;\n\n    range$$1 = range$$1 == null ? [] : slice.call(range$$1);\n\n    function scale(d) {\n      var key = d + \"\",\n          i = index.get(key);\n      if (!i) {\n        if (unknown !== implicit) return unknown;\n        index.set(key, i = domain.push(d));\n      }\n      return range$$1[(i - 1) % range$$1.length];\n    }\n\n    scale.domain = function (_) {\n      if (!arguments.length) return domain.slice();\n      domain = [], index = d3Collection.map();\n      var i = -1,\n          n = _.length,\n          d,\n          key;\n      while (++i < n) {\n        if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n      }return scale;\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (range$$1 = slice.call(_), scale) : range$$1.slice();\n    };\n\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function () {\n      return ordinal().domain(domain).range(range$$1).unknown(unknown);\n    };\n\n    return scale;\n  }\n\n  function band() {\n    var scale = ordinal().unknown(undefined),\n        domain = scale.domain,\n        ordinalRange = scale.range,\n        range$$1 = [0, 1],\n        step,\n        bandwidth,\n        round = false,\n        paddingInner = 0,\n        paddingOuter = 0,\n        align = 0.5;\n\n    delete scale.unknown;\n\n    function rescale() {\n      var n = domain().length,\n          reverse = range$$1[1] < range$$1[0],\n          start = range$$1[reverse - 0],\n          stop = range$$1[1 - reverse];\n      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n      if (round) step = Math.floor(step);\n      start += (stop - start - step * (n - paddingInner)) * align;\n      bandwidth = step * (1 - paddingInner);\n      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n      var values = d3Array.range(n).map(function (i) {\n        return start + step * i;\n      });\n      return ordinalRange(reverse ? values.reverse() : values);\n    }\n\n    scale.domain = function (_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();\n    };\n\n    scale.rangeRound = function (_) {\n      return range$$1 = [+_[0], +_[1]], round = true, rescale();\n    };\n\n    scale.bandwidth = function () {\n      return bandwidth;\n    };\n\n    scale.step = function () {\n      return step;\n    };\n\n    scale.round = function (_) {\n      return arguments.length ? (round = !!_, rescale()) : round;\n    };\n\n    scale.padding = function (_) {\n      return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingInner = function (_) {\n      return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingOuter = function (_) {\n      return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n    };\n\n    scale.align = function (_) {\n      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n    };\n\n    scale.copy = function () {\n      return band().domain(domain()).range(range$$1).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);\n    };\n\n    return rescale();\n  }\n\n  function pointish(scale) {\n    var copy = scale.copy;\n\n    scale.padding = scale.paddingOuter;\n    delete scale.paddingInner;\n    delete scale.paddingOuter;\n\n    scale.copy = function () {\n      return pointish(copy());\n    };\n\n    return scale;\n  }\n\n  function point() {\n    return pointish(band().paddingInner(1));\n  }\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  var number = function number(x) {\n    return +x;\n  };\n\n  var unit = [0, 1];\n\n  function deinterpolateLinear(a, b) {\n    return (b -= a = +a) ? function (x) {\n      return (x - a) / b;\n    } : constant(b);\n  }\n\n  function deinterpolateClamp(deinterpolate) {\n    return function (a, b) {\n      var d = deinterpolate(a = +a, b = +b);\n      return function (x) {\n        return x <= a ? 0 : x >= b ? 1 : d(x);\n      };\n    };\n  }\n\n  function reinterpolateClamp(reinterpolate) {\n    return function (a, b) {\n      var r = reinterpolate(a = +a, b = +b);\n      return function (t) {\n        return t <= 0 ? a : t >= 1 ? b : r(t);\n      };\n    };\n  }\n\n  function bimap(domain, range$$1, deinterpolate, reinterpolate) {\n    var d0 = domain[0],\n        d1 = domain[1],\n        r0 = range$$1[0],\n        r1 = range$$1[1];\n    if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n    return function (x) {\n      return r0(d0(x));\n    };\n  }\n\n  function polymap(domain, range$$1, deinterpolate, reinterpolate) {\n    var j = Math.min(domain.length, range$$1.length) - 1,\n        d = new Array(j),\n        r = new Array(j),\n        i = -1;\n\n    // Reverse descending domains.\n    if (domain[j] < domain[0]) {\n      domain = domain.slice().reverse();\n      range$$1 = range$$1.slice().reverse();\n    }\n\n    while (++i < j) {\n      d[i] = deinterpolate(domain[i], domain[i + 1]);\n      r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);\n    }\n\n    return function (x) {\n      var i = d3Array.bisect(domain, x, 1, j) - 1;\n      return r[i](d[i](x));\n    };\n  }\n\n  function copy(source, target) {\n    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());\n  }\n\n  // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n  // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\n  function continuous(deinterpolate, reinterpolate) {\n    var domain = unit,\n        range$$1 = unit,\n        interpolate$$1 = d3Interpolate.interpolate,\n        clamp = false,\n        piecewise,\n        output,\n        input;\n\n    function rescale() {\n      piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;\n      output = input = null;\n      return scale;\n    }\n\n    function scale(x) {\n      return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);\n    }\n\n    scale.invert = function (y) {\n      return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n    };\n\n    scale.domain = function (_) {\n      return arguments.length ? (domain = map$1.call(_, number), rescale()) : domain.slice();\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (range$$1 = slice.call(_), rescale()) : range$$1.slice();\n    };\n\n    scale.rangeRound = function (_) {\n      return range$$1 = slice.call(_), interpolate$$1 = d3Interpolate.interpolateRound, rescale();\n    };\n\n    scale.clamp = function (_) {\n      return arguments.length ? (clamp = !!_, rescale()) : clamp;\n    };\n\n    scale.interpolate = function (_) {\n      return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;\n    };\n\n    return rescale();\n  }\n\n  var tickFormat = function tickFormat(domain, count, specifier) {\n    var start = domain[0],\n        stop = domain[domain.length - 1],\n        step = d3Array.tickStep(start, stop, count == null ? 10 : count),\n        precision;\n    specifier = d3Format.formatSpecifier(specifier == null ? \",f\" : specifier);\n    switch (specifier.type) {\n      case \"s\":\n        {\n          var value = Math.max(Math.abs(start), Math.abs(stop));\n          if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;\n          return d3Format.formatPrefix(specifier, value);\n        }\n      case \"\":\n      case \"e\":\n      case \"g\":\n      case \"p\":\n      case \"r\":\n        {\n          if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n          break;\n        }\n      case \"f\":\n      case \"%\":\n        {\n          if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n          break;\n        }\n    }\n    return d3Format.format(specifier);\n  };\n\n  function linearish(scale) {\n    var domain = scale.domain;\n\n    scale.ticks = function (count) {\n      var d = domain();\n      return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n    };\n\n    scale.tickFormat = function (count, specifier) {\n      return tickFormat(domain(), count, specifier);\n    };\n\n    scale.nice = function (count) {\n      if (count == null) count = 10;\n\n      var d = domain(),\n          i0 = 0,\n          i1 = d.length - 1,\n          start = d[i0],\n          stop = d[i1],\n          step;\n\n      if (stop < start) {\n        step = start, start = stop, stop = step;\n        step = i0, i0 = i1, i1 = step;\n      }\n\n      step = d3Array.tickIncrement(start, stop, count);\n\n      if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n        step = d3Array.tickIncrement(start, stop, count);\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n        step = d3Array.tickIncrement(start, stop, count);\n      }\n\n      if (step > 0) {\n        d[i0] = Math.floor(start / step) * step;\n        d[i1] = Math.ceil(stop / step) * step;\n        domain(d);\n      } else if (step < 0) {\n        d[i0] = Math.ceil(start * step) / step;\n        d[i1] = Math.floor(stop * step) / step;\n        domain(d);\n      }\n\n      return scale;\n    };\n\n    return scale;\n  }\n\n  function linear() {\n    var scale = continuous(deinterpolateLinear, d3Interpolate.interpolateNumber);\n\n    scale.copy = function () {\n      return copy(scale, linear());\n    };\n\n    return linearish(scale);\n  }\n\n  function identity() {\n    var domain = [0, 1];\n\n    function scale(x) {\n      return +x;\n    }\n\n    scale.invert = scale;\n\n    scale.domain = scale.range = function (_) {\n      return arguments.length ? (domain = map$1.call(_, number), scale) : domain.slice();\n    };\n\n    scale.copy = function () {\n      return identity().domain(domain);\n    };\n\n    return linearish(scale);\n  }\n\n  var nice = function nice(domain, interval) {\n    domain = domain.slice();\n\n    var i0 = 0,\n        i1 = domain.length - 1,\n        x0 = domain[i0],\n        x1 = domain[i1],\n        t;\n\n    if (x1 < x0) {\n      t = i0, i0 = i1, i1 = t;\n      t = x0, x0 = x1, x1 = t;\n    }\n\n    domain[i0] = interval.floor(x0);\n    domain[i1] = interval.ceil(x1);\n    return domain;\n  };\n\n  function deinterpolate(a, b) {\n    return (b = Math.log(b / a)) ? function (x) {\n      return Math.log(x / a) / b;\n    } : constant(b);\n  }\n\n  function reinterpolate(a, b) {\n    return a < 0 ? function (t) {\n      return -Math.pow(-b, t) * Math.pow(-a, 1 - t);\n    } : function (t) {\n      return Math.pow(b, t) * Math.pow(a, 1 - t);\n    };\n  }\n\n  function pow10(x) {\n    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n  }\n\n  function powp(base) {\n    return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {\n      return Math.pow(base, x);\n    };\n  }\n\n  function logp(base) {\n    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {\n      return Math.log(x) / base;\n    });\n  }\n\n  function reflect(f) {\n    return function (x) {\n      return -f(-x);\n    };\n  }\n\n  function log() {\n    var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),\n        domain = scale.domain,\n        base = 10,\n        logs = logp(10),\n        pows = powp(10);\n\n    function rescale() {\n      logs = logp(base), pows = powp(base);\n      if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\n      return scale;\n    }\n\n    scale.base = function (_) {\n      return arguments.length ? (base = +_, rescale()) : base;\n    };\n\n    scale.domain = function (_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.ticks = function (count) {\n      var d = domain(),\n          u = d[0],\n          v = d[d.length - 1],\n          r;\n\n      if (r = v < u) i = u, u = v, v = i;\n\n      var i = logs(u),\n          j = logs(v),\n          p,\n          k,\n          t,\n          n = count == null ? 10 : +count,\n          z = [];\n\n      if (!(base % 1) && j - i < n) {\n        i = Math.round(i) - 1, j = Math.round(j) + 1;\n        if (u > 0) for (; i < j; ++i) {\n          for (k = 1, p = pows(i); k < base; ++k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        } else for (; i < j; ++i) {\n          for (k = base - 1, p = pows(i); k >= 1; --k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        }\n      } else {\n        z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);\n      }\n\n      return r ? z.reverse() : z;\n    };\n\n    scale.tickFormat = function (count, specifier) {\n      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n      if (typeof specifier !== \"function\") specifier = d3Format.format(specifier);\n      if (count === Infinity) return specifier;\n      if (count == null) count = 10;\n      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n      return function (d) {\n        var i = d / pows(Math.round(logs(d)));\n        if (i * base < base - 0.5) i *= base;\n        return i <= k ? specifier(d) : \"\";\n      };\n    };\n\n    scale.nice = function () {\n      return domain(nice(domain(), {\n        floor: function floor(x) {\n          return pows(Math.floor(logs(x)));\n        },\n        ceil: function ceil(x) {\n          return pows(Math.ceil(logs(x)));\n        }\n      }));\n    };\n\n    scale.copy = function () {\n      return copy(scale, log().base(base));\n    };\n\n    return scale;\n  }\n\n  function raise(x, exponent) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  }\n\n  function pow() {\n    var exponent = 1,\n        scale = continuous(deinterpolate, reinterpolate),\n        domain = scale.domain;\n\n    function deinterpolate(a, b) {\n      return (b = raise(b, exponent) - (a = raise(a, exponent))) ? function (x) {\n        return (raise(x, exponent) - a) / b;\n      } : constant(b);\n    }\n\n    function reinterpolate(a, b) {\n      b = raise(b, exponent) - (a = raise(a, exponent));\n      return function (t) {\n        return raise(a + b * t, 1 / exponent);\n      };\n    }\n\n    scale.exponent = function (_) {\n      return arguments.length ? (exponent = +_, domain(domain())) : exponent;\n    };\n\n    scale.copy = function () {\n      return copy(scale, pow().exponent(exponent));\n    };\n\n    return linearish(scale);\n  }\n\n  function sqrt() {\n    return pow().exponent(0.5);\n  }\n\n  function quantile$1() {\n    var domain = [],\n        range$$1 = [],\n        thresholds = [];\n\n    function rescale() {\n      var i = 0,\n          n = Math.max(1, range$$1.length);\n      thresholds = new Array(n - 1);\n      while (++i < n) {\n        thresholds[i - 1] = d3Array.quantile(domain, i / n);\n      }return scale;\n    }\n\n    function scale(x) {\n      if (!isNaN(x = +x)) return range$$1[d3Array.bisect(thresholds, x)];\n    }\n\n    scale.invertExtent = function (y) {\n      var i = range$$1.indexOf(y);\n      return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];\n    };\n\n    scale.domain = function (_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n      for (var i = 0, n = _.length, d; i < n; ++i) {\n        if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n      }domain.sort(d3Array.ascending);\n      return rescale();\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (range$$1 = slice.call(_), rescale()) : range$$1.slice();\n    };\n\n    scale.quantiles = function () {\n      return thresholds.slice();\n    };\n\n    scale.copy = function () {\n      return quantile$1().domain(domain).range(range$$1);\n    };\n\n    return scale;\n  }\n\n  function quantize() {\n    var x0 = 0,\n        x1 = 1,\n        n = 1,\n        domain = [0.5],\n        range$$1 = [0, 1];\n\n    function scale(x) {\n      if (x <= x) return range$$1[d3Array.bisect(domain, x, 0, n)];\n    }\n\n    function rescale() {\n      var i = -1;\n      domain = new Array(n);\n      while (++i < n) {\n        domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n      }return scale;\n    }\n\n    scale.domain = function (_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (n = (range$$1 = slice.call(_)).length - 1, rescale()) : range$$1.slice();\n    };\n\n    scale.invertExtent = function (y) {\n      var i = range$$1.indexOf(y);\n      return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function () {\n      return quantize().domain([x0, x1]).range(range$$1);\n    };\n\n    return linearish(scale);\n  }\n\n  function threshold() {\n    var domain = [0.5],\n        range$$1 = [0, 1],\n        n = 1;\n\n    function scale(x) {\n      if (x <= x) return range$$1[d3Array.bisect(domain, x, 0, n)];\n    }\n\n    scale.domain = function (_) {\n      return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();\n    };\n\n    scale.range = function (_) {\n      return arguments.length ? (range$$1 = slice.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();\n    };\n\n    scale.invertExtent = function (y) {\n      var i = range$$1.indexOf(y);\n      return [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function () {\n      return threshold().domain(domain).range(range$$1);\n    };\n\n    return scale;\n  }\n\n  var durationSecond = 1000;\n  var durationMinute = durationSecond * 60;\n  var durationHour = durationMinute * 60;\n  var durationDay = durationHour * 24;\n  var durationWeek = durationDay * 7;\n  var durationMonth = durationDay * 30;\n  var durationYear = durationDay * 365;\n\n  function date(t) {\n    return new Date(t);\n  }\n\n  function number$1(t) {\n    return t instanceof Date ? +t : +new Date(+t);\n  }\n\n  function calendar(year, month, week, day, hour, minute, second, millisecond, format$$1) {\n    var scale = continuous(deinterpolateLinear, d3Interpolate.interpolateNumber),\n        invert = scale.invert,\n        domain = scale.domain;\n\n    var formatMillisecond = format$$1(\".%L\"),\n        formatSecond = format$$1(\":%S\"),\n        formatMinute = format$$1(\"%I:%M\"),\n        formatHour = format$$1(\"%I %p\"),\n        formatDay = format$$1(\"%a %d\"),\n        formatWeek = format$$1(\"%b %d\"),\n        formatMonth = format$$1(\"%B\"),\n        formatYear = format$$1(\"%Y\");\n\n    var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];\n\n    function tickFormat(date) {\n      return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);\n    }\n\n    function tickInterval(interval, start, stop, step) {\n      if (interval == null) interval = 10;\n\n      // If a desired tick count is specified, pick a reasonable tick interval\n      // based on the extent of the domain and a rough estimate of tick size.\n      // Otherwise, assume interval is already a time interval and use it.\n      if (typeof interval === \"number\") {\n        var target = Math.abs(stop - start) / interval,\n            i = d3Array.bisector(function (i) {\n          return i[2];\n        }).right(tickIntervals, target);\n        if (i === tickIntervals.length) {\n          step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);\n          interval = year;\n        } else if (i) {\n          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n          step = i[1];\n          interval = i[0];\n        } else {\n          step = d3Array.tickStep(start, stop, interval);\n          interval = millisecond;\n        }\n      }\n\n      return step == null ? interval : interval.every(step);\n    }\n\n    scale.invert = function (y) {\n      return new Date(invert(y));\n    };\n\n    scale.domain = function (_) {\n      return arguments.length ? domain(map$1.call(_, number$1)) : domain().map(date);\n    };\n\n    scale.ticks = function (interval, step) {\n      var d = domain(),\n          t0 = d[0],\n          t1 = d[d.length - 1],\n          r = t1 < t0,\n          t;\n      if (r) t = t0, t0 = t1, t1 = t;\n      t = tickInterval(interval, t0, t1, step);\n      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n      return r ? t.reverse() : t;\n    };\n\n    scale.tickFormat = function (count, specifier) {\n      return specifier == null ? tickFormat : format$$1(specifier);\n    };\n\n    scale.nice = function (interval, step) {\n      var d = domain();\n      return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice(d, interval)) : scale;\n    };\n\n    scale.copy = function () {\n      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format$$1));\n    };\n\n    return scale;\n  }\n\n  var time = function time() {\n    return calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\n  };\n\n  var utcTime = function utcTime() {\n    return calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\n  };\n\n  var colors = function colors(s) {\n    return s.match(/.{6}/g).map(function (x) {\n      return \"#\" + x;\n    });\n  };\n\n  var category10 = colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n\n  var category20b = colors(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\");\n\n  var category20c = colors(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\");\n\n  var category20 = colors(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\");\n\n  var cubehelix$1 = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(300, 0.5, 0.0), d3Color.cubehelix(-240, 0.5, 1.0));\n\n  var warm = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(-100, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));\n\n  var cool = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(260, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));\n\n  var rainbow = d3Color.cubehelix();\n\n  var rainbow$1 = function rainbow$1(t) {\n    if (t < 0 || t > 1) t -= Math.floor(t);\n    var ts = Math.abs(t - 0.5);\n    rainbow.h = 360 * t - 100;\n    rainbow.s = 1.5 - 1.5 * ts;\n    rainbow.l = 0.8 - 0.9 * ts;\n    return rainbow + \"\";\n  };\n\n  function ramp(range$$1) {\n    var n = range$$1.length;\n    return function (t) {\n      return range$$1[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n    };\n  }\n\n  var viridis = ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\n  var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\n  var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\n  var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n\n  function sequential(interpolator) {\n    var x0 = 0,\n        x1 = 1,\n        clamp = false;\n\n    function scale(x) {\n      var t = (x - x0) / (x1 - x0);\n      return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\n    }\n\n    scale.domain = function (_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];\n    };\n\n    scale.clamp = function (_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n\n    scale.interpolator = function (_) {\n      return arguments.length ? (interpolator = _, scale) : interpolator;\n    };\n\n    scale.copy = function () {\n      return sequential(interpolator).domain([x0, x1]).clamp(clamp);\n    };\n\n    return linearish(scale);\n  }\n\n  exports.scaleBand = band;\n  exports.scalePoint = point;\n  exports.scaleIdentity = identity;\n  exports.scaleLinear = linear;\n  exports.scaleLog = log;\n  exports.scaleOrdinal = ordinal;\n  exports.scaleImplicit = implicit;\n  exports.scalePow = pow;\n  exports.scaleSqrt = sqrt;\n  exports.scaleQuantile = quantile$1;\n  exports.scaleQuantize = quantize;\n  exports.scaleThreshold = threshold;\n  exports.scaleTime = time;\n  exports.scaleUtc = utcTime;\n  exports.schemeCategory10 = category10;\n  exports.schemeCategory20b = category20b;\n  exports.schemeCategory20c = category20c;\n  exports.schemeCategory20 = category20;\n  exports.interpolateCubehelixDefault = cubehelix$1;\n  exports.interpolateRainbow = rainbow$1;\n  exports.interpolateWarm = warm;\n  exports.interpolateCool = cool;\n  exports.interpolateViridis = viridis;\n  exports.interpolateMagma = magma;\n  exports.interpolateInferno = inferno;\n  exports.interpolatePlasma = plasma;\n  exports.scaleSequential = sequential;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-array":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-array/build/d3-array.js","d3-time-format":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time-format/build/d3-time-format.js","d3-interpolate":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-interpolate/build/d3-interpolate.js","d3-collection":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-collection/build/d3-collection.js","d3-format":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-format/build/d3-format.js","d3-time":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time/build/d3-time.js","d3-color":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-color/build/d3-color.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-shape/build/d3-shape.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-shape/build/d3-shape.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-shape/ Version 1.2.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-path')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-path'], factory) : factory(global.d3 = global.d3 || {}, global.d3);\n})(undefined, function (exports, d3Path) {\n  'use strict';\n\n  var constant = function constant(x) {\n    return function constant() {\n      return x;\n    };\n  };\n\n  var abs = Math.abs;\n  var atan2 = Math.atan2;\n  var cos = Math.cos;\n  var max = Math.max;\n  var min = Math.min;\n  var sin = Math.sin;\n  var sqrt = Math.sqrt;\n\n  var epsilon = 1e-12;\n  var pi = Math.PI;\n  var halfPi = pi / 2;\n  var tau = 2 * pi;\n\n  function acos(x) {\n    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n  }\n\n  function asin(x) {\n    return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n  }\n\n  function arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n\n  function arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n\n  function arcStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function arcEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function arcPadAngle(d) {\n    return d && d.padAngle; // Note: optional!\n  }\n\n  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var x10 = x1 - x0,\n        y10 = y1 - y0,\n        x32 = x3 - x2,\n        y32 = y3 - y2,\n        t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n    return [x0 + t * x10, y0 + t * y10];\n  }\n\n  // Compute perpendicular offset line of length rc.\n  // http://mathworld.wolfram.com/Circle-LineIntersection.html\n  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n    var x01 = x0 - x1,\n        y01 = y0 - y1,\n        lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n        ox = lo * y01,\n        oy = -lo * x01,\n        x11 = x0 + ox,\n        y11 = y0 + oy,\n        x10 = x1 + ox,\n        y10 = y1 + oy,\n        x00 = (x11 + x10) / 2,\n        y00 = (y11 + y10) / 2,\n        dx = x10 - x11,\n        dy = y10 - y11,\n        d2 = dx * dx + dy * dy,\n        r = r1 - rc,\n        D = x11 * y10 - x10 * y11,\n        d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n        cx0 = (D * dy - dx * d) / d2,\n        cy0 = (-D * dx - dy * d) / d2,\n        cx1 = (D * dy + dx * d) / d2,\n        cy1 = (-D * dx + dy * d) / d2,\n        dx0 = cx0 - x00,\n        dy0 = cy0 - y00,\n        dx1 = cx1 - x00,\n        dy1 = cy1 - y00;\n\n    // Pick the closer of the two intersection points.\n    // TODO Is there a faster way to determine which intersection to use?\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n    return {\n      cx: cx0,\n      cy: cy0,\n      x01: -ox,\n      y01: -oy,\n      x11: cx0 * (r1 / r - 1),\n      y11: cy0 * (r1 / r - 1)\n    };\n  }\n\n  var arc = function arc() {\n    var innerRadius = arcInnerRadius,\n        outerRadius = arcOuterRadius,\n        cornerRadius = constant(0),\n        padRadius = null,\n        startAngle = arcStartAngle,\n        endAngle = arcEndAngle,\n        padAngle = arcPadAngle,\n        context = null;\n\n    function arc() {\n      var buffer,\n          r,\n          r0 = +innerRadius.apply(this, arguments),\n          r1 = +outerRadius.apply(this, arguments),\n          a0 = startAngle.apply(this, arguments) - halfPi,\n          a1 = endAngle.apply(this, arguments) - halfPi,\n          da = abs(a1 - a0),\n          cw = a1 > a0;\n\n      if (!context) context = buffer = d3Path.path();\n\n      // Ensure that the outer radius is always larger than the inner radius.\n      if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n      // Is it a point?\n      if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n      // Or is it a circle or annulus?\n      else if (da > tau - epsilon) {\n          context.moveTo(r1 * cos(a0), r1 * sin(a0));\n          context.arc(0, 0, r1, a0, a1, !cw);\n          if (r0 > epsilon) {\n            context.moveTo(r0 * cos(a1), r0 * sin(a1));\n            context.arc(0, 0, r0, a1, a0, cw);\n          }\n        }\n\n        // Or is it a circular or annular sector?\n        else {\n            var a01 = a0,\n                a11 = a1,\n                a00 = a0,\n                a10 = a1,\n                da0 = da,\n                da1 = da,\n                ap = padAngle.apply(this, arguments) / 2,\n                rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n                rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n                rc0 = rc,\n                rc1 = rc,\n                t0,\n                t1;\n\n            // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n            if (rp > epsilon) {\n              var p0 = asin(rp / r0 * sin(ap)),\n                  p1 = asin(rp / r1 * sin(ap));\n              if ((da0 -= p0 * 2) > epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n              if ((da1 -= p1 * 2) > epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n            }\n\n            var x01 = r1 * cos(a01),\n                y01 = r1 * sin(a01),\n                x10 = r0 * cos(a10),\n                y10 = r0 * sin(a10);\n\n            // Apply rounded corners?\n            if (rc > epsilon) {\n              var x11 = r1 * cos(a11),\n                  y11 = r1 * sin(a11),\n                  x00 = r0 * cos(a00),\n                  y00 = r0 * sin(a00);\n\n              // Restrict the corner radius according to the sector angle.\n              if (da < pi) {\n                var oc = da0 > epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n                    ax = x01 - oc[0],\n                    ay = y01 - oc[1],\n                    bx = x11 - oc[0],\n                    by = y11 - oc[1],\n                    kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n                    lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n                rc0 = min(rc, (r0 - lc) / (kc - 1));\n                rc1 = min(rc, (r1 - lc) / (kc + 1));\n              }\n            }\n\n            // Is the sector collapsed to a line?\n            if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n            // Does the sector’s outer ring have rounded corners?\n            else if (rc1 > epsilon) {\n                t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n                t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n                // Have the corners merged?\n                if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n                // Otherwise, draw the two corners and the ring.\n                else {\n                    context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n                    context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n                    context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n                  }\n              }\n\n              // Or is the outer ring just a circular arc?\n              else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n            // Is there no inner ring, and it’s a circular sector?\n            // Or perhaps it’s an annular sector collapsed due to padding?\n            if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n            // Does the sector’s inner ring (or point) have rounded corners?\n            else if (rc0 > epsilon) {\n                t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n                t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n                // Have the corners merged?\n                if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n                // Otherwise, draw the two corners and the ring.\n                else {\n                    context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n                    context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n                    context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n                  }\n              }\n\n              // Or is the inner ring just a circular arc?\n              else context.arc(0, 0, r0, a10, a00, cw);\n          }\n\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    arc.centroid = function () {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n      return [cos(a) * r, sin(a) * r];\n    };\n\n    arc.innerRadius = function (_) {\n      return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n    };\n\n    arc.outerRadius = function (_) {\n      return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n    };\n\n    arc.cornerRadius = function (_) {\n      return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n    };\n\n    arc.padRadius = function (_) {\n      return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n    };\n\n    arc.startAngle = function (_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n    };\n\n    arc.endAngle = function (_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n    };\n\n    arc.padAngle = function (_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n    };\n\n    arc.context = function (_) {\n      return arguments.length ? (context = _ == null ? null : _, arc) : context;\n    };\n\n    return arc;\n  };\n\n  function Linear(context) {\n    this._context = context;\n  }\n\n  Linear.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0:\n          this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;\n        case 1:\n          this._point = 2; // proceed\n        default:\n          this._context.lineTo(x, y);break;\n      }\n    }\n  };\n\n  var curveLinear = function curveLinear(context) {\n    return new Linear(context);\n  };\n\n  function x(p) {\n    return p[0];\n  }\n\n  function y(p) {\n    return p[1];\n  }\n\n  var line = function line() {\n    var x$$1 = x,\n        y$$1 = y,\n        defined = constant(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function line(data) {\n      var i,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer;\n\n      if (context == null) output = curve(buffer = d3Path.path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n        }\n        if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    line.x = function (_) {\n      return arguments.length ? (x$$1 = typeof _ === \"function\" ? _ : constant(+_), line) : x$$1;\n    };\n\n    line.y = function (_) {\n      return arguments.length ? (y$$1 = typeof _ === \"function\" ? _ : constant(+_), line) : y$$1;\n    };\n\n    line.defined = function (_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n    };\n\n    line.curve = function (_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n    };\n\n    line.context = function (_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n    };\n\n    return line;\n  };\n\n  var area = function area() {\n    var x0 = x,\n        x1 = null,\n        y0 = constant(0),\n        y1 = y,\n        defined = constant(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function area(data) {\n      var i,\n          j,\n          k,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer,\n          x0z = new Array(n),\n          y0z = new Array(n);\n\n      if (context == null) output = curve(buffer = d3Path.path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) {\n            j = i;\n            output.areaStart();\n            output.lineStart();\n          } else {\n            output.lineEnd();\n            output.lineStart();\n            for (k = i - 1; k >= j; --k) {\n              output.point(x0z[k], y0z[k]);\n            }\n            output.lineEnd();\n            output.areaEnd();\n          }\n        }\n        if (defined0) {\n          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n        }\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    function arealine() {\n      return line().defined(defined).curve(curve).context(context);\n    }\n\n    area.x = function (_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n    };\n\n    area.x0 = function (_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n    };\n\n    area.x1 = function (_) {\n      return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n    };\n\n    area.y = function (_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n    };\n\n    area.y0 = function (_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n    };\n\n    area.y1 = function (_) {\n      return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n    };\n\n    area.lineX0 = area.lineY0 = function () {\n      return arealine().x(x0).y(y0);\n    };\n\n    area.lineY1 = function () {\n      return arealine().x(x0).y(y1);\n    };\n\n    area.lineX1 = function () {\n      return arealine().x(x1).y(y0);\n    };\n\n    area.defined = function (_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n    };\n\n    area.curve = function (_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n    };\n\n    area.context = function (_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n    };\n\n    return area;\n  };\n\n  var descending = function descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n\n  var identity = function identity(d) {\n    return d;\n  };\n\n  var pie = function pie() {\n    var value = identity,\n        sortValues = descending,\n        sort = null,\n        startAngle = constant(0),\n        endAngle = constant(tau),\n        padAngle = constant(0);\n\n    function pie(data) {\n      var i,\n          n = data.length,\n          j,\n          k,\n          sum = 0,\n          index = new Array(n),\n          arcs = new Array(n),\n          a0 = +startAngle.apply(this, arguments),\n          da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),\n          a1,\n          p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n          pa = p * (da < 0 ? -1 : 1),\n          v;\n\n      for (i = 0; i < n; ++i) {\n        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n          sum += v;\n        }\n      }\n\n      // Optionally sort the arcs by previously-computed values or by data.\n      if (sortValues != null) index.sort(function (i, j) {\n        return sortValues(arcs[i], arcs[j]);\n      });else if (sort != null) index.sort(function (i, j) {\n        return sort(data[i], data[j]);\n      });\n\n      // Compute the arcs! They are stored in the original data's order.\n      for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n        j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n          data: data[j],\n          index: i,\n          value: v,\n          startAngle: a0,\n          endAngle: a1,\n          padAngle: p\n        };\n      }\n\n      return arcs;\n    }\n\n    pie.value = function (_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n    };\n\n    pie.sortValues = function (_) {\n      return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n    };\n\n    pie.sort = function (_) {\n      return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n    };\n\n    pie.startAngle = function (_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n    };\n\n    pie.endAngle = function (_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n    };\n\n    pie.padAngle = function (_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n    };\n\n    return pie;\n  };\n\n  var curveRadialLinear = curveRadial(curveLinear);\n\n  function Radial(curve) {\n    this._curve = curve;\n  }\n\n  Radial.prototype = {\n    areaStart: function areaStart() {\n      this._curve.areaStart();\n    },\n    areaEnd: function areaEnd() {\n      this._curve.areaEnd();\n    },\n    lineStart: function lineStart() {\n      this._curve.lineStart();\n    },\n    lineEnd: function lineEnd() {\n      this._curve.lineEnd();\n    },\n    point: function point(a, r) {\n      this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n    }\n  };\n\n  function curveRadial(curve) {\n\n    function radial(context) {\n      return new Radial(curve(context));\n    }\n\n    radial._curve = curve;\n\n    return radial;\n  }\n\n  function lineRadial(l) {\n    var c = l.curve;\n\n    l.angle = l.x, delete l.x;\n    l.radius = l.y, delete l.y;\n\n    l.curve = function (_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return l;\n  }\n\n  var lineRadial$1 = function lineRadial$1() {\n    return lineRadial(line().curve(curveRadialLinear));\n  };\n\n  var areaRadial = function areaRadial() {\n    var a = area().curve(curveRadialLinear),\n        c = a.curve,\n        x0 = a.lineX0,\n        x1 = a.lineX1,\n        y0 = a.lineY0,\n        y1 = a.lineY1;\n\n    a.angle = a.x, delete a.x;\n    a.startAngle = a.x0, delete a.x0;\n    a.endAngle = a.x1, delete a.x1;\n    a.radius = a.y, delete a.y;\n    a.innerRadius = a.y0, delete a.y0;\n    a.outerRadius = a.y1, delete a.y1;\n    a.lineStartAngle = function () {\n      return lineRadial(x0());\n    }, delete a.lineX0;\n    a.lineEndAngle = function () {\n      return lineRadial(x1());\n    }, delete a.lineX1;\n    a.lineInnerRadius = function () {\n      return lineRadial(y0());\n    }, delete a.lineY0;\n    a.lineOuterRadius = function () {\n      return lineRadial(y1());\n    }, delete a.lineY1;\n\n    a.curve = function (_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return a;\n  };\n\n  var pointRadial = function pointRadial(x, y) {\n    return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];\n  };\n\n  var slice = Array.prototype.slice;\n\n  function linkSource(d) {\n    return d.source;\n  }\n\n  function linkTarget(d) {\n    return d.target;\n  }\n\n  function link(curve) {\n    var source = linkSource,\n        target = linkTarget,\n        x$$1 = x,\n        y$$1 = y,\n        context = null;\n\n    function link() {\n      var buffer,\n          argv = slice.call(arguments),\n          s = source.apply(this, argv),\n          t = target.apply(this, argv);\n      if (!context) context = buffer = d3Path.path();\n      curve(context, +x$$1.apply(this, (argv[0] = s, argv)), +y$$1.apply(this, argv), +x$$1.apply(this, (argv[0] = t, argv)), +y$$1.apply(this, argv));\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    link.source = function (_) {\n      return arguments.length ? (source = _, link) : source;\n    };\n\n    link.target = function (_) {\n      return arguments.length ? (target = _, link) : target;\n    };\n\n    link.x = function (_) {\n      return arguments.length ? (x$$1 = typeof _ === \"function\" ? _ : constant(+_), link) : x$$1;\n    };\n\n    link.y = function (_) {\n      return arguments.length ? (y$$1 = typeof _ === \"function\" ? _ : constant(+_), link) : y$$1;\n    };\n\n    link.context = function (_) {\n      return arguments.length ? (context = _ == null ? null : _, link) : context;\n    };\n\n    return link;\n  }\n\n  function curveHorizontal(context, x0, y0, x1, y1) {\n    context.moveTo(x0, y0);\n    context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);\n  }\n\n  function curveVertical(context, x0, y0, x1, y1) {\n    context.moveTo(x0, y0);\n    context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);\n  }\n\n  function curveRadial$1(context, x0, y0, x1, y1) {\n    var p0 = pointRadial(x0, y0),\n        p1 = pointRadial(x0, y0 = (y0 + y1) / 2),\n        p2 = pointRadial(x1, y0),\n        p3 = pointRadial(x1, y1);\n    context.moveTo(p0[0], p0[1]);\n    context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n  }\n\n  function linkHorizontal() {\n    return link(curveHorizontal);\n  }\n\n  function linkVertical() {\n    return link(curveVertical);\n  }\n\n  function linkRadial() {\n    var l = link(curveRadial$1);\n    l.angle = l.x, delete l.x;\n    l.radius = l.y, delete l.y;\n    return l;\n  }\n\n  var circle = {\n    draw: function draw(context, size) {\n      var r = Math.sqrt(size / pi);\n      context.moveTo(r, 0);\n      context.arc(0, 0, r, 0, tau);\n    }\n  };\n\n  var cross = {\n    draw: function draw(context, size) {\n      var r = Math.sqrt(size / 5) / 2;\n      context.moveTo(-3 * r, -r);\n      context.lineTo(-r, -r);\n      context.lineTo(-r, -3 * r);\n      context.lineTo(r, -3 * r);\n      context.lineTo(r, -r);\n      context.lineTo(3 * r, -r);\n      context.lineTo(3 * r, r);\n      context.lineTo(r, r);\n      context.lineTo(r, 3 * r);\n      context.lineTo(-r, 3 * r);\n      context.lineTo(-r, r);\n      context.lineTo(-3 * r, r);\n      context.closePath();\n    }\n  };\n\n  var tan30 = Math.sqrt(1 / 3);\n  var tan30_2 = tan30 * 2;\n\n  var diamond = {\n    draw: function draw(context, size) {\n      var y = Math.sqrt(size / tan30_2),\n          x = y * tan30;\n      context.moveTo(0, -y);\n      context.lineTo(x, 0);\n      context.lineTo(0, y);\n      context.lineTo(-x, 0);\n      context.closePath();\n    }\n  };\n\n  var ka = 0.89081309152928522810;\n  var kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10);\n  var kx = Math.sin(tau / 10) * kr;\n  var ky = -Math.cos(tau / 10) * kr;\n\n  var star = {\n    draw: function draw(context, size) {\n      var r = Math.sqrt(size * ka),\n          x = kx * r,\n          y = ky * r;\n      context.moveTo(0, -r);\n      context.lineTo(x, y);\n      for (var i = 1; i < 5; ++i) {\n        var a = tau * i / 5,\n            c = Math.cos(a),\n            s = Math.sin(a);\n        context.lineTo(s * r, -c * r);\n        context.lineTo(c * x - s * y, s * x + c * y);\n      }\n      context.closePath();\n    }\n  };\n\n  var square = {\n    draw: function draw(context, size) {\n      var w = Math.sqrt(size),\n          x = -w / 2;\n      context.rect(x, x, w, w);\n    }\n  };\n\n  var sqrt3 = Math.sqrt(3);\n\n  var triangle = {\n    draw: function draw(context, size) {\n      var y = -Math.sqrt(size / (sqrt3 * 3));\n      context.moveTo(0, y * 2);\n      context.lineTo(-sqrt3 * y, -y);\n      context.lineTo(sqrt3 * y, -y);\n      context.closePath();\n    }\n  };\n\n  var c = -0.5;\n  var s = Math.sqrt(3) / 2;\n  var k = 1 / Math.sqrt(12);\n  var a = (k / 2 + 1) * 3;\n\n  var wye = {\n    draw: function draw(context, size) {\n      var r = Math.sqrt(size / a),\n          x0 = r / 2,\n          y0 = r * k,\n          x1 = x0,\n          y1 = r * k + r,\n          x2 = -x1,\n          y2 = y1;\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n      context.lineTo(x2, y2);\n      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n      context.closePath();\n    }\n  };\n\n  var symbols = [circle, cross, diamond, square, star, triangle, wye];\n\n  var symbol = function symbol() {\n    var type = constant(circle),\n        size = constant(64),\n        context = null;\n\n    function symbol() {\n      var buffer;\n      if (!context) context = buffer = d3Path.path();\n      type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    symbol.type = function (_) {\n      return arguments.length ? (type = typeof _ === \"function\" ? _ : constant(_), symbol) : type;\n    };\n\n    symbol.size = function (_) {\n      return arguments.length ? (size = typeof _ === \"function\" ? _ : constant(+_), symbol) : size;\n    };\n\n    symbol.context = function (_) {\n      return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n    };\n\n    return symbol;\n  };\n\n  var noop = function noop() {};\n\n  function _point(that, x, y) {\n    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);\n  }\n\n  function Basis(context) {\n    this._context = context;\n  }\n\n  Basis.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 3:\n          _point(this, this._x1, this._y1); // proceed\n        case 2:\n          this._context.lineTo(this._x1, this._y1);break;\n      }\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0:\n          this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;\n        case 1:\n          this._point = 2;break;\n        case 2:\n          this._point = 3;this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n        default:\n          _point(this, x, y);break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  var basis = function basis(context) {\n    return new Basis(context);\n  };\n\n  function BasisClosed(context) {\n    this._context = context;\n  }\n\n  BasisClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 1:\n          {\n            this._context.moveTo(this._x2, this._y2);\n            this._context.closePath();\n            break;\n          }\n        case 2:\n          {\n            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n            this._context.closePath();\n            break;\n          }\n        case 3:\n          {\n            this.point(this._x2, this._y2);\n            this.point(this._x3, this._y3);\n            this.point(this._x4, this._y4);\n            break;\n          }\n      }\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0:\n          this._point = 1;this._x2 = x, this._y2 = y;break;\n        case 1:\n          this._point = 2;this._x3 = x, this._y3 = y;break;\n        case 2:\n          this._point = 3;this._x4 = x, this._y4 = y;this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);break;\n        default:\n          _point(this, x, y);break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  var basisClosed = function basisClosed(context) {\n    return new BasisClosed(context);\n  };\n\n  function BasisOpen(context) {\n    this._context = context;\n  }\n\n  BasisOpen.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0:\n          this._point = 1;break;\n        case 1:\n          this._point = 2;break;\n        case 2:\n          this._point = 3;var x0 = (this._x0 + 4 * this._x1 + x) / 6,\n              y0 = (this._y0 + 4 * this._y1 + y) / 6;this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);break;\n        case 3:\n          this._point = 4; // proceed\n        default:\n          _point(this, x, y);break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  var basisOpen = function basisOpen(context) {\n    return new BasisOpen(context);\n  };\n\n  function Bundle(context, beta) {\n    this._basis = new Basis(context);\n    this._beta = beta;\n  }\n\n  Bundle.prototype = {\n    lineStart: function lineStart() {\n      this._x = [];\n      this._y = [];\n      this._basis.lineStart();\n    },\n    lineEnd: function lineEnd() {\n      var x = this._x,\n          y = this._y,\n          j = x.length - 1;\n\n      if (j > 0) {\n        var x0 = x[0],\n            y0 = y[0],\n            dx = x[j] - x0,\n            dy = y[j] - y0,\n            i = -1,\n            t;\n\n        while (++i <= j) {\n          t = i / j;\n          this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));\n        }\n      }\n\n      this._x = this._y = null;\n      this._basis.lineEnd();\n    },\n    point: function point(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  var bundle = function custom(beta) {\n\n    function bundle(context) {\n      return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n    }\n\n    bundle.beta = function (beta) {\n      return custom(+beta);\n    };\n\n    return bundle;\n  }(0.85);\n\n  function point$1(that, x, y) {\n    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);\n  }\n\n  function Cardinal(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  Cardinal.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x2, this._y2);break;\n        case 3:\n          point$1(this, this._x1, this._y1);break;\n      }\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0:\n          this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;\n        case 1:\n          this._point = 2;this._x1 = x, this._y1 = y;break;\n        case 2:\n          this._point = 3; // proceed\n        default:\n          point$1(this, x, y);break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinal = function custom(tension) {\n\n    function cardinal(context) {\n      return new Cardinal(context, tension);\n    }\n\n    cardinal.tension = function (tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  }(0);\n\n  function CardinalClosed(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 1:\n          {\n            this._context.moveTo(this._x3, this._y3);\n            this._context.closePath();\n            break;\n          }\n        case 2:\n          {\n            this._context.lineTo(this._x3, this._y3);\n            this._context.closePath();\n            break;\n          }\n        case 3:\n          {\n            this.point(this._x3, this._y3);\n            this.point(this._x4, this._y4);\n            this.point(this._x5, this._y5);\n            break;\n          }\n      }\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0:\n          this._point = 1;this._x3 = x, this._y3 = y;break;\n        case 1:\n          this._point = 2;this._context.moveTo(this._x4 = x, this._y4 = y);break;\n        case 2:\n          this._point = 3;this._x5 = x, this._y5 = y;break;\n        default:\n          point$1(this, x, y);break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalClosed = function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalClosed(context, tension);\n    }\n\n    cardinal.tension = function (tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  }(0);\n\n  function CardinalOpen(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalOpen.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0:\n          this._point = 1;break;\n        case 1:\n          this._point = 2;break;\n        case 2:\n          this._point = 3;this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);break;\n        case 3:\n          this._point = 4; // proceed\n        default:\n          point$1(this, x, y);break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalOpen = function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalOpen(context, tension);\n    }\n\n    cardinal.tension = function (tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  }(0);\n\n  function point$2(that, x, y) {\n    var x1 = that._x1,\n        y1 = that._y1,\n        x2 = that._x2,\n        y2 = that._y2;\n\n    if (that._l01_a > epsilon) {\n      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n          n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n    }\n\n    if (that._l23_a > epsilon) {\n      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n          m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n    }\n\n    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n  }\n\n  function CatmullRom(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRom.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x2, this._y2);break;\n        case 3:\n          this.point(this._x2, this._y2);break;\n      }\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;\n        case 1:\n          this._point = 2;break;\n        case 2:\n          this._point = 3; // proceed\n        default:\n          point$2(this, x, y);break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRom = function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n    }\n\n    catmullRom.alpha = function (alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  }(0.5);\n\n  function CatmullRomClosed(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 1:\n          {\n            this._context.moveTo(this._x3, this._y3);\n            this._context.closePath();\n            break;\n          }\n        case 2:\n          {\n            this._context.lineTo(this._x3, this._y3);\n            this._context.closePath();\n            break;\n          }\n        case 3:\n          {\n            this.point(this._x3, this._y3);\n            this.point(this._x4, this._y4);\n            this.point(this._x5, this._y5);\n            break;\n          }\n      }\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;this._x3 = x, this._y3 = y;break;\n        case 1:\n          this._point = 2;this._context.moveTo(this._x4 = x, this._y4 = y);break;\n        case 2:\n          this._point = 3;this._x5 = x, this._y5 = y;break;\n        default:\n          point$2(this, x, y);break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomClosed = function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n    }\n\n    catmullRom.alpha = function (alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  }(0.5);\n\n  function CatmullRomOpen(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomOpen.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0:\n          this._point = 1;break;\n        case 1:\n          this._point = 2;break;\n        case 2:\n          this._point = 3;this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);break;\n        case 3:\n          this._point = 4; // proceed\n        default:\n          point$2(this, x, y);break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomOpen = function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n    }\n\n    catmullRom.alpha = function (alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  }(0.5);\n\n  function LinearClosed(context) {\n    this._context = context;\n  }\n\n  LinearClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function lineStart() {\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      if (this._point) this._context.closePath();\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n      if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);\n    }\n  };\n\n  var linearClosed = function linearClosed(context) {\n    return new LinearClosed(context);\n  };\n\n  function sign(x) {\n    return x < 0 ? -1 : 1;\n  }\n\n  // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n  // NOV(II), P. 443, 1990.\n  function slope3(that, x2, y2) {\n    var h0 = that._x1 - that._x0,\n        h1 = x2 - that._x1,\n        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n        p = (s0 * h1 + s1 * h0) / (h0 + h1);\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n  }\n\n  // Calculate a one-sided slope.\n  function slope2(that, t) {\n    var h = that._x1 - that._x0;\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n  }\n\n  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n  // \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n  function point$3(that, t0, t1) {\n    var x0 = that._x0,\n        y0 = that._y0,\n        x1 = that._x1,\n        y1 = that._y1,\n        dx = (x1 - x0) / 3;\n    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n  }\n\n  function MonotoneX(context) {\n    this._context = context;\n  }\n\n  MonotoneX.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      switch (this._point) {\n        case 2:\n          this._context.lineTo(this._x1, this._y1);break;\n        case 3:\n          point$3(this, this._t0, slope2(this, this._t0));break;\n      }\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function point(x, y) {\n      var t1 = NaN;\n\n      x = +x, y = +y;\n      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n      switch (this._point) {\n        case 0:\n          this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;\n        case 1:\n          this._point = 2;break;\n        case 2:\n          this._point = 3;point$3(this, slope2(this, t1 = slope3(this, x, y)), t1);break;\n        default:\n          point$3(this, this._t0, t1 = slope3(this, x, y));break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n      this._t0 = t1;\n    }\n  };\n\n  function MonotoneY(context) {\n    this._context = new ReflectContext(context);\n  }\n\n  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {\n    MonotoneX.prototype.point.call(this, y, x);\n  };\n\n  function ReflectContext(context) {\n    this._context = context;\n  }\n\n  ReflectContext.prototype = {\n    moveTo: function moveTo(x, y) {\n      this._context.moveTo(y, x);\n    },\n    closePath: function closePath() {\n      this._context.closePath();\n    },\n    lineTo: function lineTo(x, y) {\n      this._context.lineTo(y, x);\n    },\n    bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n      this._context.bezierCurveTo(y1, x1, y2, x2, y, x);\n    }\n  };\n\n  function monotoneX(context) {\n    return new MonotoneX(context);\n  }\n\n  function monotoneY(context) {\n    return new MonotoneY(context);\n  }\n\n  function Natural(context) {\n    this._context = context;\n  }\n\n  Natural.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x = [];\n      this._y = [];\n    },\n    lineEnd: function lineEnd() {\n      var x = this._x,\n          y = this._y,\n          n = x.length;\n\n      if (n) {\n        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n        if (n === 2) {\n          this._context.lineTo(x[1], y[1]);\n        } else {\n          var px = controlPoints(x),\n              py = controlPoints(y);\n          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n          }\n        }\n      }\n\n      if (this._line || this._line !== 0 && n === 1) this._context.closePath();\n      this._line = 1 - this._line;\n      this._x = this._y = null;\n    },\n    point: function point(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\n  function controlPoints(x) {\n    var i,\n        n = x.length - 1,\n        m,\n        a = new Array(n),\n        b = new Array(n),\n        r = new Array(n);\n    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n    for (i = 1; i < n - 1; ++i) {\n      a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n    }a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n    for (i = 1; i < n; ++i) {\n      m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n    }a[n - 1] = r[n - 1] / b[n - 1];\n    for (i = n - 2; i >= 0; --i) {\n      a[i] = (r[i] - a[i + 1]) / b[i];\n    }b[n - 1] = (x[n] + a[n - 1]) / 2;\n    for (i = 0; i < n - 1; ++i) {\n      b[i] = 2 * x[i + 1] - a[i + 1];\n    }return [a, b];\n  }\n\n  var natural = function natural(context) {\n    return new Natural(context);\n  };\n\n  function Step(context, t) {\n    this._context = context;\n    this._t = t;\n  }\n\n  Step.prototype = {\n    areaStart: function areaStart() {\n      this._line = 0;\n    },\n    areaEnd: function areaEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._x = this._y = NaN;\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n    },\n    point: function point(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0:\n          this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;\n        case 1:\n          this._point = 2; // proceed\n        default:\n          {\n            if (this._t <= 0) {\n              this._context.lineTo(this._x, y);\n              this._context.lineTo(x, y);\n            } else {\n              var x1 = this._x * (1 - this._t) + x * this._t;\n              this._context.lineTo(x1, this._y);\n              this._context.lineTo(x1, y);\n            }\n            break;\n          }\n      }\n      this._x = x, this._y = y;\n    }\n  };\n\n  var step = function step(context) {\n    return new Step(context, 0.5);\n  };\n\n  function stepBefore(context) {\n    return new Step(context, 0);\n  }\n\n  function stepAfter(context) {\n    return new Step(context, 1);\n  }\n\n  var none = function none(series, order) {\n    if (!((n = series.length) > 1)) return;\n    for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n      s0 = s1, s1 = series[order[i]];\n      for (j = 0; j < m; ++j) {\n        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\n      }\n    }\n  };\n\n  var none$1 = function none$1(series) {\n    var n = series.length,\n        o = new Array(n);\n    while (--n >= 0) {\n      o[n] = n;\n    }return o;\n  };\n\n  function stackValue(d, key) {\n    return d[key];\n  }\n\n  var stack = function stack() {\n    var keys = constant([]),\n        order = none$1,\n        offset = none,\n        value = stackValue;\n\n    function stack(data) {\n      var kz = keys.apply(this, arguments),\n          i,\n          m = data.length,\n          n = kz.length,\n          sz = new Array(n),\n          oz;\n\n      for (i = 0; i < n; ++i) {\n        for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n          si[j] = sij = [0, +value(data[j], ki, j, data)];\n          sij.data = data[j];\n        }\n        si.key = ki;\n      }\n\n      for (i = 0, oz = order(sz); i < n; ++i) {\n        sz[oz[i]].index = i;\n      }\n\n      offset(sz, oz);\n      return sz;\n    }\n\n    stack.keys = function (_) {\n      return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n    };\n\n    stack.value = function (_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n    };\n\n    stack.order = function (_) {\n      return arguments.length ? (order = _ == null ? none$1 : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n    };\n\n    stack.offset = function (_) {\n      return arguments.length ? (offset = _ == null ? none : _, stack) : offset;\n    };\n\n    return stack;\n  };\n\n  var expand = function expand(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\n      for (y = i = 0; i < n; ++i) {\n        y += series[i][j][1] || 0;\n      }if (y) for (i = 0; i < n; ++i) {\n        series[i][j][1] /= y;\n      }\n    }\n    none(series, order);\n  };\n\n  var diverging = function diverging(series, order) {\n    if (!((n = series.length) > 1)) return;\n    for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {\n      for (yp = yn = 0, i = 0; i < n; ++i) {\n        if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {\n          d[0] = yp, d[1] = yp += dy;\n        } else if (dy < 0) {\n          d[1] = yn, d[0] = yn += dy;\n        } else {\n          d[0] = yp;\n        }\n      }\n    }\n  };\n\n  var silhouette = function silhouette(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\n      for (var i = 0, y = 0; i < n; ++i) {\n        y += series[i][j][1] || 0;\n      }s0[j][1] += s0[j][0] = -y / 2;\n    }\n    none(series, order);\n  };\n\n  var wiggle = function wiggle(series, order) {\n    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\n    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\n      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\n        var si = series[order[i]],\n            sij0 = si[j][1] || 0,\n            sij1 = si[j - 1][1] || 0,\n            s3 = (sij0 - sij1) / 2;\n        for (var k = 0; k < i; ++k) {\n          var sk = series[order[k]],\n              skj0 = sk[j][1] || 0,\n              skj1 = sk[j - 1][1] || 0;\n          s3 += skj0 - skj1;\n        }\n        s1 += sij0, s2 += s3 * sij0;\n      }\n      s0[j - 1][1] += s0[j - 1][0] = y;\n      if (s1) y -= s2 / s1;\n    }\n    s0[j - 1][1] += s0[j - 1][0] = y;\n    none(series, order);\n  };\n\n  var ascending = function ascending(series) {\n    var sums = series.map(sum);\n    return none$1(series).sort(function (a, b) {\n      return sums[a] - sums[b];\n    });\n  };\n\n  function sum(series) {\n    var s = 0,\n        i = -1,\n        n = series.length,\n        v;\n    while (++i < n) {\n      if (v = +series[i][1]) s += v;\n    }return s;\n  }\n\n  var descending$1 = function descending$1(series) {\n    return ascending(series).reverse();\n  };\n\n  var insideOut = function insideOut(series) {\n    var n = series.length,\n        i,\n        j,\n        sums = series.map(sum),\n        order = none$1(series).sort(function (a, b) {\n      return sums[b] - sums[a];\n    }),\n        top = 0,\n        bottom = 0,\n        tops = [],\n        bottoms = [];\n\n    for (i = 0; i < n; ++i) {\n      j = order[i];\n      if (top < bottom) {\n        top += sums[j];\n        tops.push(j);\n      } else {\n        bottom += sums[j];\n        bottoms.push(j);\n      }\n    }\n\n    return bottoms.reverse().concat(tops);\n  };\n\n  var reverse = function reverse(series) {\n    return none$1(series).reverse();\n  };\n\n  exports.arc = arc;\n  exports.area = area;\n  exports.line = line;\n  exports.pie = pie;\n  exports.areaRadial = areaRadial;\n  exports.radialArea = areaRadial;\n  exports.lineRadial = lineRadial$1;\n  exports.radialLine = lineRadial$1;\n  exports.pointRadial = pointRadial;\n  exports.linkHorizontal = linkHorizontal;\n  exports.linkVertical = linkVertical;\n  exports.linkRadial = linkRadial;\n  exports.symbol = symbol;\n  exports.symbols = symbols;\n  exports.symbolCircle = circle;\n  exports.symbolCross = cross;\n  exports.symbolDiamond = diamond;\n  exports.symbolSquare = square;\n  exports.symbolStar = star;\n  exports.symbolTriangle = triangle;\n  exports.symbolWye = wye;\n  exports.curveBasisClosed = basisClosed;\n  exports.curveBasisOpen = basisOpen;\n  exports.curveBasis = basis;\n  exports.curveBundle = bundle;\n  exports.curveCardinalClosed = cardinalClosed;\n  exports.curveCardinalOpen = cardinalOpen;\n  exports.curveCardinal = cardinal;\n  exports.curveCatmullRomClosed = catmullRomClosed;\n  exports.curveCatmullRomOpen = catmullRomOpen;\n  exports.curveCatmullRom = catmullRom;\n  exports.curveLinearClosed = linearClosed;\n  exports.curveLinear = curveLinear;\n  exports.curveMonotoneX = monotoneX;\n  exports.curveMonotoneY = monotoneY;\n  exports.curveNatural = natural;\n  exports.curveStep = step;\n  exports.curveStepAfter = stepAfter;\n  exports.curveStepBefore = stepBefore;\n  exports.stack = stack;\n  exports.stackOffsetExpand = expand;\n  exports.stackOffsetDiverging = diverging;\n  exports.stackOffsetNone = none;\n  exports.stackOffsetSilhouette = silhouette;\n  exports.stackOffsetWiggle = wiggle;\n  exports.stackOrderAscending = ascending;\n  exports.stackOrderDescending = descending$1;\n  exports.stackOrderInsideOut = insideOut;\n  exports.stackOrderNone = none$1;\n  exports.stackOrderReverse = reverse;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-path":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-path/build/d3-path.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time-format/build/d3-time-format.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time-format/build/d3-time-format.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-time-format/ Version 2.0.5. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-time')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-time'], factory) : factory(global.d3 = global.d3 || {}, global.d3);\n})(undefined, function (exports, d3Time) {\n  'use strict';\n\n  function localDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n      date.setFullYear(d.y);\n      return date;\n    }\n    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n  }\n\n  function utcDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n  }\n\n  function newYear(y) {\n    return { y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0 };\n  }\n\n  function formatLocale(locale) {\n    var locale_dateTime = locale.dateTime,\n        locale_date = locale.date,\n        locale_time = locale.time,\n        locale_periods = locale.periods,\n        locale_weekdays = locale.days,\n        locale_shortWeekdays = locale.shortDays,\n        locale_months = locale.months,\n        locale_shortMonths = locale.shortMonths;\n\n    var periodRe = formatRe(locale_periods),\n        periodLookup = formatLookup(locale_periods),\n        weekdayRe = formatRe(locale_weekdays),\n        weekdayLookup = formatLookup(locale_weekdays),\n        shortWeekdayRe = formatRe(locale_shortWeekdays),\n        shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n        monthRe = formatRe(locale_months),\n        monthLookup = formatLookup(locale_months),\n        shortMonthRe = formatRe(locale_shortMonths),\n        shortMonthLookup = formatLookup(locale_shortMonths);\n\n    var formats = {\n      \"a\": formatShortWeekday,\n      \"A\": formatWeekday,\n      \"b\": formatShortMonth,\n      \"B\": formatMonth,\n      \"c\": null,\n      \"d\": formatDayOfMonth,\n      \"e\": formatDayOfMonth,\n      \"H\": formatHour24,\n      \"I\": formatHour12,\n      \"j\": formatDayOfYear,\n      \"L\": formatMilliseconds,\n      \"m\": formatMonthNumber,\n      \"M\": formatMinutes,\n      \"p\": formatPeriod,\n      \"S\": formatSeconds,\n      \"U\": formatWeekNumberSunday,\n      \"w\": formatWeekdayNumber,\n      \"W\": formatWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatYear,\n      \"Y\": formatFullYear,\n      \"Z\": formatZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var utcFormats = {\n      \"a\": formatUTCShortWeekday,\n      \"A\": formatUTCWeekday,\n      \"b\": formatUTCShortMonth,\n      \"B\": formatUTCMonth,\n      \"c\": null,\n      \"d\": formatUTCDayOfMonth,\n      \"e\": formatUTCDayOfMonth,\n      \"H\": formatUTCHour24,\n      \"I\": formatUTCHour12,\n      \"j\": formatUTCDayOfYear,\n      \"L\": formatUTCMilliseconds,\n      \"m\": formatUTCMonthNumber,\n      \"M\": formatUTCMinutes,\n      \"p\": formatUTCPeriod,\n      \"S\": formatUTCSeconds,\n      \"U\": formatUTCWeekNumberSunday,\n      \"w\": formatUTCWeekdayNumber,\n      \"W\": formatUTCWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatUTCYear,\n      \"Y\": formatUTCFullYear,\n      \"Z\": formatUTCZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var parses = {\n      \"a\": parseShortWeekday,\n      \"A\": parseWeekday,\n      \"b\": parseShortMonth,\n      \"B\": parseMonth,\n      \"c\": parseLocaleDateTime,\n      \"d\": parseDayOfMonth,\n      \"e\": parseDayOfMonth,\n      \"H\": parseHour24,\n      \"I\": parseHour24,\n      \"j\": parseDayOfYear,\n      \"L\": parseMilliseconds,\n      \"m\": parseMonthNumber,\n      \"M\": parseMinutes,\n      \"p\": parsePeriod,\n      \"S\": parseSeconds,\n      \"U\": parseWeekNumberSunday,\n      \"w\": parseWeekdayNumber,\n      \"W\": parseWeekNumberMonday,\n      \"x\": parseLocaleDate,\n      \"X\": parseLocaleTime,\n      \"y\": parseYear,\n      \"Y\": parseFullYear,\n      \"Z\": parseZone,\n      \"%\": parseLiteralPercent\n    };\n\n    // These recursive directive definitions must be deferred.\n    formats.x = newFormat(locale_date, formats);\n    formats.X = newFormat(locale_time, formats);\n    formats.c = newFormat(locale_dateTime, formats);\n    utcFormats.x = newFormat(locale_date, utcFormats);\n    utcFormats.X = newFormat(locale_time, utcFormats);\n    utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n    function newFormat(specifier, formats) {\n      return function (date) {\n        var string = [],\n            i = -1,\n            j = 0,\n            n = specifier.length,\n            c,\n            pad,\n            format;\n\n        if (!(date instanceof Date)) date = new Date(+date);\n\n        while (++i < n) {\n          if (specifier.charCodeAt(i) === 37) {\n            string.push(specifier.slice(j, i));\n            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === \"e\" ? \" \" : \"0\";\n            if (format = formats[c]) c = format(date, pad);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n\n        string.push(specifier.slice(j, i));\n        return string.join(\"\");\n      };\n    }\n\n    function newParse(specifier, newDate) {\n      return function (string) {\n        var d = newYear(1900),\n            i = parseSpecifier(d, specifier, string += \"\", 0);\n        if (i != string.length) return null;\n\n        // The am-pm flag is 0 for AM, and 1 for PM.\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n        // Convert day-of-week and week-of-year to day-of-year.\n        if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          var day = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n          d.m = 0;\n          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n        }\n\n        // If a time zone is specified, all fields are interpreted as UTC and then\n        // offset according to the specified time zone.\n        if (\"Z\" in d) {\n          d.H += d.Z / 100 | 0;\n          d.M += d.Z % 100;\n          return utcDate(d);\n        }\n\n        // Otherwise, all fields are in local time.\n        return newDate(d);\n      };\n    }\n\n    function parseSpecifier(d, specifier, string, j) {\n      var i = 0,\n          n = specifier.length,\n          m = string.length,\n          c,\n          parse;\n\n      while (i < n) {\n        if (j >= m) return -1;\n        c = specifier.charCodeAt(i++);\n        if (c === 37) {\n          c = specifier.charAt(i++);\n          parse = parses[c in pads ? specifier.charAt(i++) : c];\n          if (!parse || (j = parse(d, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n\n      return j;\n    }\n\n    function parsePeriod(d, string, i) {\n      var n = periodRe.exec(string.slice(i));\n      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortWeekday(d, string, i) {\n      var n = shortWeekdayRe.exec(string.slice(i));\n      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseWeekday(d, string, i) {\n      var n = weekdayRe.exec(string.slice(i));\n      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortMonth(d, string, i) {\n      var n = shortMonthRe.exec(string.slice(i));\n      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseMonth(d, string, i) {\n      var n = monthRe.exec(string.slice(i));\n      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseLocaleDateTime(d, string, i) {\n      return parseSpecifier(d, locale_dateTime, string, i);\n    }\n\n    function parseLocaleDate(d, string, i) {\n      return parseSpecifier(d, locale_date, string, i);\n    }\n\n    function parseLocaleTime(d, string, i) {\n      return parseSpecifier(d, locale_time, string, i);\n    }\n\n    function formatShortWeekday(d) {\n      return locale_shortWeekdays[d.getDay()];\n    }\n\n    function formatWeekday(d) {\n      return locale_weekdays[d.getDay()];\n    }\n\n    function formatShortMonth(d) {\n      return locale_shortMonths[d.getMonth()];\n    }\n\n    function formatMonth(d) {\n      return locale_months[d.getMonth()];\n    }\n\n    function formatPeriod(d) {\n      return locale_periods[+(d.getHours() >= 12)];\n    }\n\n    function formatUTCShortWeekday(d) {\n      return locale_shortWeekdays[d.getUTCDay()];\n    }\n\n    function formatUTCWeekday(d) {\n      return locale_weekdays[d.getUTCDay()];\n    }\n\n    function formatUTCShortMonth(d) {\n      return locale_shortMonths[d.getUTCMonth()];\n    }\n\n    function formatUTCMonth(d) {\n      return locale_months[d.getUTCMonth()];\n    }\n\n    function formatUTCPeriod(d) {\n      return locale_periods[+(d.getUTCHours() >= 12)];\n    }\n\n    return {\n      format: function format(specifier) {\n        var f = newFormat(specifier += \"\", formats);\n        f.toString = function () {\n          return specifier;\n        };\n        return f;\n      },\n      parse: function parse(specifier) {\n        var p = newParse(specifier += \"\", localDate);\n        p.toString = function () {\n          return specifier;\n        };\n        return p;\n      },\n      utcFormat: function utcFormat(specifier) {\n        var f = newFormat(specifier += \"\", utcFormats);\n        f.toString = function () {\n          return specifier;\n        };\n        return f;\n      },\n      utcParse: function utcParse(specifier) {\n        var p = newParse(specifier, utcDate);\n        p.toString = function () {\n          return specifier;\n        };\n        return p;\n      }\n    };\n  }\n\n  var pads = { \"-\": \"\", \"_\": \" \", \"0\": \"0\" };\n  var numberRe = /^\\s*\\d+/;\n  var percentRe = /^%/;\n  var requoteRe = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n\n  function pad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\",\n        string = (sign ? -value : value) + \"\",\n        length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n\n  function requote(s) {\n    return s.replace(requoteRe, \"\\\\$&\");\n  }\n\n  function formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n  }\n\n  function formatLookup(names) {\n    var map = {},\n        i = -1,\n        n = names.length;\n    while (++i < n) {\n      map[names[i].toLowerCase()] = i;\n    }return map;\n  }\n\n  function parseWeekdayNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.w = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.U = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.W = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseFullYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 4));\n    return n ? (d.y = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n  }\n\n  function parseZone(d, string, i) {\n    var n = /^(Z)|([+-]\\d\\d)(?:\\:?(\\d\\d))?/.exec(string.slice(i, i + 6));\n    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n  }\n\n  function parseMonthNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n  }\n\n  function parseDayOfMonth(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseDayOfYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseHour24(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.H = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMinutes(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.M = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.S = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMilliseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.L = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseLiteralPercent(d, string, i) {\n    var n = percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n\n  function formatDayOfMonth(d, p) {\n    return pad(d.getDate(), p, 2);\n  }\n\n  function formatHour24(d, p) {\n    return pad(d.getHours(), p, 2);\n  }\n\n  function formatHour12(d, p) {\n    return pad(d.getHours() % 12 || 12, p, 2);\n  }\n\n  function formatDayOfYear(d, p) {\n    return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);\n  }\n\n  function formatMilliseconds(d, p) {\n    return pad(d.getMilliseconds(), p, 3);\n  }\n\n  function formatMonthNumber(d, p) {\n    return pad(d.getMonth() + 1, p, 2);\n  }\n\n  function formatMinutes(d, p) {\n    return pad(d.getMinutes(), p, 2);\n  }\n\n  function formatSeconds(d, p) {\n    return pad(d.getSeconds(), p, 2);\n  }\n\n  function formatWeekNumberSunday(d, p) {\n    return pad(d3Time.timeSunday.count(d3Time.timeYear(d), d), p, 2);\n  }\n\n  function formatWeekdayNumber(d) {\n    return d.getDay();\n  }\n\n  function formatWeekNumberMonday(d, p) {\n    return pad(d3Time.timeMonday.count(d3Time.timeYear(d), d), p, 2);\n  }\n\n  function formatYear(d, p) {\n    return pad(d.getFullYear() % 100, p, 2);\n  }\n\n  function formatFullYear(d, p) {\n    return pad(d.getFullYear() % 10000, p, 4);\n  }\n\n  function formatZone(d) {\n    var z = d.getTimezoneOffset();\n    return (z > 0 ? \"-\" : (z *= -1, \"+\")) + pad(z / 60 | 0, \"0\", 2) + pad(z % 60, \"0\", 2);\n  }\n\n  function formatUTCDayOfMonth(d, p) {\n    return pad(d.getUTCDate(), p, 2);\n  }\n\n  function formatUTCHour24(d, p) {\n    return pad(d.getUTCHours(), p, 2);\n  }\n\n  function formatUTCHour12(d, p) {\n    return pad(d.getUTCHours() % 12 || 12, p, 2);\n  }\n\n  function formatUTCDayOfYear(d, p) {\n    return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);\n  }\n\n  function formatUTCMilliseconds(d, p) {\n    return pad(d.getUTCMilliseconds(), p, 3);\n  }\n\n  function formatUTCMonthNumber(d, p) {\n    return pad(d.getUTCMonth() + 1, p, 2);\n  }\n\n  function formatUTCMinutes(d, p) {\n    return pad(d.getUTCMinutes(), p, 2);\n  }\n\n  function formatUTCSeconds(d, p) {\n    return pad(d.getUTCSeconds(), p, 2);\n  }\n\n  function formatUTCWeekNumberSunday(d, p) {\n    return pad(d3Time.utcSunday.count(d3Time.utcYear(d), d), p, 2);\n  }\n\n  function formatUTCWeekdayNumber(d) {\n    return d.getUTCDay();\n  }\n\n  function formatUTCWeekNumberMonday(d, p) {\n    return pad(d3Time.utcMonday.count(d3Time.utcYear(d), d), p, 2);\n  }\n\n  function formatUTCYear(d, p) {\n    return pad(d.getUTCFullYear() % 100, p, 2);\n  }\n\n  function formatUTCFullYear(d, p) {\n    return pad(d.getUTCFullYear() % 10000, p, 4);\n  }\n\n  function formatUTCZone() {\n    return \"+0000\";\n  }\n\n  function formatLiteralPercent() {\n    return \"%\";\n  }\n\n  var locale$1;\n\n  defaultLocale({\n    dateTime: \"%x, %X\",\n    date: \"%-m/%-d/%Y\",\n    time: \"%-I:%M:%S %p\",\n    periods: [\"AM\", \"PM\"],\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  });\n\n  function defaultLocale(definition) {\n    locale$1 = formatLocale(definition);\n    exports.timeFormat = locale$1.format;\n    exports.timeParse = locale$1.parse;\n    exports.utcFormat = locale$1.utcFormat;\n    exports.utcParse = locale$1.utcParse;\n    return locale$1;\n  }\n\n  var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\n  function formatIsoNative(date) {\n    return date.toISOString();\n  }\n\n  var formatIso = Date.prototype.toISOString ? formatIsoNative : exports.utcFormat(isoSpecifier);\n\n  function parseIsoNative(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  }\n\n  var parseIso = +new Date(\"2000-01-01T00:00:00.000Z\") ? parseIsoNative : exports.utcParse(isoSpecifier);\n\n  exports.timeFormatDefaultLocale = defaultLocale;\n  exports.timeFormatLocale = formatLocale;\n  exports.isoFormat = formatIso;\n  exports.isoParse = parseIso;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-time":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time/build/d3-time.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-zoom/build/d3-zoom.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-zoom/build/d3-zoom.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-zoom/ Version 1.6.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-drag'), require('d3-interpolate'), require('d3-selection'), require('d3-transition')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) : factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3);\n})(undefined, function (exports, d3Dispatch, d3Drag, d3Interpolate, d3Selection, d3Transition) {\n  'use strict';\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  function ZoomEvent(target, type, transform) {\n    this.target = target;\n    this.type = type;\n    this.transform = transform;\n  }\n\n  function Transform(k, x, y) {\n    this.k = k;\n    this.x = x;\n    this.y = y;\n  }\n\n  Transform.prototype = {\n    constructor: Transform,\n    scale: function scale(k) {\n      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n    },\n    translate: function translate(x, y) {\n      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n    },\n    apply: function apply(point) {\n      return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n    },\n    applyX: function applyX(x) {\n      return x * this.k + this.x;\n    },\n    applyY: function applyY(y) {\n      return y * this.k + this.y;\n    },\n    invert: function invert(location) {\n      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n    },\n    invertX: function invertX(x) {\n      return (x - this.x) / this.k;\n    },\n    invertY: function invertY(y) {\n      return (y - this.y) / this.k;\n    },\n    rescaleX: function rescaleX(x) {\n      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n    },\n    rescaleY: function rescaleY(y) {\n      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n    },\n    toString: function toString() {\n      return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n    }\n  };\n\n  var identity = new Transform(1, 0, 0);\n\n  transform.prototype = Transform.prototype;\n\n  function transform(node) {\n    return node.__zoom || identity;\n  }\n\n  function nopropagation() {\n    d3Selection.event.stopImmediatePropagation();\n  }\n\n  var noevent = function noevent() {\n    d3Selection.event.preventDefault();\n    d3Selection.event.stopImmediatePropagation();\n  };\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter() {\n    return !d3Selection.event.button;\n  }\n\n  function defaultExtent() {\n    var e = this,\n        w,\n        h;\n    if (e instanceof SVGElement) {\n      e = e.ownerSVGElement || e;\n      w = e.width.baseVal.value;\n      h = e.height.baseVal.value;\n    } else {\n      w = e.clientWidth;\n      h = e.clientHeight;\n    }\n    return [[0, 0], [w, h]];\n  }\n\n  function defaultTransform() {\n    return this.__zoom || identity;\n  }\n\n  function defaultWheelDelta() {\n    return -d3Selection.event.deltaY * (d3Selection.event.deltaMode ? 120 : 1) / 500;\n  }\n\n  function defaultTouchable() {\n    return \"ontouchstart\" in this;\n  }\n\n  var zoom = function zoom() {\n    var filter = defaultFilter,\n        extent = defaultExtent,\n        wheelDelta = defaultWheelDelta,\n        touchable = defaultTouchable,\n        k0 = 0,\n        k1 = Infinity,\n        x0 = -k1,\n        x1 = k1,\n        y0 = x0,\n        y1 = x1,\n        duration = 250,\n        interpolate = d3Interpolate.interpolateZoom,\n        gestures = [],\n        listeners = d3Dispatch.dispatch(\"start\", \"zoom\", \"end\"),\n        touchstarting,\n        touchending,\n        touchDelay = 500,\n        wheelDelay = 150,\n        clickDistance2 = 0;\n\n    function zoom(selection) {\n      selection.property(\"__zoom\", defaultTransform).on(\"wheel.zoom\", wheeled).on(\"mousedown.zoom\", mousedowned).on(\"dblclick.zoom\", dblclicked).filter(touchable).on(\"touchstart.zoom\", touchstarted).on(\"touchmove.zoom\", touchmoved).on(\"touchend.zoom touchcancel.zoom\", touchended).style(\"touch-action\", \"none\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n    }\n\n    zoom.transform = function (collection, transform$$1) {\n      var selection = collection.selection ? collection.selection() : collection;\n      selection.property(\"__zoom\", defaultTransform);\n      if (collection !== selection) {\n        schedule(collection, transform$$1);\n      } else {\n        selection.interrupt().each(function () {\n          gesture(this, arguments).start().zoom(null, typeof transform$$1 === \"function\" ? transform$$1.apply(this, arguments) : transform$$1).end();\n        });\n      }\n    };\n\n    zoom.scaleBy = function (selection, k) {\n      zoom.scaleTo(selection, function () {\n        var k0 = this.__zoom.k,\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return k0 * k1;\n      });\n    };\n\n    zoom.scaleTo = function (selection, k) {\n      zoom.transform(selection, function () {\n        var e = extent.apply(this, arguments),\n            t0 = this.__zoom,\n            p0 = centroid(e),\n            p1 = t0.invert(p0),\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return constrain(translate(scale(t0, k1), p0, p1), e);\n      });\n    };\n\n    zoom.translateBy = function (selection, x, y) {\n      zoom.transform(selection, function () {\n        return constrain(this.__zoom.translate(typeof x === \"function\" ? x.apply(this, arguments) : x, typeof y === \"function\" ? y.apply(this, arguments) : y), extent.apply(this, arguments));\n      });\n    };\n\n    zoom.translateTo = function (selection, x, y) {\n      zoom.transform(selection, function () {\n        var e = extent.apply(this, arguments),\n            t = this.__zoom,\n            p = centroid(e);\n        return constrain(identity.translate(p[0], p[1]).scale(t.k).translate(typeof x === \"function\" ? -x.apply(this, arguments) : -x, typeof y === \"function\" ? -y.apply(this, arguments) : -y), e);\n      });\n    };\n\n    function scale(transform$$1, k) {\n      k = Math.max(k0, Math.min(k1, k));\n      return k === transform$$1.k ? transform$$1 : new Transform(k, transform$$1.x, transform$$1.y);\n    }\n\n    function translate(transform$$1, p0, p1) {\n      var x = p0[0] - p1[0] * transform$$1.k,\n          y = p0[1] - p1[1] * transform$$1.k;\n      return x === transform$$1.x && y === transform$$1.y ? transform$$1 : new Transform(transform$$1.k, x, y);\n    }\n\n    function constrain(transform$$1, extent) {\n      var dx0 = transform$$1.invertX(extent[0][0]) - x0,\n          dx1 = transform$$1.invertX(extent[1][0]) - x1,\n          dy0 = transform$$1.invertY(extent[0][1]) - y0,\n          dy1 = transform$$1.invertY(extent[1][1]) - y1;\n      return transform$$1.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));\n    }\n\n    function centroid(extent) {\n      return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n    }\n\n    function schedule(transition, transform$$1, center) {\n      transition.on(\"start.zoom\", function () {\n        gesture(this, arguments).start();\n      }).on(\"interrupt.zoom end.zoom\", function () {\n        gesture(this, arguments).end();\n      }).tween(\"zoom\", function () {\n        var that = this,\n            args = arguments,\n            g = gesture(that, args),\n            e = extent.apply(that, args),\n            p = center || centroid(e),\n            w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n            a = that.__zoom,\n            b = typeof transform$$1 === \"function\" ? transform$$1.apply(that, args) : transform$$1,\n            i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n        return function (t) {\n          if (t === 1) t = b; // Avoid rounding error on end.\n          else {\n              var l = i(t),\n                  k = w / l[2];t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);\n            }\n          g.zoom(null, t);\n        };\n      });\n    }\n\n    function gesture(that, args) {\n      for (var i = 0, n = gestures.length, g; i < n; ++i) {\n        if ((g = gestures[i]).that === that) {\n          return g;\n        }\n      }\n      return new Gesture(that, args);\n    }\n\n    function Gesture(that, args) {\n      this.that = that;\n      this.args = args;\n      this.index = -1;\n      this.active = 0;\n      this.extent = extent.apply(that, args);\n    }\n\n    Gesture.prototype = {\n      start: function start() {\n        if (++this.active === 1) {\n          this.index = gestures.push(this) - 1;\n          this.emit(\"start\");\n        }\n        return this;\n      },\n      zoom: function zoom(key, transform$$1) {\n        if (this.mouse && key !== \"mouse\") this.mouse[1] = transform$$1.invert(this.mouse[0]);\n        if (this.touch0 && key !== \"touch\") this.touch0[1] = transform$$1.invert(this.touch0[0]);\n        if (this.touch1 && key !== \"touch\") this.touch1[1] = transform$$1.invert(this.touch1[0]);\n        this.that.__zoom = transform$$1;\n        this.emit(\"zoom\");\n        return this;\n      },\n      end: function end() {\n        if (--this.active === 0) {\n          gestures.splice(this.index, 1);\n          this.index = -1;\n          this.emit(\"end\");\n        }\n        return this;\n      },\n      emit: function emit(type) {\n        d3Selection.customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function wheeled() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          t = this.__zoom,\n          k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\n          p = d3Selection.mouse(this);\n\n      // If the mouse is in the same location as before, reuse it.\n      // If there were recent wheel events, reset the wheel idle timeout.\n      if (g.wheel) {\n        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\n          g.mouse[1] = t.invert(g.mouse[0] = p);\n        }\n        clearTimeout(g.wheel);\n      }\n\n      // If this wheel event won’t trigger a transform change, ignore it.\n      else if (t.k === k) return;\n\n        // Otherwise, capture the mouse point and location at the start.\n        else {\n            g.mouse = [p, t.invert(p)];\n            d3Transition.interrupt(this);\n            g.start();\n          }\n\n      noevent();\n      g.wheel = setTimeout(wheelidled, wheelDelay);\n      g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));\n\n      function wheelidled() {\n        g.wheel = null;\n        g.end();\n      }\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          v = d3Selection.select(d3Selection.event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\n          p = d3Selection.mouse(this),\n          x0 = d3Selection.event.clientX,\n          y0 = d3Selection.event.clientY;\n\n      d3Drag.dragDisable(d3Selection.event.view);\n      nopropagation();\n      g.mouse = [p, this.__zoom.invert(p)];\n      d3Transition.interrupt(this);\n      g.start();\n\n      function mousemoved() {\n        noevent();\n        if (!g.moved) {\n          var dx = d3Selection.event.clientX - x0,\n              dy = d3Selection.event.clientY - y0;\n          g.moved = dx * dx + dy * dy > clickDistance2;\n        }\n        g.zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = d3Selection.mouse(g.that), g.mouse[1]), g.extent));\n      }\n\n      function mouseupped() {\n        v.on(\"mousemove.zoom mouseup.zoom\", null);\n        d3Drag.dragEnable(d3Selection.event.view, g.moved);\n        noevent();\n        g.end();\n      }\n    }\n\n    function dblclicked() {\n      if (!filter.apply(this, arguments)) return;\n      var t0 = this.__zoom,\n          p0 = d3Selection.mouse(this),\n          p1 = t0.invert(p0),\n          k1 = t0.k * (d3Selection.event.shiftKey ? 0.5 : 2),\n          t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));\n\n      noevent();\n      if (duration > 0) d3Selection.select(this).transition().duration(duration).call(schedule, t1, p0);else d3Selection.select(this).call(zoom.transform, t1);\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          touches = d3Selection.event.changedTouches,\n          started,\n          n = touches.length,\n          i,\n          t,\n          p;\n\n      nopropagation();\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = d3Selection.touch(this, touches, t.identifier);\n        p = [p, this.__zoom.invert(p), t.identifier];\n        if (!g.touch0) g.touch0 = p, started = true;else if (!g.touch1) g.touch1 = p;\n      }\n\n      // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.\n      if (touchstarting) {\n        touchstarting = clearTimeout(touchstarting);\n        if (!g.touch1) {\n          g.end();\n          p = d3Selection.select(this).on(\"dblclick.zoom\");\n          if (p) p.apply(this, arguments);\n          return;\n        }\n      }\n\n      if (started) {\n        touchstarting = setTimeout(function () {\n          touchstarting = null;\n        }, touchDelay);\n        d3Transition.interrupt(this);\n        g.start();\n      }\n    }\n\n    function touchmoved() {\n      var g = gesture(this, arguments),\n          touches = d3Selection.event.changedTouches,\n          n = touches.length,\n          i,\n          t,\n          p,\n          l;\n\n      noevent();\n      if (touchstarting) touchstarting = clearTimeout(touchstarting);\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = d3Selection.touch(this, touches, t.identifier);\n        if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n      }\n      t = g.that.__zoom;\n      if (g.touch1) {\n        var p0 = g.touch0[0],\n            l0 = g.touch0[1],\n            p1 = g.touch1[0],\n            l1 = g.touch1[1],\n            dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n            dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n        t = scale(t, Math.sqrt(dp / dl));\n        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n      } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];else return;\n      g.zoom(\"touch\", constrain(translate(t, p, l), g.extent));\n    }\n\n    function touchended() {\n      var g = gesture(this, arguments),\n          touches = d3Selection.event.changedTouches,\n          n = touches.length,\n          i,\n          t;\n\n      nopropagation();\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function () {\n        touchending = null;\n      }, touchDelay);\n      for (i = 0; i < n; ++i) {\n        t = touches[i];\n        if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n      }\n      if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n      if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);else g.end();\n    }\n\n    zoom.wheelDelta = function (_) {\n      return arguments.length ? (wheelDelta = typeof _ === \"function\" ? _ : constant(+_), zoom) : wheelDelta;\n    };\n\n    zoom.filter = function (_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), zoom) : filter;\n    };\n\n    zoom.touchable = function (_) {\n      return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), zoom) : touchable;\n    };\n\n    zoom.extent = function (_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n    };\n\n    zoom.scaleExtent = function (_) {\n      return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];\n    };\n\n    zoom.translateExtent = function (_) {\n      return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];\n    };\n\n    zoom.duration = function (_) {\n      return arguments.length ? (duration = +_, zoom) : duration;\n    };\n\n    zoom.interpolate = function (_) {\n      return arguments.length ? (interpolate = _, zoom) : interpolate;\n    };\n\n    zoom.on = function () {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? zoom : value;\n    };\n\n    zoom.clickDistance = function (_) {\n      return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\n    };\n\n    return zoom;\n  };\n\n  exports.zoom = zoom;\n  exports.zoomTransform = transform;\n  exports.zoomIdentity = identity;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-drag":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-drag/build/d3-drag.js","d3-dispatch":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js","d3-selection":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-selection/build/d3-selection.js","d3-interpolate":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-interpolate/build/d3-interpolate.js","d3-transition":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-transition/build/d3-transition.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-geo/build/d3-geo.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-geo/build/d3-geo.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-geo/ Version 1.8.1. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) : factory(global.d3 = global.d3 || {}, global.d3);\n})(undefined, function (exports, d3Array) {\n  'use strict';\n\n  // Adds floating point numbers with twice the normal precision.\n  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n  // 305–363 (1997).\n  // Code adapted from GeographicLib by Charles F. F. Karney,\n  // http://geographiclib.sourceforge.net/\n\n  var adder = function adder() {\n    return new Adder();\n  };\n\n  function Adder() {\n    this.reset();\n  }\n\n  Adder.prototype = {\n    constructor: Adder,\n    reset: function reset() {\n      this.s = // rounded value\n      this.t = 0; // exact error\n    },\n    add: function add(y) {\n      _add(temp, y, this.t);\n      _add(this, temp.s, this.s);\n      if (this.s) this.t += temp.t;else this.s = temp.t;\n    },\n    valueOf: function valueOf() {\n      return this.s;\n    }\n  };\n\n  var temp = new Adder();\n\n  function _add(adder, a, b) {\n    var x = adder.s = a + b,\n        bv = x - a,\n        av = x - bv;\n    adder.t = a - av + (b - bv);\n  }\n\n  var epsilon = 1e-6;\n  var epsilon2 = 1e-12;\n  var pi = Math.PI;\n  var halfPi = pi / 2;\n  var quarterPi = pi / 4;\n  var tau = pi * 2;\n\n  var degrees = 180 / pi;\n  var radians = pi / 180;\n\n  var abs = Math.abs;\n  var atan = Math.atan;\n  var atan2 = Math.atan2;\n  var cos = Math.cos;\n  var ceil = Math.ceil;\n  var exp = Math.exp;\n\n  var log = Math.log;\n  var pow = Math.pow;\n  var sin = Math.sin;\n  var sign = Math.sign || function (x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  };\n  var sqrt = Math.sqrt;\n  var tan = Math.tan;\n\n  function acos(x) {\n    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n  }\n\n  function asin(x) {\n    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n  }\n\n  function haversin(x) {\n    return (x = sin(x / 2)) * x;\n  }\n\n  function noop() {}\n\n  function streamGeometry(geometry, stream) {\n    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n      streamGeometryType[geometry.type](geometry, stream);\n    }\n  }\n\n  var streamObjectType = {\n    Feature: function Feature(object, stream) {\n      streamGeometry(object.geometry, stream);\n    },\n    FeatureCollection: function FeatureCollection(object, stream) {\n      var features = object.features,\n          i = -1,\n          n = features.length;\n      while (++i < n) {\n        streamGeometry(features[i].geometry, stream);\n      }\n    }\n  };\n\n  var streamGeometryType = {\n    Sphere: function Sphere(object, stream) {\n      stream.sphere();\n    },\n    Point: function Point(object, stream) {\n      object = object.coordinates;\n      stream.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function MultiPoint(object, stream) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n      while (++i < n) {\n        object = coordinates[i], stream.point(object[0], object[1], object[2]);\n      }\n    },\n    LineString: function LineString(object, stream) {\n      streamLine(object.coordinates, stream, 0);\n    },\n    MultiLineString: function MultiLineString(object, stream) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n      while (++i < n) {\n        streamLine(coordinates[i], stream, 0);\n      }\n    },\n    Polygon: function Polygon(object, stream) {\n      streamPolygon(object.coordinates, stream);\n    },\n    MultiPolygon: function MultiPolygon(object, stream) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n      while (++i < n) {\n        streamPolygon(coordinates[i], stream);\n      }\n    },\n    GeometryCollection: function GeometryCollection(object, stream) {\n      var geometries = object.geometries,\n          i = -1,\n          n = geometries.length;\n      while (++i < n) {\n        streamGeometry(geometries[i], stream);\n      }\n    }\n  };\n\n  function streamLine(coordinates, stream, closed) {\n    var i = -1,\n        n = coordinates.length - closed,\n        coordinate;\n    stream.lineStart();\n    while (++i < n) {\n      coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n    }stream.lineEnd();\n  }\n\n  function streamPolygon(coordinates, stream) {\n    var i = -1,\n        n = coordinates.length;\n    stream.polygonStart();\n    while (++i < n) {\n      streamLine(coordinates[i], stream, 1);\n    }stream.polygonEnd();\n  }\n\n  var geoStream = function geoStream(object, stream) {\n    if (object && streamObjectType.hasOwnProperty(object.type)) {\n      streamObjectType[object.type](object, stream);\n    } else {\n      streamGeometry(object, stream);\n    }\n  };\n\n  var areaRingSum = adder();\n\n  var areaSum = adder();\n  var lambda00;\n  var phi00;\n  var lambda0;\n  var cosPhi0;\n  var sinPhi0;\n\n  var areaStream = {\n    point: noop,\n    lineStart: noop,\n    lineEnd: noop,\n    polygonStart: function polygonStart() {\n      areaRingSum.reset();\n      areaStream.lineStart = areaRingStart;\n      areaStream.lineEnd = areaRingEnd;\n    },\n    polygonEnd: function polygonEnd() {\n      var areaRing = +areaRingSum;\n      areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n      this.lineStart = this.lineEnd = this.point = noop;\n    },\n    sphere: function sphere() {\n      areaSum.add(tau);\n    }\n  };\n\n  function areaRingStart() {\n    areaStream.point = areaPointFirst;\n  }\n\n  function areaRingEnd() {\n    areaPoint(lambda00, phi00);\n  }\n\n  function areaPointFirst(lambda, phi) {\n    areaStream.point = areaPoint;\n    lambda00 = lambda, phi00 = phi;\n    lambda *= radians, phi *= radians;\n    lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n  }\n\n  function areaPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    var dLambda = lambda - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        cosPhi = cos(phi),\n        sinPhi = sin(phi),\n        k = sinPhi0 * sinPhi,\n        u = cosPhi0 * cosPhi + k * cos(adLambda),\n        v = k * sdLambda * sin(adLambda);\n    areaRingSum.add(atan2(v, u));\n\n    // Advance the previous points.\n    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n  }\n\n  var area = function area(object) {\n    areaSum.reset();\n    geoStream(object, areaStream);\n    return areaSum * 2;\n  };\n\n  function spherical(cartesian) {\n    return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n  }\n\n  function cartesian(spherical) {\n    var lambda = spherical[0],\n        phi = spherical[1],\n        cosPhi = cos(phi);\n    return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n  }\n\n  function cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  function cartesianCross(a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  }\n\n  // TODO return a\n  function cartesianAddInPlace(a, b) {\n    a[0] += b[0], a[1] += b[1], a[2] += b[2];\n  }\n\n  function cartesianScale(vector, k) {\n    return [vector[0] * k, vector[1] * k, vector[2] * k];\n  }\n\n  // TODO return d\n  function cartesianNormalizeInPlace(d) {\n    var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l, d[1] /= l, d[2] /= l;\n  }\n\n  var lambda0$1;\n  var phi0;\n  var lambda1;\n  var phi1;\n  var lambda2;\n  var lambda00$1;\n  var phi00$1;\n  var p0;\n  var deltaSum = adder();\n  var ranges;\n  var range$1;\n\n  var boundsStream = {\n    point: boundsPoint,\n    lineStart: boundsLineStart,\n    lineEnd: boundsLineEnd,\n    polygonStart: function polygonStart() {\n      boundsStream.point = boundsRingPoint;\n      boundsStream.lineStart = boundsRingStart;\n      boundsStream.lineEnd = boundsRingEnd;\n      deltaSum.reset();\n      areaStream.polygonStart();\n    },\n    polygonEnd: function polygonEnd() {\n      areaStream.polygonEnd();\n      boundsStream.point = boundsPoint;\n      boundsStream.lineStart = boundsLineStart;\n      boundsStream.lineEnd = boundsLineEnd;\n      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > epsilon) phi1 = 90;else if (deltaSum < -epsilon) phi0 = -90;\n      range$1[0] = lambda0$1, range$1[1] = lambda1;\n    }\n  };\n\n  function boundsPoint(lambda, phi) {\n    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n  }\n\n  function linePoint(lambda, phi) {\n    var p = cartesian([lambda * radians, phi * radians]);\n    if (p0) {\n      var normal = cartesianCross(p0, p),\n          equatorial = [normal[1], -normal[0], 0],\n          inflection = cartesianCross(equatorial, normal);\n      cartesianNormalizeInPlace(inflection);\n      inflection = spherical(inflection);\n      var delta = lambda - lambda2,\n          sign$$1 = delta > 0 ? 1 : -1,\n          lambdai = inflection[0] * degrees * sign$$1,\n          phii,\n          antimeridian = abs(delta) > 180;\n      if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\n        phii = inflection[1] * degrees;\n        if (phii > phi1) phi1 = phii;\n      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {\n        phii = -inflection[1] * degrees;\n        if (phii < phi0) phi0 = phii;\n      } else {\n        if (phi < phi0) phi0 = phi;\n        if (phi > phi1) phi1 = phi;\n      }\n      if (antimeridian) {\n        if (lambda < lambda2) {\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n        }\n      } else {\n        if (lambda1 >= lambda0$1) {\n          if (lambda < lambda0$1) lambda0$1 = lambda;\n          if (lambda > lambda1) lambda1 = lambda;\n        } else {\n          if (lambda > lambda2) {\n            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n          } else {\n            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n          }\n        }\n      }\n    } else {\n      ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n    }\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n    p0 = p, lambda2 = lambda;\n  }\n\n  function boundsLineStart() {\n    boundsStream.point = linePoint;\n  }\n\n  function boundsLineEnd() {\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    boundsStream.point = boundsPoint;\n    p0 = null;\n  }\n\n  function boundsRingPoint(lambda, phi) {\n    if (p0) {\n      var delta = lambda - lambda2;\n      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n    } else {\n      lambda00$1 = lambda, phi00$1 = phi;\n    }\n    areaStream.point(lambda, phi);\n    linePoint(lambda, phi);\n  }\n\n  function boundsRingStart() {\n    areaStream.lineStart();\n  }\n\n  function boundsRingEnd() {\n    boundsRingPoint(lambda00$1, phi00$1);\n    areaStream.lineEnd();\n    if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    p0 = null;\n  }\n\n  // Finds the left-right distance between two longitudes.\n  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n  // the distance between ±180° to be 360°.\n  function angle(lambda0, lambda1) {\n    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n  }\n\n  function rangeCompare(a, b) {\n    return a[0] - b[0];\n  }\n\n  function rangeContains(range$$1, x) {\n    return range$$1[0] <= range$$1[1] ? range$$1[0] <= x && x <= range$$1[1] : x < range$$1[0] || range$$1[1] < x;\n  }\n\n  var bounds = function bounds(feature) {\n    var i, n, a, b, merged, deltaMax, delta;\n\n    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n    ranges = [];\n    geoStream(feature, boundsStream);\n\n    // First, sort ranges by their minimum longitudes.\n    if (n = ranges.length) {\n      ranges.sort(rangeCompare);\n\n      // Then, merge any ranges that overlap.\n      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n        b = ranges[i];\n        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n        } else {\n          merged.push(a = b);\n        }\n      }\n\n      // Finally, find the largest gap between the merged ranges.\n      // The final bounding box will be the inverse of this gap.\n      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n        b = merged[i];\n        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n      }\n    }\n\n    ranges = range$1 = null;\n\n    return lambda0$1 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0$1, phi0], [lambda1, phi1]];\n  };\n\n  var W0;\n  var W1;\n  var X0;\n  var Y0;\n  var Z0;\n  var X1;\n  var Y1;\n  var Z1;\n  var X2;\n  var Y2;\n  var Z2;\n  var lambda00$2;\n  var phi00$2;\n  var x0;\n  var y0;\n  var z0; // previous point\n\n  var centroidStream = {\n    sphere: noop,\n    point: centroidPoint,\n    lineStart: centroidLineStart,\n    lineEnd: centroidLineEnd,\n    polygonStart: function polygonStart() {\n      centroidStream.lineStart = centroidRingStart;\n      centroidStream.lineEnd = centroidRingEnd;\n    },\n    polygonEnd: function polygonEnd() {\n      centroidStream.lineStart = centroidLineStart;\n      centroidStream.lineEnd = centroidLineEnd;\n    }\n  };\n\n  // Arithmetic mean of Cartesian vectors.\n  function centroidPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos(phi);\n    centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n  }\n\n  function centroidPointCartesian(x, y, z) {\n    ++W0;\n    X0 += (x - X0) / W0;\n    Y0 += (y - Y0) / W0;\n    Z0 += (z - Z0) / W0;\n  }\n\n  function centroidLineStart() {\n    centroidStream.point = centroidLinePointFirst;\n  }\n\n  function centroidLinePointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos(phi);\n    x0 = cosPhi * cos(lambda);\n    y0 = cosPhi * sin(lambda);\n    z0 = sin(phi);\n    centroidStream.point = centroidLinePoint;\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLinePoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos(phi),\n        x = cosPhi * cos(lambda),\n        y = cosPhi * sin(lambda),\n        z = sin(phi),\n        w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLineEnd() {\n    centroidStream.point = centroidPoint;\n  }\n\n  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n  // J. Applied Mechanics 42, 239 (1975).\n  function centroidRingStart() {\n    centroidStream.point = centroidRingPointFirst;\n  }\n\n  function centroidRingEnd() {\n    centroidRingPoint(lambda00$2, phi00$2);\n    centroidStream.point = centroidPoint;\n  }\n\n  function centroidRingPointFirst(lambda, phi) {\n    lambda00$2 = lambda, phi00$2 = phi;\n    lambda *= radians, phi *= radians;\n    centroidStream.point = centroidRingPoint;\n    var cosPhi = cos(phi);\n    x0 = cosPhi * cos(lambda);\n    y0 = cosPhi * sin(lambda);\n    z0 = sin(phi);\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidRingPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos(phi),\n        x = cosPhi * cos(lambda),\n        y = cosPhi * sin(lambda),\n        z = sin(phi),\n        cx = y0 * z - z0 * y,\n        cy = z0 * x - x0 * z,\n        cz = x0 * y - y0 * x,\n        m = sqrt(cx * cx + cy * cy + cz * cz),\n        w = asin(m),\n        // line weight = angle\n    v = m && -w / m; // area weight multiplier\n    X2 += v * cx;\n    Y2 += v * cy;\n    Z2 += v * cz;\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  var centroid = function centroid(object) {\n    W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;\n    geoStream(object, centroidStream);\n\n    var x = X2,\n        y = Y2,\n        z = Z2,\n        m = x * x + y * y + z * z;\n\n    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n    if (m < epsilon2) {\n      x = X1, y = Y1, z = Z1;\n      // If the feature has zero length, fall back to arithmetic mean of point vectors.\n      if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n      m = x * x + y * y + z * z;\n      // If the feature still has an undefined ccentroid, then return.\n      if (m < epsilon2) return [NaN, NaN];\n    }\n\n    return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n  };\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n\n  var compose = function compose(a, b) {\n\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n\n    if (a.invert && b.invert) compose.invert = function (x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n\n    return compose;\n  };\n\n  function rotationIdentity(lambda, phi) {\n    return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  }\n\n  rotationIdentity.invert = rotationIdentity;\n\n  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n    return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n  }\n\n  function forwardRotationLambda(deltaLambda) {\n    return function (lambda, phi) {\n      return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n    };\n  }\n\n  function rotationLambda(deltaLambda) {\n    var rotation = forwardRotationLambda(deltaLambda);\n    rotation.invert = forwardRotationLambda(-deltaLambda);\n    return rotation;\n  }\n\n  function rotationPhiGamma(deltaPhi, deltaGamma) {\n    var cosDeltaPhi = cos(deltaPhi),\n        sinDeltaPhi = sin(deltaPhi),\n        cosDeltaGamma = cos(deltaGamma),\n        sinDeltaGamma = sin(deltaGamma);\n\n    function rotation(lambda, phi) {\n      var cosPhi = cos(phi),\n          x = cos(lambda) * cosPhi,\n          y = sin(lambda) * cosPhi,\n          z = sin(phi),\n          k = z * cosDeltaPhi + x * sinDeltaPhi;\n      return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];\n    }\n\n    rotation.invert = function (lambda, phi) {\n      var cosPhi = cos(phi),\n          x = cos(lambda) * cosPhi,\n          y = sin(lambda) * cosPhi,\n          z = sin(phi),\n          k = z * cosDeltaGamma - y * sinDeltaGamma;\n      return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];\n    };\n\n    return rotation;\n  }\n\n  var rotation = function rotation(rotate) {\n    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n    }\n\n    forward.invert = function (coordinates) {\n      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n    };\n\n    return forward;\n  };\n\n  // Generates a circle centered at [0°, 0°], with a given radius and precision.\n  function circleStream(stream, radius, delta, direction, t0, t1) {\n    if (!delta) return;\n    var cosRadius = cos(radius),\n        sinRadius = sin(radius),\n        step = direction * delta;\n    if (t0 == null) {\n      t0 = radius + direction * tau;\n      t1 = radius - step / 2;\n    } else {\n      t0 = circleRadius(cosRadius, t0);\n      t1 = circleRadius(cosRadius, t1);\n      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n    }\n    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n      point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n      stream.point(point[0], point[1]);\n    }\n  }\n\n  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n  function circleRadius(cosRadius, point) {\n    point = cartesian(point), point[0] -= cosRadius;\n    cartesianNormalizeInPlace(point);\n    var radius = acos(-point[1]);\n    return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n  }\n\n  var circle = function circle() {\n    var center = constant([0, 0]),\n        radius = constant(90),\n        precision = constant(6),\n        ring,\n        rotate,\n        stream = { point: point };\n\n    function point(x, y) {\n      ring.push(x = rotate(x, y));\n      x[0] *= degrees, x[1] *= degrees;\n    }\n\n    function circle() {\n      var c = center.apply(this, arguments),\n          r = radius.apply(this, arguments) * radians,\n          p = precision.apply(this, arguments) * radians;\n      ring = [];\n      rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n      circleStream(stream, r, p, 1);\n      c = { type: \"Polygon\", coordinates: [ring] };\n      ring = rotate = null;\n      return c;\n    }\n\n    circle.center = function (_) {\n      return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n    };\n\n    circle.radius = function (_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n    };\n\n    circle.precision = function (_) {\n      return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n    };\n\n    return circle;\n  };\n\n  var clipBuffer = function clipBuffer() {\n    var lines = [],\n        line;\n    return {\n      point: function point(x, y) {\n        line.push([x, y]);\n      },\n      lineStart: function lineStart() {\n        lines.push(line = []);\n      },\n      lineEnd: noop,\n      rejoin: function rejoin() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      },\n      result: function result() {\n        var result = lines;\n        lines = [];\n        line = null;\n        return result;\n      }\n    };\n  };\n\n  var pointEqual = function pointEqual(a, b) {\n    return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n  };\n\n  function Intersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other; // another intersection\n    this.e = entry; // is an entry?\n    this.v = false; // visited\n    this.n = this.p = null; // next & previous\n  }\n\n  // A generalized polygon clipping algorithm: given a polygon that has been cut\n  // into its visible line segments, and rejoins the segments by interpolating\n  // along the clip edge.\n  var clipRejoin = function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {\n    var subject = [],\n        clip = [],\n        i,\n        n;\n\n    segments.forEach(function (segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n,\n          p0 = segment[0],\n          p1 = segment[n],\n          x;\n\n      // If the first and last points of a segment are coincident, then treat as a\n      // closed ring. TODO if all rings are closed, then the winding order of the\n      // exterior ring should be checked.\n      if (pointEqual(p0, p1)) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) {\n          stream.point((p0 = segment[i])[0], p0[1]);\n        }stream.lineEnd();\n        return;\n      }\n\n      subject.push(x = new Intersection(p0, segment, null, true));\n      clip.push(x.o = new Intersection(p0, null, x, false));\n      subject.push(x = new Intersection(p1, segment, null, false));\n      clip.push(x.o = new Intersection(p1, null, x, true));\n    });\n\n    if (!subject.length) return;\n\n    clip.sort(compareIntersection);\n    link(subject);\n    link(clip);\n\n    for (i = 0, n = clip.length; i < n; ++i) {\n      clip[i].e = startInside = !startInside;\n    }\n\n    var start = subject[0],\n        points,\n        point;\n\n    while (1) {\n      // Find first unvisited intersection.\n      var current = start,\n          isSubject = true;\n      while (current.v) {\n        if ((current = current.n) === start) return;\n      }points = current.z;\n      stream.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (i = 0, n = points.length; i < n; ++i) {\n              stream.point((point = points[i])[0], point[1]);\n            }\n          } else {\n            interpolate(current.x, current.n.x, 1, stream);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (i = points.length - 1; i >= 0; --i) {\n              stream.point((point = points[i])[0], point[1]);\n            }\n          } else {\n            interpolate(current.x, current.p.x, -1, stream);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      stream.lineEnd();\n    }\n  };\n\n  function link(array) {\n    if (!(n = array.length)) return;\n    var n,\n        i = 0,\n        a = array[0],\n        b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n\n  var sum = adder();\n\n  var polygonContains = function polygonContains(polygon, point) {\n    var lambda = point[0],\n        phi = point[1],\n        normal = [sin(lambda), -cos(lambda), 0],\n        angle = 0,\n        winding = 0;\n\n    sum.reset();\n\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      if (!(m = (ring = polygon[i]).length)) continue;\n      var ring,\n          m,\n          point0 = ring[m - 1],\n          lambda0 = point0[0],\n          phi0 = point0[1] / 2 + quarterPi,\n          sinPhi0 = sin(phi0),\n          cosPhi0 = cos(phi0);\n\n      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n        var point1 = ring[j],\n            lambda1 = point1[0],\n            phi1 = point1[1] / 2 + quarterPi,\n            sinPhi1 = sin(phi1),\n            cosPhi1 = cos(phi1),\n            delta = lambda1 - lambda0,\n            sign$$1 = delta >= 0 ? 1 : -1,\n            absDelta = sign$$1 * delta,\n            antimeridian = absDelta > pi,\n            k = sinPhi0 * sinPhi1;\n\n        sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n        angle += antimeridian ? delta + sign$$1 * tau : delta;\n\n        // Are the longitudes either side of the point’s meridian (lambda),\n        // and are the latitudes smaller than the parallel (phi)?\n        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n          var arc = cartesianCross(cartesian(point0), cartesian(point1));\n          cartesianNormalizeInPlace(arc);\n          var intersection = cartesianCross(normal, arc);\n          cartesianNormalizeInPlace(intersection);\n          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ delta >= 0 ? 1 : -1;\n          }\n        }\n      }\n    }\n\n    // First, determine whether the South pole is inside or outside:\n    //\n    // It is inside if:\n    // * the polygon winds around it in a clockwise direction.\n    // * the polygon does not (cumulatively) wind around it, but has a negative\n    //   (counter-clockwise) area.\n    //\n    // Second, count the (signed) number of times a segment crosses a lambda\n    // from the point to the South pole.  If it is zero, then the point is the\n    // same side as the South pole.\n\n    return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ winding & 1;\n  };\n\n  var clip = function clip(pointVisible, clipLine, interpolate, start) {\n    return function (sink) {\n      var line = clipLine(sink),\n          ringBuffer = clipBuffer(),\n          ringSink = clipLine(ringBuffer),\n          polygonStarted = false,\n          polygon,\n          segments,\n          ring;\n\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function polygonStart() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function polygonEnd() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3Array.merge(segments);\n          var startInside = polygonContains(polygon, start);\n          if (segments.length) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n          } else if (startInside) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            interpolate(null, null, 1, sink);\n            sink.lineEnd();\n          }\n          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function sphere() {\n          sink.polygonStart();\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n          sink.polygonEnd();\n        }\n      };\n\n      function point(lambda, phi) {\n        if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n      }\n\n      function pointLine(lambda, phi) {\n        line.point(lambda, phi);\n      }\n\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n\n      function pointRing(lambda, phi) {\n        ring.push([lambda, phi]);\n        ringSink.point(lambda, phi);\n      }\n\n      function ringStart() {\n        ringSink.lineStart();\n        ring = [];\n      }\n\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringSink.lineEnd();\n\n        var clean = ringSink.clean(),\n            ringSegments = ringBuffer.result(),\n            i,\n            n = ringSegments.length,\n            m,\n            segment,\n            point;\n\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n\n        if (!n) return;\n\n        // No intersections.\n        if (clean & 1) {\n          segment = ringSegments[0];\n          if ((m = segment.length - 1) > 0) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            for (i = 0; i < m; ++i) {\n              sink.point((point = segment[i])[0], point[1]);\n            }sink.lineEnd();\n          }\n          return;\n        }\n\n        // Rejoin connected segments.\n        // TODO reuse ringBuffer.rejoin()?\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n        segments.push(ringSegments.filter(validSegment));\n      }\n\n      return clip;\n    };\n  };\n\n  function validSegment(segment) {\n    return segment.length > 1;\n  }\n\n  // Intersections are sorted along the clip edge. For both antimeridian cutting\n  // and circle clipping, the same comparison is used.\n  function compareIntersection(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n  }\n\n  var clipAntimeridian = clip(function () {\n    return true;\n  }, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]);\n\n  // Takes a line and cuts into visible segments. Return values: 0 - there were\n  // intersections or the line was empty; 1 - no intersections; 2 - there were\n  // intersections, and the first and last segments should be rejoined.\n  function clipAntimeridianLine(stream) {\n    var lambda0 = NaN,\n        phi0 = NaN,\n        sign0 = NaN,\n        _clean; // no intersections\n\n    return {\n      lineStart: function lineStart() {\n        stream.lineStart();\n        _clean = 1;\n      },\n      point: function point(lambda1, phi1) {\n        var sign1 = lambda1 > 0 ? pi : -pi,\n            delta = abs(lambda1 - lambda0);\n        if (abs(delta - pi) < epsilon) {\n          // line crosses a pole\n          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          stream.point(lambda1, phi0);\n          _clean = 0;\n        } else if (sign0 !== sign1 && delta >= pi) {\n          // line crosses antimeridian\n          if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n          if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n          stream.point(sign0, phi0);\n          stream.lineEnd();\n          stream.lineStart();\n          stream.point(sign1, phi0);\n          _clean = 0;\n        }\n        stream.point(lambda0 = lambda1, phi0 = phi1);\n        sign0 = sign1;\n      },\n      lineEnd: function lineEnd() {\n        stream.lineEnd();\n        lambda0 = phi0 = NaN;\n      },\n      clean: function clean() {\n        return 2 - _clean; // if intersections, rejoin first and last segments\n      }\n    };\n  }\n\n  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n    var cosPhi0,\n        cosPhi1,\n        sinLambda0Lambda1 = sin(lambda0 - lambda1);\n    return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;\n  }\n\n  function clipAntimeridianInterpolate(from, to, direction, stream) {\n    var phi;\n    if (from == null) {\n      phi = direction * halfPi;\n      stream.point(-pi, phi);\n      stream.point(0, phi);\n      stream.point(pi, phi);\n      stream.point(pi, 0);\n      stream.point(pi, -phi);\n      stream.point(0, -phi);\n      stream.point(-pi, -phi);\n      stream.point(-pi, 0);\n      stream.point(-pi, phi);\n    } else if (abs(from[0] - to[0]) > epsilon) {\n      var lambda = from[0] < to[0] ? pi : -pi;\n      phi = direction * lambda / 2;\n      stream.point(-lambda, phi);\n      stream.point(0, phi);\n      stream.point(lambda, phi);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  var clipCircle = function clipCircle(radius) {\n    var cr = cos(radius),\n        delta = 6 * radians,\n        smallRadius = cr > 0,\n        notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n    function interpolate(from, to, direction, stream) {\n      circleStream(stream, radius, delta, direction, from, to);\n    }\n\n    function visible(lambda, phi) {\n      return cos(lambda) * cos(phi) > cr;\n    }\n\n    // Takes a line and cuts into visible segments. Return values used for polygon\n    // clipping: 0 - there were intersections or the line was empty; 1 - no\n    // intersections 2 - there were intersections, and the first and last segments\n    // should be rejoined.\n    function clipLine(stream) {\n      var point0, // previous point\n      c0, // code for previous point\n      v0, // visibility of previous point\n      v00, // visibility of first point\n      _clean2; // no intersections\n      return {\n        lineStart: function lineStart() {\n          v00 = v0 = false;\n          _clean2 = 1;\n        },\n        point: function point(lambda, phi) {\n          var point1 = [lambda, phi],\n              point2,\n              v = visible(lambda, phi),\n              c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n          if (!point0 && (v00 = v0 = v)) stream.lineStart();\n          // Handle degeneracies.\n          // TODO ignore if not clipping polygons.\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n              point1[0] += epsilon;\n              point1[1] += epsilon;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            _clean2 = 0;\n            if (v) {\n              // outside going in\n              stream.lineStart();\n              point2 = intersect(point1, point0);\n              stream.point(point2[0], point2[1]);\n            } else {\n              // inside going out\n              point2 = intersect(point0, point1);\n              stream.point(point2[0], point2[1]);\n              stream.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            // If the codes for two points are different, or are both zero,\n            // and there this segment intersects with the small circle.\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              _clean2 = 0;\n              if (smallRadius) {\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n              } else {\n                stream.point(t[1][0], t[1][1]);\n                stream.lineEnd();\n                stream.lineStart();\n                stream.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !pointEqual(point0, point1))) {\n            stream.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function lineEnd() {\n          if (v0) stream.lineEnd();\n          point0 = null;\n        },\n        // Rejoin first and last segments if there were intersections and the first\n        // and last points were visible.\n        clean: function clean() {\n          return _clean2 | (v00 && v0) << 1;\n        }\n      };\n    }\n\n    // Intersects the great circle between a and b with the clip circle.\n    function intersect(a, b, two) {\n      var pa = cartesian(a),\n          pb = cartesian(b);\n\n      // We have two planes, n1.p = d1 and n2.p = d2.\n      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n      var n1 = [1, 0, 0],\n          // normal\n      n2 = cartesianCross(pa, pb),\n          n2n2 = cartesianDot(n2, n2),\n          n1n2 = n2[0],\n          // cartesianDot(n1, n2),\n      determinant = n2n2 - n1n2 * n1n2;\n\n      // Two polar points.\n      if (!determinant) return !two && a;\n\n      var c1 = cr * n2n2 / determinant,\n          c2 = -cr * n1n2 / determinant,\n          n1xn2 = cartesianCross(n1, n2),\n          A = cartesianScale(n1, c1),\n          B = cartesianScale(n2, c2);\n      cartesianAddInPlace(A, B);\n\n      // Solve |p(t)|^2 = 1.\n      var u = n1xn2,\n          w = cartesianDot(A, u),\n          uu = cartesianDot(u, u),\n          t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n      if (t2 < 0) return;\n\n      var t = sqrt(t2),\n          q = cartesianScale(u, (-w - t) / uu);\n      cartesianAddInPlace(q, A);\n      q = spherical(q);\n\n      if (!two) return q;\n\n      // Two intersection points.\n      var lambda0 = a[0],\n          lambda1 = b[0],\n          phi0 = a[1],\n          phi1 = b[1],\n          z;\n\n      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n      var delta = lambda1 - lambda0,\n          polar = abs(delta - pi) < epsilon,\n          meridian = polar || delta < epsilon;\n\n      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n      // Check that the first point is between a and b.\n      if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n        var q1 = cartesianScale(u, (-w + t) / uu);\n        cartesianAddInPlace(q1, A);\n        return [q, spherical(q1)];\n      }\n    }\n\n    // Generates a 4-bit vector representing the location of a point relative to\n    // the small circle's bounding box.\n    function code(lambda, phi) {\n      var r = smallRadius ? radius : pi - radius,\n          code = 0;\n      if (lambda < -r) code |= 1; // left\n      else if (lambda > r) code |= 2; // right\n      if (phi < -r) code |= 4; // below\n      else if (phi > r) code |= 8; // above\n      return code;\n    }\n\n    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n  };\n\n  var clipLine = function clipLine(a, b, x0, y0, x1, y1) {\n    var ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n    return true;\n  };\n\n  var clipMax = 1e9;\n  var clipMin = -clipMax;\n\n  // TODO Use d3-polygon’s polygonContains here for the ring check?\n  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\n  function clipRectangle(x0, y0, x1, y1) {\n\n    function visible(x, y) {\n      return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n    }\n\n    function interpolate(from, to, direction, stream) {\n      var a = 0,\n          a1 = 0;\n      if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {\n        do {\n          stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n        } while ((a = (a + direction + 4) % 4) !== a1);\n      } else {\n        stream.point(to[0], to[1]);\n      }\n    }\n\n    function corner(p, direction) {\n      return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n    }\n\n    function compareIntersection(a, b) {\n      return comparePoint(a.x, b.x);\n    }\n\n    function comparePoint(a, b) {\n      var ca = corner(a, 1),\n          cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n\n    return function (stream) {\n      var activeStream = stream,\n          bufferStream = clipBuffer(),\n          segments,\n          polygon,\n          ring,\n          x__,\n          y__,\n          v__,\n          // first point\n      x_,\n          y_,\n          v_,\n          // previous point\n      first,\n          clean;\n\n      var clipStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: polygonStart,\n        polygonEnd: polygonEnd\n      };\n\n      function point(x, y) {\n        if (visible(x, y)) activeStream.point(x, y);\n      }\n\n      function polygonInside() {\n        var winding = 0;\n\n        for (var i = 0, n = polygon.length; i < n; ++i) {\n          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n            if (a1 <= y1) {\n              if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;\n            } else {\n              if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;\n            }\n          }\n        }\n\n        return winding;\n      }\n\n      // Buffer geometry within a polygon and then clip it en masse.\n      function polygonStart() {\n        activeStream = bufferStream, segments = [], polygon = [], clean = true;\n      }\n\n      function polygonEnd() {\n        var startInside = polygonInside(),\n            cleanInside = clean && startInside,\n            visible = (segments = d3Array.merge(segments)).length;\n        if (cleanInside || visible) {\n          stream.polygonStart();\n          if (cleanInside) {\n            stream.lineStart();\n            interpolate(null, null, 1, stream);\n            stream.lineEnd();\n          }\n          if (visible) {\n            clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n          }\n          stream.polygonEnd();\n        }\n        activeStream = stream, segments = polygon = ring = null;\n      }\n\n      function lineStart() {\n        clipStream.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n\n      // TODO rather than special-case polygons, simply handle them separately.\n      // Ideally, coincident intersection points should be jittered to avoid\n      // clipping issues.\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferStream.rejoin();\n          segments.push(bufferStream.result());\n        }\n        clipStream.point = point;\n        if (v_) activeStream.lineEnd();\n      }\n\n      function linePoint(x, y) {\n        var v = visible(x, y);\n        if (polygon) ring.push([x, y]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n          }\n        } else {\n          if (v && v_) activeStream.point(x, y);else {\n            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n            if (clipLine(a, b, x0, y0, x1, y1)) {\n              if (!v_) {\n                activeStream.lineStart();\n                activeStream.point(a[0], a[1]);\n              }\n              activeStream.point(b[0], b[1]);\n              if (!v) activeStream.lineEnd();\n              clean = false;\n            } else if (v) {\n              activeStream.lineStart();\n              activeStream.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n\n      return clipStream;\n    };\n  }\n\n  var extent = function extent() {\n    var x0 = 0,\n        y0 = 0,\n        x1 = 960,\n        y1 = 500,\n        cache,\n        cacheStream,\n        clip;\n\n    return clip = {\n      stream: function stream(_stream) {\n        return cache && cacheStream === _stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = _stream);\n      },\n      extent: function extent(_) {\n        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n      }\n    };\n  };\n\n  var lengthSum = adder();\n  var lambda0$2;\n  var sinPhi0$1;\n  var cosPhi0$1;\n\n  var lengthStream = {\n    sphere: noop,\n    point: noop,\n    lineStart: lengthLineStart,\n    lineEnd: noop,\n    polygonStart: noop,\n    polygonEnd: noop\n  };\n\n  function lengthLineStart() {\n    lengthStream.point = lengthPointFirst;\n    lengthStream.lineEnd = lengthLineEnd;\n  }\n\n  function lengthLineEnd() {\n    lengthStream.point = lengthStream.lineEnd = noop;\n  }\n\n  function lengthPointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);\n    lengthStream.point = lengthPoint;\n  }\n\n  function lengthPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        delta = abs(lambda - lambda0$2),\n        cosDelta = cos(delta),\n        sinDelta = sin(delta),\n        x = cosPhi * sinDelta,\n        y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\n        z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\n    lengthSum.add(atan2(sqrt(x * x + y * y), z));\n    lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\n  }\n\n  var length = function length(object) {\n    lengthSum.reset();\n    geoStream(object, lengthStream);\n    return +lengthSum;\n  };\n\n  var coordinates = [null, null];\n  var object = { type: \"LineString\", coordinates: coordinates };\n\n  var distance = function distance(a, b) {\n    coordinates[0] = a;\n    coordinates[1] = b;\n    return length(object);\n  };\n\n  var containsObjectType = {\n    Feature: function Feature(object, point) {\n      return containsGeometry(object.geometry, point);\n    },\n    FeatureCollection: function FeatureCollection(object, point) {\n      var features = object.features,\n          i = -1,\n          n = features.length;\n      while (++i < n) {\n        if (containsGeometry(features[i].geometry, point)) return true;\n      }return false;\n    }\n  };\n\n  var containsGeometryType = {\n    Sphere: function Sphere() {\n      return true;\n    },\n    Point: function Point(object, point) {\n      return containsPoint(object.coordinates, point);\n    },\n    MultiPoint: function MultiPoint(object, point) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n      while (++i < n) {\n        if (containsPoint(coordinates[i], point)) return true;\n      }return false;\n    },\n    LineString: function LineString(object, point) {\n      return containsLine(object.coordinates, point);\n    },\n    MultiLineString: function MultiLineString(object, point) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n      while (++i < n) {\n        if (containsLine(coordinates[i], point)) return true;\n      }return false;\n    },\n    Polygon: function Polygon(object, point) {\n      return containsPolygon(object.coordinates, point);\n    },\n    MultiPolygon: function MultiPolygon(object, point) {\n      var coordinates = object.coordinates,\n          i = -1,\n          n = coordinates.length;\n      while (++i < n) {\n        if (containsPolygon(coordinates[i], point)) return true;\n      }return false;\n    },\n    GeometryCollection: function GeometryCollection(object, point) {\n      var geometries = object.geometries,\n          i = -1,\n          n = geometries.length;\n      while (++i < n) {\n        if (containsGeometry(geometries[i], point)) return true;\n      }return false;\n    }\n  };\n\n  function containsGeometry(geometry, point) {\n    return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;\n  }\n\n  function containsPoint(coordinates, point) {\n    return distance(coordinates, point) === 0;\n  }\n\n  function containsLine(coordinates, point) {\n    var ab = distance(coordinates[0], coordinates[1]),\n        ao = distance(coordinates[0], point),\n        ob = distance(point, coordinates[1]);\n    return ao + ob <= ab + epsilon;\n  }\n\n  function containsPolygon(coordinates, point) {\n    return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n  }\n\n  function ringRadians(ring) {\n    return ring = ring.map(pointRadians), ring.pop(), ring;\n  }\n\n  function pointRadians(point) {\n    return [point[0] * radians, point[1] * radians];\n  }\n\n  var contains = function contains(object, point) {\n    return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);\n  };\n\n  function graticuleX(y0, y1, dy) {\n    var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);\n    return function (x) {\n      return y.map(function (y) {\n        return [x, y];\n      });\n    };\n  }\n\n  function graticuleY(x0, x1, dx) {\n    var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);\n    return function (y) {\n      return x.map(function (x) {\n        return [x, y];\n      });\n    };\n  }\n\n  function graticule() {\n    var x1,\n        x0,\n        X1,\n        X0,\n        y1,\n        y0,\n        Y1,\n        Y0,\n        dx = 10,\n        dy = dx,\n        DX = 90,\n        DY = 360,\n        x,\n        y,\n        X,\n        Y,\n        precision = 2.5;\n\n    function graticule() {\n      return { type: \"MultiLineString\", coordinates: lines() };\n    }\n\n    function lines() {\n      return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {\n        return abs(x % DX) > epsilon;\n      }).map(x)).concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {\n        return abs(y % DY) > epsilon;\n      }).map(y));\n    }\n\n    graticule.lines = function () {\n      return lines().map(function (coordinates) {\n        return { type: \"LineString\", coordinates: coordinates };\n      });\n    };\n\n    graticule.outline = function () {\n      return {\n        type: \"Polygon\",\n        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]\n      };\n    };\n\n    graticule.extent = function (_) {\n      if (!arguments.length) return graticule.extentMinor();\n      return graticule.extentMajor(_).extentMinor(_);\n    };\n\n    graticule.extentMajor = function (_) {\n      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.extentMinor = function (_) {\n      if (!arguments.length) return [[x0, y0], [x1, y1]];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.step = function (_) {\n      if (!arguments.length) return graticule.stepMinor();\n      return graticule.stepMajor(_).stepMinor(_);\n    };\n\n    graticule.stepMajor = function (_) {\n      if (!arguments.length) return [DX, DY];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n\n    graticule.stepMinor = function (_) {\n      if (!arguments.length) return [dx, dy];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n\n    graticule.precision = function (_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = graticuleX(y0, y1, 90);\n      y = graticuleY(x0, x1, precision);\n      X = graticuleX(Y0, Y1, 90);\n      Y = graticuleY(X0, X1, precision);\n      return graticule;\n    };\n\n    return graticule.extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]]).extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n  }\n\n  function graticule10() {\n    return graticule()();\n  }\n\n  var interpolate = function interpolate(a, b) {\n    var x0 = a[0] * radians,\n        y0 = a[1] * radians,\n        x1 = b[0] * radians,\n        y1 = b[1] * radians,\n        cy0 = cos(y0),\n        sy0 = sin(y0),\n        cy1 = cos(y1),\n        sy1 = sin(y1),\n        kx0 = cy0 * cos(x0),\n        ky0 = cy0 * sin(x0),\n        kx1 = cy1 * cos(x1),\n        ky1 = cy1 * sin(x1),\n        d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n        k = sin(d);\n\n    var interpolate = d ? function (t) {\n      var B = sin(t *= d) / k,\n          A = sin(d - t) / k,\n          x = A * kx0 + B * kx1,\n          y = A * ky0 + B * ky1,\n          z = A * sy0 + B * sy1;\n      return [atan2(y, x) * degrees, atan2(z, sqrt(x * x + y * y)) * degrees];\n    } : function () {\n      return [x0 * degrees, y0 * degrees];\n    };\n\n    interpolate.distance = d;\n\n    return interpolate;\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var areaSum$1 = adder();\n  var areaRingSum$1 = adder();\n  var x00;\n  var y00;\n  var x0$1;\n  var y0$1;\n\n  var areaStream$1 = {\n    point: noop,\n    lineStart: noop,\n    lineEnd: noop,\n    polygonStart: function polygonStart() {\n      areaStream$1.lineStart = areaRingStart$1;\n      areaStream$1.lineEnd = areaRingEnd$1;\n    },\n    polygonEnd: function polygonEnd() {\n      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;\n      areaSum$1.add(abs(areaRingSum$1));\n      areaRingSum$1.reset();\n    },\n    result: function result() {\n      var area = areaSum$1 / 2;\n      areaSum$1.reset();\n      return area;\n    }\n  };\n\n  function areaRingStart$1() {\n    areaStream$1.point = areaPointFirst$1;\n  }\n\n  function areaPointFirst$1(x, y) {\n    areaStream$1.point = areaPoint$1;\n    x00 = x0$1 = x, y00 = y0$1 = y;\n  }\n\n  function areaPoint$1(x, y) {\n    areaRingSum$1.add(y0$1 * x - x0$1 * y);\n    x0$1 = x, y0$1 = y;\n  }\n\n  function areaRingEnd$1() {\n    areaPoint$1(x00, y00);\n  }\n\n  var x0$2 = Infinity;\n  var y0$2 = x0$2;\n  var x1 = -x0$2;\n  var y1 = x1;\n\n  var boundsStream$1 = {\n    point: boundsPoint$1,\n    lineStart: noop,\n    lineEnd: noop,\n    polygonStart: noop,\n    polygonEnd: noop,\n    result: function result() {\n      var bounds = [[x0$2, y0$2], [x1, y1]];\n      x1 = y1 = -(y0$2 = x0$2 = Infinity);\n      return bounds;\n    }\n  };\n\n  function boundsPoint$1(x, y) {\n    if (x < x0$2) x0$2 = x;\n    if (x > x1) x1 = x;\n    if (y < y0$2) y0$2 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // TODO Enforce positive area for exterior, negative area for interior?\n\n  var X0$1 = 0;\n  var Y0$1 = 0;\n  var Z0$1 = 0;\n  var X1$1 = 0;\n  var Y1$1 = 0;\n  var Z1$1 = 0;\n  var X2$1 = 0;\n  var Y2$1 = 0;\n  var Z2$1 = 0;\n  var x00$1;\n  var y00$1;\n  var x0$3;\n  var y0$3;\n\n  var centroidStream$1 = {\n    point: centroidPoint$1,\n    lineStart: centroidLineStart$1,\n    lineEnd: centroidLineEnd$1,\n    polygonStart: function polygonStart() {\n      centroidStream$1.lineStart = centroidRingStart$1;\n      centroidStream$1.lineEnd = centroidRingEnd$1;\n    },\n    polygonEnd: function polygonEnd() {\n      centroidStream$1.point = centroidPoint$1;\n      centroidStream$1.lineStart = centroidLineStart$1;\n      centroidStream$1.lineEnd = centroidLineEnd$1;\n    },\n    result: function result() {\n      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1] : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1] : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1] : [NaN, NaN];\n      X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;\n      return centroid;\n    }\n  };\n\n  function centroidPoint$1(x, y) {\n    X0$1 += x;\n    Y0$1 += y;\n    ++Z0$1;\n  }\n\n  function centroidLineStart$1() {\n    centroidStream$1.point = centroidPointFirstLine;\n  }\n\n  function centroidPointFirstLine(x, y) {\n    centroidStream$1.point = centroidPointLine;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidPointLine(x, y) {\n    var dx = x - x0$3,\n        dy = y - y0$3,\n        z = sqrt(dx * dx + dy * dy);\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidLineEnd$1() {\n    centroidStream$1.point = centroidPoint$1;\n  }\n\n  function centroidRingStart$1() {\n    centroidStream$1.point = centroidPointFirstRing;\n  }\n\n  function centroidRingEnd$1() {\n    centroidPointRing(x00$1, y00$1);\n  }\n\n  function centroidPointFirstRing(x, y) {\n    centroidStream$1.point = centroidPointRing;\n    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n  }\n\n  function centroidPointRing(x, y) {\n    var dx = x - x0$3,\n        dy = y - y0$3,\n        z = sqrt(dx * dx + dy * dy);\n\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n\n    z = y0$3 * x - x0$3 * y;\n    X2$1 += z * (x0$3 + x);\n    Y2$1 += z * (y0$3 + y);\n    Z2$1 += z * 3;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function PathContext(context) {\n    this._context = context;\n  }\n\n  PathContext.prototype = {\n    _radius: 4.5,\n    pointRadius: function pointRadius(_) {\n      return this._radius = _, this;\n    },\n    polygonStart: function polygonStart() {\n      this._line = 0;\n    },\n    polygonEnd: function polygonEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      if (this._line === 0) this._context.closePath();\n      this._point = NaN;\n    },\n    point: function point(x, y) {\n      switch (this._point) {\n        case 0:\n          {\n            this._context.moveTo(x, y);\n            this._point = 1;\n            break;\n          }\n        case 1:\n          {\n            this._context.lineTo(x, y);\n            break;\n          }\n        default:\n          {\n            this._context.moveTo(x + this._radius, y);\n            this._context.arc(x, y, this._radius, 0, tau);\n            break;\n          }\n      }\n    },\n    result: noop\n  };\n\n  var lengthSum$1 = adder();\n  var lengthRing;\n  var x00$2;\n  var y00$2;\n  var x0$4;\n  var y0$4;\n\n  var lengthStream$1 = {\n    point: noop,\n    lineStart: function lineStart() {\n      lengthStream$1.point = lengthPointFirst$1;\n    },\n    lineEnd: function lineEnd() {\n      if (lengthRing) lengthPoint$1(x00$2, y00$2);\n      lengthStream$1.point = noop;\n    },\n    polygonStart: function polygonStart() {\n      lengthRing = true;\n    },\n    polygonEnd: function polygonEnd() {\n      lengthRing = null;\n    },\n    result: function result() {\n      var length = +lengthSum$1;\n      lengthSum$1.reset();\n      return length;\n    }\n  };\n\n  function lengthPointFirst$1(x, y) {\n    lengthStream$1.point = lengthPoint$1;\n    x00$2 = x0$4 = x, y00$2 = y0$4 = y;\n  }\n\n  function lengthPoint$1(x, y) {\n    x0$4 -= x, y0$4 -= y;\n    lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));\n    x0$4 = x, y0$4 = y;\n  }\n\n  function PathString() {\n    this._string = [];\n  }\n\n  PathString.prototype = {\n    _radius: 4.5,\n    _circle: circle$1(4.5),\n    pointRadius: function pointRadius(_) {\n      if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n      return this;\n    },\n    polygonStart: function polygonStart() {\n      this._line = 0;\n    },\n    polygonEnd: function polygonEnd() {\n      this._line = NaN;\n    },\n    lineStart: function lineStart() {\n      this._point = 0;\n    },\n    lineEnd: function lineEnd() {\n      if (this._line === 0) this._string.push(\"Z\");\n      this._point = NaN;\n    },\n    point: function point(x, y) {\n      switch (this._point) {\n        case 0:\n          {\n            this._string.push(\"M\", x, \",\", y);\n            this._point = 1;\n            break;\n          }\n        case 1:\n          {\n            this._string.push(\"L\", x, \",\", y);\n            break;\n          }\n        default:\n          {\n            if (this._circle == null) this._circle = circle$1(this._radius);\n            this._string.push(\"M\", x, \",\", y, this._circle);\n            break;\n          }\n      }\n    },\n    result: function result() {\n      if (this._string.length) {\n        var result = this._string.join(\"\");\n        this._string = [];\n        return result;\n      } else {\n        return null;\n      }\n    }\n  };\n\n  function circle$1(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n\n  var index = function index(projection, context) {\n    var pointRadius = 4.5,\n        projectionStream,\n        contextStream;\n\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        geoStream(object, projectionStream(contextStream));\n      }\n      return contextStream.result();\n    }\n\n    path.area = function (object) {\n      geoStream(object, projectionStream(areaStream$1));\n      return areaStream$1.result();\n    };\n\n    path.measure = function (object) {\n      geoStream(object, projectionStream(lengthStream$1));\n      return lengthStream$1.result();\n    };\n\n    path.bounds = function (object) {\n      geoStream(object, projectionStream(boundsStream$1));\n      return boundsStream$1.result();\n    };\n\n    path.centroid = function (object) {\n      geoStream(object, projectionStream(centroidStream$1));\n      return centroidStream$1.result();\n    };\n\n    path.projection = function (_) {\n      return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n    };\n\n    path.context = function (_) {\n      if (!arguments.length) return context;\n      contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return path;\n    };\n\n    path.pointRadius = function (_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n\n    return path.projection(projection).context(context);\n  };\n\n  var transform = function transform(methods) {\n    return {\n      stream: transformer(methods)\n    };\n  };\n\n  function transformer(methods) {\n    return function (stream) {\n      var s = new TransformStream();\n      for (var key in methods) {\n        s[key] = methods[key];\n      }s.stream = stream;\n      return s;\n    };\n  }\n\n  function TransformStream() {}\n\n  TransformStream.prototype = {\n    constructor: TransformStream,\n    point: function point(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function sphere() {\n      this.stream.sphere();\n    },\n    lineStart: function lineStart() {\n      this.stream.lineStart();\n    },\n    lineEnd: function lineEnd() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function polygonStart() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function polygonEnd() {\n      this.stream.polygonEnd();\n    }\n  };\n\n  function _fitExtent(projection, extent, object) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        clip = projection.clipExtent && projection.clipExtent();\n\n    projection.scale(150).translate([0, 0]);\n\n    if (clip != null) projection.clipExtent(null);\n\n    geoStream(object, projection.stream(boundsStream$1));\n\n    var b = boundsStream$1.result(),\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n\n    if (clip != null) projection.clipExtent(clip);\n\n    return projection.scale(k * 150).translate([x, y]);\n  }\n\n  function _fitSize(projection, size, object) {\n    return _fitExtent(projection, [[0, 0], size], object);\n  }\n\n  var maxDepth = 16;\n  var cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\n  var resample = function resample(project, delta2) {\n    return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n  };\n\n  function resampleNone(project) {\n    return transformer({\n      point: function point(x, y) {\n        x = project(x, y);\n        this.stream.point(x[0], x[1]);\n      }\n    });\n  }\n\n  function resample$1(project, delta2) {\n\n    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0,\n          dy = y1 - y0,\n          d2 = dx * dx + dy * dy;\n      if (d2 > 4 * delta2 && depth--) {\n        var a = a0 + a1,\n            b = b0 + b1,\n            c = c0 + c1,\n            m = sqrt(a * a + b * b + c * c),\n            phi2 = asin(c /= m),\n            lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n            p = project(lambda2, phi2),\n            x2 = p[0],\n            y2 = p[1],\n            dx2 = x2 - x0,\n            dy2 = y2 - y0,\n            dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > delta2 // perpendicular projected distance\n        || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n        || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          // angular distance\n          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    return function (stream) {\n      var lambda00, x00, y00, a00, b00, c00, // first point\n      lambda0, x0, y0, a0, b0, c0; // previous point\n\n      var resampleStream = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function polygonStart() {\n          stream.polygonStart();resampleStream.lineStart = ringStart;\n        },\n        polygonEnd: function polygonEnd() {\n          stream.polygonEnd();resampleStream.lineStart = lineStart;\n        }\n      };\n\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n\n      function lineStart() {\n        x0 = NaN;\n        resampleStream.point = linePoint;\n        stream.lineStart();\n      }\n\n      function linePoint(lambda, phi) {\n        var c = cartesian([lambda, phi]),\n            p = project(lambda, phi);\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n\n      function lineEnd() {\n        resampleStream.point = point;\n        stream.lineEnd();\n      }\n\n      function ringStart() {\n        lineStart();\n        resampleStream.point = ringPoint;\n        resampleStream.lineEnd = ringEnd;\n      }\n\n      function ringPoint(lambda, phi) {\n        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resampleStream.point = linePoint;\n      }\n\n      function ringEnd() {\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n        resampleStream.lineEnd = lineEnd;\n        lineEnd();\n      }\n\n      return resampleStream;\n    };\n  }\n\n  var transformRadians = transformer({\n    point: function point(x, y) {\n      this.stream.point(x * radians, y * radians);\n    }\n  });\n\n  function transformRotate(rotate) {\n    return transformer({\n      point: function point(x, y) {\n        var r = rotate(x, y);\n        return this.stream.point(r[0], r[1]);\n      }\n    });\n  }\n\n  function projection(project) {\n    return projectionMutator(function () {\n      return project;\n    })();\n  }\n\n  function projectionMutator(projectAt) {\n    var project,\n        k = 150,\n        // scale\n    x = 480,\n        y = 250,\n        // translate\n    dx,\n        dy,\n        lambda = 0,\n        phi = 0,\n        // center\n    deltaLambda = 0,\n        deltaPhi = 0,\n        deltaGamma = 0,\n        rotate,\n        projectRotate,\n        // rotate\n    theta = null,\n        preclip = clipAntimeridian,\n        // clip angle\n    x0 = null,\n        y0,\n        x1,\n        y1,\n        postclip = identity,\n        // clip extent\n    delta2 = 0.5,\n        projectResample = resample(projectTransform, delta2),\n        // precision\n    cache,\n        cacheStream;\n\n    function projection(point) {\n      point = projectRotate(point[0] * radians, point[1] * radians);\n      return [point[0] * k + dx, dy - point[1] * k];\n    }\n\n    function invert(point) {\n      point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n      return point && [point[0] * degrees, point[1] * degrees];\n    }\n\n    function projectTransform(x, y) {\n      return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n    }\n\n    projection.stream = function (stream) {\n      return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n    };\n\n    projection.preclip = function (_) {\n      return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n    };\n\n    projection.postclip = function (_) {\n      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n    };\n\n    projection.clipAngle = function (_) {\n      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n    };\n\n    projection.clipExtent = function (_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    projection.scale = function (_) {\n      return arguments.length ? (k = +_, recenter()) : k;\n    };\n\n    projection.translate = function (_) {\n      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n    };\n\n    projection.center = function (_) {\n      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n    };\n\n    projection.rotate = function (_) {\n      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n    };\n\n    projection.precision = function (_) {\n      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n    };\n\n    projection.fitExtent = function (extent, object) {\n      return _fitExtent(projection, extent, object);\n    };\n\n    projection.fitSize = function (size, object) {\n      return _fitSize(projection, size, object);\n    };\n\n    function recenter() {\n      projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n      var center = project(lambda, phi);\n      dx = x - center[0] * k;\n      dy = y + center[1] * k;\n      return reset();\n    }\n\n    function reset() {\n      cache = cacheStream = null;\n      return projection;\n    }\n\n    return function () {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return recenter();\n    };\n  }\n\n  function conicProjection(projectAt) {\n    var phi0 = 0,\n        phi1 = pi / 3,\n        m = projectionMutator(projectAt),\n        p = m(phi0, phi1);\n\n    p.parallels = function (_) {\n      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n    };\n\n    return p;\n  }\n\n  function cylindricalEqualAreaRaw(phi0) {\n    var cosPhi0 = cos(phi0);\n\n    function forward(lambda, phi) {\n      return [lambda * cosPhi0, sin(phi) / cosPhi0];\n    }\n\n    forward.invert = function (x, y) {\n      return [x / cosPhi0, asin(y * cosPhi0)];\n    };\n\n    return forward;\n  }\n\n  function conicEqualAreaRaw(y0, y1) {\n    var sy0 = sin(y0),\n        n = (sy0 + sin(y1)) / 2;\n\n    // Are the parallels symmetrical around the Equator?\n    if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n    var c = 1 + sy0 * (2 * n - sy0),\n        r0 = sqrt(c) / n;\n\n    function project(x, y) {\n      var r = sqrt(c - 2 * n * sin(y)) / n;\n      return [r * sin(x *= n), r0 - r * cos(x)];\n    }\n\n    project.invert = function (x, y) {\n      var r0y = r0 - y;\n      return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n    };\n\n    return project;\n  }\n\n  var conicEqualArea = function conicEqualArea() {\n    return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);\n  };\n\n  var albers = function albers() {\n    return conicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);\n  };\n\n  // The projections must have mutually exclusive clip regions on the sphere,\n  // as this will avoid emitting interleaving lines and polygons.\n  function multiplex(streams) {\n    var n = streams.length;\n    return {\n      point: function point(x, y) {\n        var i = -1;while (++i < n) {\n          streams[i].point(x, y);\n        }\n      },\n      sphere: function sphere() {\n        var i = -1;while (++i < n) {\n          streams[i].sphere();\n        }\n      },\n      lineStart: function lineStart() {\n        var i = -1;while (++i < n) {\n          streams[i].lineStart();\n        }\n      },\n      lineEnd: function lineEnd() {\n        var i = -1;while (++i < n) {\n          streams[i].lineEnd();\n        }\n      },\n      polygonStart: function polygonStart() {\n        var i = -1;while (++i < n) {\n          streams[i].polygonStart();\n        }\n      },\n      polygonEnd: function polygonEnd() {\n        var i = -1;while (++i < n) {\n          streams[i].polygonEnd();\n        }\n      }\n    };\n  }\n\n  // A composite projection for the United States, configured by default for\n  // 960×500. The projection also works quite well at 960×600 if you change the\n  // scale to 1285 and adjust the translate accordingly. The set of standard\n  // parallels for each region comes from USGS, which is published here:\n  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n  var albersUsa = function albersUsa() {\n    var cache,\n        cacheStream,\n        lower48 = albers(),\n        lower48Point,\n        alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),\n        alaskaPoint,\n        // EPSG:3338\n    hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),\n        hawaiiPoint,\n        // ESRI:102007\n    _point,\n        pointStream = { point: function point(x, y) {\n        _point = [x, y];\n      } };\n\n    function albersUsa(coordinates) {\n      var x = coordinates[0],\n          y = coordinates[1];\n      return _point = null, (lower48Point.point(x, y), _point) || (alaskaPoint.point(x, y), _point) || (hawaiiPoint.point(x, y), _point);\n    }\n\n    albersUsa.invert = function (coordinates) {\n      var k = lower48.scale(),\n          t = lower48.translate(),\n          x = (coordinates[0] - t[0]) / k,\n          y = (coordinates[1] - t[1]) / k;\n      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);\n    };\n\n    albersUsa.stream = function (stream) {\n      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n    };\n\n    albersUsa.precision = function (_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n      return reset();\n    };\n\n    albersUsa.scale = function (_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n\n    albersUsa.translate = function (_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(),\n          x = +_[0],\n          y = +_[1];\n\n      lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);\n\n      alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);\n\n      hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);\n\n      return reset();\n    };\n\n    albersUsa.fitExtent = function (extent, object) {\n      return _fitExtent(albersUsa, extent, object);\n    };\n\n    albersUsa.fitSize = function (size, object) {\n      return _fitSize(albersUsa, size, object);\n    };\n\n    function reset() {\n      cache = cacheStream = null;\n      return albersUsa;\n    }\n\n    return albersUsa.scale(1070);\n  };\n\n  function azimuthalRaw(scale) {\n    return function (x, y) {\n      var cx = cos(x),\n          cy = cos(y),\n          k = scale(cx * cy);\n      return [k * cy * sin(x), k * sin(y)];\n    };\n  }\n\n  function azimuthalInvert(angle) {\n    return function (x, y) {\n      var z = sqrt(x * x + y * y),\n          c = angle(z),\n          sc = sin(c),\n          cc = cos(c);\n      return [atan2(x * sc, z * cc), asin(z && y * sc / z)];\n    };\n  }\n\n  var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {\n    return sqrt(2 / (1 + cxcy));\n  });\n\n  azimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {\n    return 2 * asin(z / 2);\n  });\n\n  var azimuthalEqualArea = function azimuthalEqualArea() {\n    return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);\n  };\n\n  var azimuthalEquidistantRaw = azimuthalRaw(function (c) {\n    return (c = acos(c)) && c / sin(c);\n  });\n\n  azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {\n    return z;\n  });\n\n  var azimuthalEquidistant = function azimuthalEquidistant() {\n    return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);\n  };\n\n  function mercatorRaw(lambda, phi) {\n    return [lambda, log(tan((halfPi + phi) / 2))];\n  }\n\n  mercatorRaw.invert = function (x, y) {\n    return [x, 2 * atan(exp(y)) - halfPi];\n  };\n\n  var mercator = function mercator() {\n    return mercatorProjection(mercatorRaw).scale(961 / tau);\n  };\n\n  function mercatorProjection(project) {\n    var m = projection(project),\n        center = m.center,\n        scale = m.scale,\n        translate = m.translate,\n        clipExtent = m.clipExtent,\n        x0 = null,\n        y0,\n        x1,\n        y1; // clip extent\n\n    m.scale = function (_) {\n      return arguments.length ? (scale(_), reclip()) : scale();\n    };\n\n    m.translate = function (_) {\n      return arguments.length ? (translate(_), reclip()) : translate();\n    };\n\n    m.center = function (_) {\n      return arguments.length ? (center(_), reclip()) : center();\n    };\n\n    m.clipExtent = function (_) {\n      return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    function reclip() {\n      var k = pi * scale(),\n          t = m(rotation(m.rotate()).invert([0, 0]));\n      return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n    }\n\n    return reclip();\n  }\n\n  function tany(y) {\n    return tan((halfPi + y) / 2);\n  }\n\n  function conicConformalRaw(y0, y1) {\n    var cy0 = cos(y0),\n        n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n        f = cy0 * pow(tany(y0), n) / n;\n\n    if (!n) return mercatorRaw;\n\n    function project(x, y) {\n      if (f > 0) {\n        if (y < -halfPi + epsilon) y = -halfPi + epsilon;\n      } else {\n        if (y > halfPi - epsilon) y = halfPi - epsilon;\n      }\n      var r = f / pow(tany(y), n);\n      return [r * sin(n * x), f - r * cos(n * x)];\n    }\n\n    project.invert = function (x, y) {\n      var fy = f - y,\n          r = sign(n) * sqrt(x * x + fy * fy);\n      return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];\n    };\n\n    return project;\n  }\n\n  var conicConformal = function conicConformal() {\n    return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);\n  };\n\n  function equirectangularRaw(lambda, phi) {\n    return [lambda, phi];\n  }\n\n  equirectangularRaw.invert = equirectangularRaw;\n\n  var equirectangular = function equirectangular() {\n    return projection(equirectangularRaw).scale(152.63);\n  };\n\n  function conicEquidistantRaw(y0, y1) {\n    var cy0 = cos(y0),\n        n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n        g = cy0 / n + y0;\n\n    if (abs(n) < epsilon) return equirectangularRaw;\n\n    function project(x, y) {\n      var gy = g - y,\n          nx = n * x;\n      return [gy * sin(nx), g - gy * cos(nx)];\n    }\n\n    project.invert = function (x, y) {\n      var gy = g - y;\n      return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];\n    };\n\n    return project;\n  }\n\n  var conicEquidistant = function conicEquidistant() {\n    return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);\n  };\n\n  function gnomonicRaw(x, y) {\n    var cy = cos(y),\n        k = cos(x) * cy;\n    return [cy * sin(x) / k, sin(y) / k];\n  }\n\n  gnomonicRaw.invert = azimuthalInvert(atan);\n\n  var gnomonic = function gnomonic() {\n    return projection(gnomonicRaw).scale(144.049).clipAngle(60);\n  };\n\n  function scaleTranslate(kx, ky, tx, ty) {\n    return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({\n      point: function point(x, y) {\n        this.stream.point(x * kx + tx, y * ky + ty);\n      }\n    });\n  }\n\n  var identity$1 = function identity$1() {\n    var k = 1,\n        tx = 0,\n        ty = 0,\n        sx = 1,\n        sy = 1,\n        transform$$1 = identity,\n        // scale, translate and reflect\n    x0 = null,\n        y0,\n        x1,\n        y1,\n        // clip extent\n    _postclip = identity,\n        cache,\n        cacheStream,\n        projection;\n\n    function reset() {\n      cache = cacheStream = null;\n      return projection;\n    }\n\n    return projection = {\n      stream: function stream(_stream2) {\n        return cache && cacheStream === _stream2 ? cache : cache = transform$$1(_postclip(cacheStream = _stream2));\n      },\n      postclip: function postclip(_) {\n        return arguments.length ? (_postclip = _, x0 = y0 = x1 = y1 = null, reset()) : _postclip;\n      },\n      clipExtent: function clipExtent(_) {\n        return arguments.length ? (_postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n      },\n      scale: function scale(_) {\n        return arguments.length ? (transform$$1 = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;\n      },\n      translate: function translate(_) {\n        return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];\n      },\n      reflectX: function reflectX(_) {\n        return arguments.length ? (transform$$1 = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;\n      },\n      reflectY: function reflectY(_) {\n        return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;\n      },\n      fitExtent: function fitExtent(extent, object) {\n        return _fitExtent(projection, extent, object);\n      },\n      fitSize: function fitSize(size, object) {\n        return _fitSize(projection, size, object);\n      }\n    };\n  };\n\n  function naturalEarth1Raw(lambda, phi) {\n    var phi2 = phi * phi,\n        phi4 = phi2 * phi2;\n    return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];\n  }\n\n  naturalEarth1Raw.invert = function (x, y) {\n    var phi = y,\n        i = 25,\n        delta;\n    do {\n      var phi2 = phi * phi,\n          phi4 = phi2 * phi2;\n      phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n    } while (abs(delta) > epsilon && --i > 0);\n    return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];\n  };\n\n  var naturalEarth1 = function naturalEarth1() {\n    return projection(naturalEarth1Raw).scale(175.295);\n  };\n\n  function orthographicRaw(x, y) {\n    return [cos(y) * sin(x), sin(y)];\n  }\n\n  orthographicRaw.invert = azimuthalInvert(asin);\n\n  var orthographic = function orthographic() {\n    return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon);\n  };\n\n  function stereographicRaw(x, y) {\n    var cy = cos(y),\n        k = 1 + cos(x) * cy;\n    return [cy * sin(x) / k, sin(y) / k];\n  }\n\n  stereographicRaw.invert = azimuthalInvert(function (z) {\n    return 2 * atan(z);\n  });\n\n  var stereographic = function stereographic() {\n    return projection(stereographicRaw).scale(250).clipAngle(142);\n  };\n\n  function transverseMercatorRaw(lambda, phi) {\n    return [log(tan((halfPi + phi) / 2)), -lambda];\n  }\n\n  transverseMercatorRaw.invert = function (x, y) {\n    return [-y, 2 * atan(exp(x)) - halfPi];\n  };\n\n  var transverseMercator = function transverseMercator() {\n    var m = mercatorProjection(transverseMercatorRaw),\n        center = m.center,\n        rotate = m.rotate;\n\n    m.center = function (_) {\n      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n    };\n\n    m.rotate = function (_) {\n      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n    };\n\n    return rotate([0, 0, 90]).scale(159.155);\n  };\n\n  exports.geoArea = area;\n  exports.geoBounds = bounds;\n  exports.geoCentroid = centroid;\n  exports.geoCircle = circle;\n  exports.geoClipAntimeridian = clipAntimeridian;\n  exports.geoClipCircle = clipCircle;\n  exports.geoClipExtent = extent;\n  exports.geoClipRectangle = clipRectangle;\n  exports.geoContains = contains;\n  exports.geoDistance = distance;\n  exports.geoGraticule = graticule;\n  exports.geoGraticule10 = graticule10;\n  exports.geoInterpolate = interpolate;\n  exports.geoLength = length;\n  exports.geoPath = index;\n  exports.geoAlbers = albers;\n  exports.geoAlbersUsa = albersUsa;\n  exports.geoAzimuthalEqualArea = azimuthalEqualArea;\n  exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;\n  exports.geoAzimuthalEquidistant = azimuthalEquidistant;\n  exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;\n  exports.geoConicConformal = conicConformal;\n  exports.geoConicConformalRaw = conicConformalRaw;\n  exports.geoConicEqualArea = conicEqualArea;\n  exports.geoConicEqualAreaRaw = conicEqualAreaRaw;\n  exports.geoConicEquidistant = conicEquidistant;\n  exports.geoConicEquidistantRaw = conicEquidistantRaw;\n  exports.geoEquirectangular = equirectangular;\n  exports.geoEquirectangularRaw = equirectangularRaw;\n  exports.geoGnomonic = gnomonic;\n  exports.geoGnomonicRaw = gnomonicRaw;\n  exports.geoIdentity = identity$1;\n  exports.geoProjection = projection;\n  exports.geoProjectionMutator = projectionMutator;\n  exports.geoMercator = mercator;\n  exports.geoMercatorRaw = mercatorRaw;\n  exports.geoNaturalEarth1 = naturalEarth1;\n  exports.geoNaturalEarth1Raw = naturalEarth1Raw;\n  exports.geoOrthographic = orthographic;\n  exports.geoOrthographicRaw = orthographicRaw;\n  exports.geoStereographic = stereographic;\n  exports.geoStereographicRaw = stereographicRaw;\n  exports.geoTransverseMercator = transverseMercator;\n  exports.geoTransverseMercatorRaw = transverseMercatorRaw;\n  exports.geoRotation = rotation;\n  exports.geoStream = geoStream;\n  exports.geoTransform = transform;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-array":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-array/build/d3-array.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-transition/build/d3-transition.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-transition/build/d3-transition.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// https://d3js.org/d3-transition/ Version 1.1.0. Copyright 2017 Mike Bostock.\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-selection'), require('d3-dispatch'), require('d3-timer'), require('d3-interpolate'), require('d3-color'), require('d3-ease')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-selection', 'd3-dispatch', 'd3-timer', 'd3-interpolate', 'd3-color', 'd3-ease'], factory) : factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3);\n})(undefined, function (exports, d3Selection, d3Dispatch, d3Timer, d3Interpolate, d3Color, d3Ease) {\n  'use strict';\n\n  var emptyOn = d3Dispatch.dispatch(\"start\", \"end\", \"interrupt\");\n  var emptyTween = [];\n\n  var CREATED = 0;\n  var SCHEDULED = 1;\n  var STARTING = 2;\n  var STARTED = 3;\n  var RUNNING = 4;\n  var ENDING = 5;\n  var ENDED = 6;\n\n  var schedule = function schedule(node, name, id, index, group, timing) {\n    var schedules = node.__transition;\n    if (!schedules) node.__transition = {};else if (id in schedules) return;\n    create(node, id, {\n      name: name,\n      index: index, // For context during callback.\n      group: group, // For context during callback.\n      on: emptyOn,\n      tween: emptyTween,\n      time: timing.time,\n      delay: timing.delay,\n      duration: timing.duration,\n      ease: timing.ease,\n      timer: null,\n      state: CREATED\n    });\n  };\n\n  function init(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function set(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function get(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id])) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function create(node, id, self) {\n    var schedules = node.__transition,\n        tween;\n\n    // Initialize the self timer when the transition is created.\n    // Note the actual delay is not known until the first callback!\n    schedules[id] = self;\n    self.timer = d3Timer.timer(schedule, 0, self.time);\n\n    function schedule(elapsed) {\n      self.state = SCHEDULED;\n      self.timer.restart(start, self.delay, self.time);\n\n      // If the elapsed delay is less than our first sleep, start immediately.\n      if (self.delay <= elapsed) start(elapsed - self.delay);\n    }\n\n    function start(elapsed) {\n      var i, j, n, o;\n\n      // If the state is not SCHEDULED, then we previously errored on start.\n      if (self.state !== SCHEDULED) return stop();\n\n      for (i in schedules) {\n        o = schedules[i];\n        if (o.name !== self.name) continue;\n\n        // While this element already has a starting transition during this frame,\n        // defer starting an interrupting transition until that transition has a\n        // chance to tick (and possibly end); see d3/d3-transition#54!\n        if (o.state === STARTED) return d3Timer.timeout(start);\n\n        // Interrupt the active transition, if any.\n        // Dispatch the interrupt event.\n        if (o.state === RUNNING) {\n          o.state = ENDED;\n          o.timer.stop();\n          o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n          delete schedules[i];\n        }\n\n        // Cancel any pre-empted transitions. No interrupt event is dispatched\n        // because the cancelled transitions never started. Note that this also\n        // removes this transition from the pending list!\n        else if (+i < id) {\n            o.state = ENDED;\n            o.timer.stop();\n            delete schedules[i];\n          }\n      }\n\n      // Defer the first tick to end of the current frame; see d3/d3#1576.\n      // Note the transition may be canceled after start and before the first tick!\n      // Note this must be scheduled before the start event; see d3/d3-transition#16!\n      // Assuming this is successful, subsequent callbacks go straight to tick.\n      d3Timer.timeout(function () {\n        if (self.state === STARTED) {\n          self.state = RUNNING;\n          self.timer.restart(tick, self.delay, self.time);\n          tick(elapsed);\n        }\n      });\n\n      // Dispatch the start event.\n      // Note this must be done before the tween are initialized.\n      self.state = STARTING;\n      self.on.call(\"start\", node, node.__data__, self.index, self.group);\n      if (self.state !== STARTING) return; // interrupted\n      self.state = STARTED;\n\n      // Initialize the tween, deleting null tween.\n      tween = new Array(n = self.tween.length);\n      for (i = 0, j = -1; i < n; ++i) {\n        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n          tween[++j] = o;\n        }\n      }\n      tween.length = j + 1;\n    }\n\n    function tick(elapsed) {\n      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n          i = -1,\n          n = tween.length;\n\n      while (++i < n) {\n        tween[i].call(null, t);\n      }\n\n      // Dispatch the end event.\n      if (self.state === ENDING) {\n        self.on.call(\"end\", node, node.__data__, self.index, self.group);\n        stop();\n      }\n    }\n\n    function stop() {\n      self.state = ENDED;\n      self.timer.stop();\n      delete schedules[id];\n      for (var i in schedules) {\n        return;\n      } // eslint-disable-line no-unused-vars\n      delete node.__transition;\n    }\n  }\n\n  var interrupt = function interrupt(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        active,\n        empty = true,\n        i;\n\n    if (!schedules) return;\n\n    name = name == null ? null : name + \"\";\n\n    for (i in schedules) {\n      if ((schedule = schedules[i]).name !== name) {\n        empty = false;continue;\n      }\n      active = schedule.state > STARTING && schedule.state < ENDING;\n      schedule.state = ENDED;\n      schedule.timer.stop();\n      if (active) schedule.on.call(\"interrupt\", node, node.__data__, schedule.index, schedule.group);\n      delete schedules[i];\n    }\n\n    if (empty) delete node.__transition;\n  };\n\n  var selection_interrupt = function selection_interrupt(name) {\n    return this.each(function () {\n      interrupt(this, name);\n    });\n  };\n\n  function tweenRemove(id, name) {\n    var tween0, tween1;\n    return function () {\n      var schedule = set(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = tween0 = tween;\n        for (var i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1 = tween1.slice();\n            tween1.splice(i, 1);\n            break;\n          }\n        }\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function tweenFunction(id, name, value) {\n    var tween0, tween1;\n    if (typeof value !== \"function\") throw new Error();\n    return function () {\n      var schedule = set(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = (tween0 = tween).slice();\n        for (var t = { name: name, value: value }, i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1[i] = t;\n            break;\n          }\n        }\n        if (i === n) tween1.push(t);\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  var transition_tween = function transition_tween(name, value) {\n    var id = this._id;\n\n    name += \"\";\n\n    if (arguments.length < 2) {\n      var tween = get(this.node(), id).tween;\n      for (var i = 0, n = tween.length, t; i < n; ++i) {\n        if ((t = tween[i]).name === name) {\n          return t.value;\n        }\n      }\n      return null;\n    }\n\n    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n  };\n\n  function tweenValue(transition, name, value) {\n    var id = transition._id;\n\n    transition.each(function () {\n      var schedule = set(this, id);\n      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n    });\n\n    return function (node) {\n      return get(node, id).value[name];\n    };\n  }\n\n  var interpolate = function interpolate(a, b) {\n    var c;\n    return (typeof b === \"number\" ? d3Interpolate.interpolateNumber : b instanceof d3Color.color ? d3Interpolate.interpolateRgb : (c = d3Color.color(b)) ? (b = c, d3Interpolate.interpolateRgb) : d3Interpolate.interpolateString)(a, b);\n  };\n\n  function attrRemove(name) {\n    return function () {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS(fullname) {\n    return function () {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant(name, interpolate$$1, value1) {\n    var value00, interpolate0;\n    return function () {\n      var value0 = this.getAttribute(name);\n      return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1);\n    };\n  }\n\n  function attrConstantNS(fullname, interpolate$$1, value1) {\n    var value00, interpolate0;\n    return function () {\n      var value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1);\n    };\n  }\n\n  function attrFunction(name, interpolate$$1, value) {\n    var value00, value10, interpolate0;\n    return function () {\n      var value0,\n          value1 = value(this);\n      if (value1 == null) return void this.removeAttribute(name);\n      value0 = this.getAttribute(name);\n      return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);\n    };\n  }\n\n  function attrFunctionNS(fullname, interpolate$$1, value) {\n    var value00, value10, interpolate0;\n    return function () {\n      var value0,\n          value1 = value(this);\n      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n      value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);\n    };\n  }\n\n  var transition_attr = function transition_attr(name, value) {\n    var fullname = d3Selection.namespace(name),\n        i = fullname === \"transform\" ? d3Interpolate.interpolateTransformSvg : interpolate;\n    return this.attrTween(name, typeof value === \"function\" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, \"attr.\" + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value + \"\"));\n  };\n\n  function attrTweenNS(fullname, value) {\n    function tween() {\n      var node = this,\n          i = value.apply(node, arguments);\n      return i && function (t) {\n        node.setAttributeNS(fullname.space, fullname.local, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function attrTween(name, value) {\n    function tween() {\n      var node = this,\n          i = value.apply(node, arguments);\n      return i && function (t) {\n        node.setAttribute(name, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  var transition_attrTween = function transition_attrTween(name, value) {\n    var key = \"attr.\" + name;\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error();\n    var fullname = d3Selection.namespace(name);\n    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n  };\n\n  function delayFunction(id, value) {\n    return function () {\n      init(this, id).delay = +value.apply(this, arguments);\n    };\n  }\n\n  function delayConstant(id, value) {\n    return value = +value, function () {\n      init(this, id).delay = value;\n    };\n  }\n\n  var transition_delay = function transition_delay(value) {\n    var id = this._id;\n\n    return arguments.length ? this.each((typeof value === \"function\" ? delayFunction : delayConstant)(id, value)) : get(this.node(), id).delay;\n  };\n\n  function durationFunction(id, value) {\n    return function () {\n      set(this, id).duration = +value.apply(this, arguments);\n    };\n  }\n\n  function durationConstant(id, value) {\n    return value = +value, function () {\n      set(this, id).duration = value;\n    };\n  }\n\n  var transition_duration = function transition_duration(value) {\n    var id = this._id;\n\n    return arguments.length ? this.each((typeof value === \"function\" ? durationFunction : durationConstant)(id, value)) : get(this.node(), id).duration;\n  };\n\n  function easeConstant(id, value) {\n    if (typeof value !== \"function\") throw new Error();\n    return function () {\n      set(this, id).ease = value;\n    };\n  }\n\n  var transition_ease = function transition_ease(value) {\n    var id = this._id;\n\n    return arguments.length ? this.each(easeConstant(id, value)) : get(this.node(), id).ease;\n  };\n\n  var transition_filter = function transition_filter(match) {\n    if (typeof match !== \"function\") match = d3Selection.matcher(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, this._name, this._id);\n  };\n\n  var transition_merge = function transition_merge(transition) {\n    if (transition._id !== this._id) throw new Error();\n\n    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Transition(merges, this._parents, this._name, this._id);\n  };\n\n  function start(name) {\n    return (name + \"\").trim().split(/^|\\s+/).every(function (t) {\n      var i = t.indexOf(\".\");\n      if (i >= 0) t = t.slice(0, i);\n      return !t || t === \"start\";\n    });\n  }\n\n  function onFunction(id, name, listener) {\n    var on0,\n        on1,\n        sit = start(name) ? init : set;\n    return function () {\n      var schedule = sit(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n      schedule.on = on1;\n    };\n  }\n\n  var transition_on = function transition_on(name, listener) {\n    var id = this._id;\n\n    return arguments.length < 2 ? get(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));\n  };\n\n  function removeFunction(id) {\n    return function () {\n      var parent = this.parentNode;\n      for (var i in this.__transition) {\n        if (+i !== id) return;\n      }if (parent) parent.removeChild(this);\n    };\n  }\n\n  var transition_remove = function transition_remove() {\n    return this.on(\"end.remove\", removeFunction(this._id));\n  };\n\n  var transition_select = function transition_select(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = d3Selection.selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n          schedule(subgroup[i], name, id, i, subgroup, get(node, id));\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, name, id);\n  };\n\n  var transition_selectAll = function transition_selectAll(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = d3Selection.selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {\n            if (child = children[k]) {\n              schedule(child, name, id, k, children, inherit);\n            }\n          }\n          subgroups.push(children);\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, parents, name, id);\n  };\n\n  var Selection = d3Selection.selection.prototype.constructor;\n\n  var transition_selection = function transition_selection() {\n    return new Selection(this._groups, this._parents);\n  };\n\n  function styleRemove(name, interpolate$$1) {\n    var value00, value10, interpolate0;\n    return function () {\n      var value0 = d3Selection.style(this, name),\n          value1 = (this.style.removeProperty(name), d3Selection.style(this, name));\n      return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);\n    };\n  }\n\n  function styleRemoveEnd(name) {\n    return function () {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant(name, interpolate$$1, value1) {\n    var value00, interpolate0;\n    return function () {\n      var value0 = d3Selection.style(this, name);\n      return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1);\n    };\n  }\n\n  function styleFunction(name, interpolate$$1, value) {\n    var value00, value10, interpolate0;\n    return function () {\n      var value0 = d3Selection.style(this, name),\n          value1 = value(this);\n      if (value1 == null) value1 = (this.style.removeProperty(name), d3Selection.style(this, name));\n      return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);\n    };\n  }\n\n  var transition_style = function transition_style(name, value, priority) {\n    var i = (name += \"\") === \"transform\" ? d3Interpolate.interpolateTransformCss : interpolate;\n    return value == null ? this.styleTween(name, styleRemove(name, i)).on(\"end.style.\" + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === \"function\" ? styleFunction(name, i, tweenValue(this, \"style.\" + name, value)) : styleConstant(name, i, value + \"\"), priority);\n  };\n\n  function styleTween(name, value, priority) {\n    function tween() {\n      var node = this,\n          i = value.apply(node, arguments);\n      return i && function (t) {\n        node.style.setProperty(name, i(t), priority);\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  var transition_styleTween = function transition_styleTween(name, value, priority) {\n    var key = \"style.\" + (name += \"\");\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error();\n    return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n  };\n\n  function textConstant(value) {\n    return function () {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction(value) {\n    return function () {\n      var value1 = value(this);\n      this.textContent = value1 == null ? \"\" : value1;\n    };\n  }\n\n  var transition_text = function transition_text(value) {\n    return this.tween(\"text\", typeof value === \"function\" ? textFunction(tweenValue(this, \"text\", value)) : textConstant(value == null ? \"\" : value + \"\"));\n  };\n\n  var transition_transition = function transition_transition() {\n    var name = this._name,\n        id0 = this._id,\n        id1 = newId();\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          var inherit = get(node, id0);\n          schedule(node, name, id1, i, group, {\n            time: inherit.time + inherit.delay + inherit.duration,\n            delay: 0,\n            duration: inherit.duration,\n            ease: inherit.ease\n          });\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id1);\n  };\n\n  var id = 0;\n\n  function Transition(groups, parents, name, id) {\n    this._groups = groups;\n    this._parents = parents;\n    this._name = name;\n    this._id = id;\n  }\n\n  function transition(name) {\n    return d3Selection.selection().transition(name);\n  }\n\n  function newId() {\n    return ++id;\n  }\n\n  var selection_prototype = d3Selection.selection.prototype;\n\n  Transition.prototype = transition.prototype = {\n    constructor: Transition,\n    select: transition_select,\n    selectAll: transition_selectAll,\n    filter: transition_filter,\n    merge: transition_merge,\n    selection: transition_selection,\n    transition: transition_transition,\n    call: selection_prototype.call,\n    nodes: selection_prototype.nodes,\n    node: selection_prototype.node,\n    size: selection_prototype.size,\n    empty: selection_prototype.empty,\n    each: selection_prototype.each,\n    on: transition_on,\n    attr: transition_attr,\n    attrTween: transition_attrTween,\n    style: transition_style,\n    styleTween: transition_styleTween,\n    text: transition_text,\n    remove: transition_remove,\n    tween: transition_tween,\n    delay: transition_delay,\n    duration: transition_duration,\n    ease: transition_ease\n  };\n\n  var defaultTiming = {\n    time: null, // Set on use.\n    delay: 0,\n    duration: 250,\n    ease: d3Ease.easeCubicInOut\n  };\n\n  function inherit(node, id) {\n    var timing;\n    while (!(timing = node.__transition) || !(timing = timing[id])) {\n      if (!(node = node.parentNode)) {\n        return defaultTiming.time = d3Timer.now(), defaultTiming;\n      }\n    }\n    return timing;\n  }\n\n  var selection_transition = function selection_transition(name) {\n    var id, timing;\n\n    if (name instanceof Transition) {\n      id = name._id, name = name._name;\n    } else {\n      id = newId(), (timing = defaultTiming).time = d3Timer.now(), name = name == null ? null : name + \"\";\n    }\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          schedule(node, name, id, i, group, timing || inherit(node, id));\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id);\n  };\n\n  d3Selection.selection.prototype.interrupt = selection_interrupt;\n  d3Selection.selection.prototype.transition = selection_transition;\n\n  var root = [null];\n\n  var active = function active(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        i;\n\n    if (schedules) {\n      name = name == null ? null : name + \"\";\n      for (i in schedules) {\n        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\n          return new Transition([[node]], root, name, +i);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  exports.transition = transition;\n  exports.active = active;\n  exports.interrupt = interrupt;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-selection":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-selection/build/d3-selection.js","d3-timer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-timer/build/d3-timer.js","d3-interpolate":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-interpolate/build/d3-interpolate.js","d3-color":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-color/build/d3-color.js","d3-dispatch":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js","d3-ease":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-ease/build/d3-ease.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/browserify/lib/_empty.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/browserify/lib/_empty.js","source":"","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process/browser.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process/browser.js","source":"// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/https-browserify/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/https-browserify/index.js","source":"var http = require('http')\nvar url = require('url')\n\nvar https = module.exports\n\nfor (var key in http) {\n  if (http.hasOwnProperty(key)) https[key] = http[key]\n}\n\nhttps.request = function (params, cb) {\n  params = validateParams(params)\n  return http.request.call(this, params, cb)\n}\n\nhttps.get = function (params, cb) {\n  params = validateParams(params)\n  return http.get.call(this, params, cb)\n}\n\nfunction validateParams (params) {\n  if (typeof params === 'string') {\n    params = url.parse(params)\n  }\n  if (!params.protocol) {\n    params.protocol = 'https:'\n  }\n  if (params.protocol !== 'https:') {\n    throw new Error('Protocol \"' + params.protocol + '\" not supported. Expected \"https:\"')\n  }\n  return params\n}\n","deps":{"http":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/index.js","url":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/url.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/util.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/util.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nmodule.exports = {\n  isString: function isString(arg) {\n    return typeof arg === 'string';\n  },\n  isObject: function isObject(arg) {\n    return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;\n  },\n  isNull: function isNull(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function isNullOrUndefined(arg) {\n    return arg == null;\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlzU3RyaW5nIiwiYXJnIiwiaXNPYmplY3QiLCJpc051bGwiLCJpc051bGxPclVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmQyxZQUFVLGtCQUFTQyxHQUFULEVBQWM7QUFDdEIsV0FBTyxPQUFPQSxHQUFQLEtBQWdCLFFBQXZCO0FBQ0QsR0FIYztBQUlmQyxZQUFVLGtCQUFTRCxHQUFULEVBQWM7QUFDdEIsV0FBTyxRQUFPQSxHQUFQLHlDQUFPQSxHQUFQLE9BQWdCLFFBQWhCLElBQTRCQSxRQUFRLElBQTNDO0FBQ0QsR0FOYztBQU9mRSxVQUFRLGdCQUFTRixHQUFULEVBQWM7QUFDcEIsV0FBT0EsUUFBUSxJQUFmO0FBQ0QsR0FUYztBQVVmRyxxQkFBbUIsMkJBQVNILEdBQVQsRUFBYztBQUMvQixXQUFPQSxPQUFPLElBQWQ7QUFDRDtBQVpjLENBQWpCIiwiZmlsZSI6InV0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1N0cmluZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnc3RyaW5nJztcbiAgfSxcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuICB9LFxuICBpc051bGw6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbE9yVW5kZWZpbmVkOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09IG51bGw7XG4gIH1cbn07XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/punycode/punycode.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/punycode/punycode.js","source":"(function (global){\n/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/builtin-status-codes/browser.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/builtin-status-codes/browser.js","source":"\"use strict\";\n\nmodule.exports = {\n  \"100\": \"Continue\",\n  \"101\": \"Switching Protocols\",\n  \"102\": \"Processing\",\n  \"200\": \"OK\",\n  \"201\": \"Created\",\n  \"202\": \"Accepted\",\n  \"203\": \"Non-Authoritative Information\",\n  \"204\": \"No Content\",\n  \"205\": \"Reset Content\",\n  \"206\": \"Partial Content\",\n  \"207\": \"Multi-Status\",\n  \"208\": \"Already Reported\",\n  \"226\": \"IM Used\",\n  \"300\": \"Multiple Choices\",\n  \"301\": \"Moved Permanently\",\n  \"302\": \"Found\",\n  \"303\": \"See Other\",\n  \"304\": \"Not Modified\",\n  \"305\": \"Use Proxy\",\n  \"307\": \"Temporary Redirect\",\n  \"308\": \"Permanent Redirect\",\n  \"400\": \"Bad Request\",\n  \"401\": \"Unauthorized\",\n  \"402\": \"Payment Required\",\n  \"403\": \"Forbidden\",\n  \"404\": \"Not Found\",\n  \"405\": \"Method Not Allowed\",\n  \"406\": \"Not Acceptable\",\n  \"407\": \"Proxy Authentication Required\",\n  \"408\": \"Request Timeout\",\n  \"409\": \"Conflict\",\n  \"410\": \"Gone\",\n  \"411\": \"Length Required\",\n  \"412\": \"Precondition Failed\",\n  \"413\": \"Payload Too Large\",\n  \"414\": \"URI Too Long\",\n  \"415\": \"Unsupported Media Type\",\n  \"416\": \"Range Not Satisfiable\",\n  \"417\": \"Expectation Failed\",\n  \"418\": \"I'm a teapot\",\n  \"421\": \"Misdirected Request\",\n  \"422\": \"Unprocessable Entity\",\n  \"423\": \"Locked\",\n  \"424\": \"Failed Dependency\",\n  \"425\": \"Unordered Collection\",\n  \"426\": \"Upgrade Required\",\n  \"428\": \"Precondition Required\",\n  \"429\": \"Too Many Requests\",\n  \"431\": \"Request Header Fields Too Large\",\n  \"451\": \"Unavailable For Legal Reasons\",\n  \"500\": \"Internal Server Error\",\n  \"501\": \"Not Implemented\",\n  \"502\": \"Bad Gateway\",\n  \"503\": \"Service Unavailable\",\n  \"504\": \"Gateway Timeout\",\n  \"505\": \"HTTP Version Not Supported\",\n  \"506\": \"Variant Also Negotiates\",\n  \"507\": \"Insufficient Storage\",\n  \"508\": \"Loop Detected\",\n  \"509\": \"Bandwidth Limit Exceeded\",\n  \"510\": \"Not Extended\",\n  \"511\": \"Network Authentication Required\"\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmLFNBQU8sVUFEUTtBQUVmLFNBQU8scUJBRlE7QUFHZixTQUFPLFlBSFE7QUFJZixTQUFPLElBSlE7QUFLZixTQUFPLFNBTFE7QUFNZixTQUFPLFVBTlE7QUFPZixTQUFPLCtCQVBRO0FBUWYsU0FBTyxZQVJRO0FBU2YsU0FBTyxlQVRRO0FBVWYsU0FBTyxpQkFWUTtBQVdmLFNBQU8sY0FYUTtBQVlmLFNBQU8sa0JBWlE7QUFhZixTQUFPLFNBYlE7QUFjZixTQUFPLGtCQWRRO0FBZWYsU0FBTyxtQkFmUTtBQWdCZixTQUFPLE9BaEJRO0FBaUJmLFNBQU8sV0FqQlE7QUFrQmYsU0FBTyxjQWxCUTtBQW1CZixTQUFPLFdBbkJRO0FBb0JmLFNBQU8sb0JBcEJRO0FBcUJmLFNBQU8sb0JBckJRO0FBc0JmLFNBQU8sYUF0QlE7QUF1QmYsU0FBTyxjQXZCUTtBQXdCZixTQUFPLGtCQXhCUTtBQXlCZixTQUFPLFdBekJRO0FBMEJmLFNBQU8sV0ExQlE7QUEyQmYsU0FBTyxvQkEzQlE7QUE0QmYsU0FBTyxnQkE1QlE7QUE2QmYsU0FBTywrQkE3QlE7QUE4QmYsU0FBTyxpQkE5QlE7QUErQmYsU0FBTyxVQS9CUTtBQWdDZixTQUFPLE1BaENRO0FBaUNmLFNBQU8saUJBakNRO0FBa0NmLFNBQU8scUJBbENRO0FBbUNmLFNBQU8sbUJBbkNRO0FBb0NmLFNBQU8sY0FwQ1E7QUFxQ2YsU0FBTyx3QkFyQ1E7QUFzQ2YsU0FBTyx1QkF0Q1E7QUF1Q2YsU0FBTyxvQkF2Q1E7QUF3Q2YsU0FBTyxjQXhDUTtBQXlDZixTQUFPLHFCQXpDUTtBQTBDZixTQUFPLHNCQTFDUTtBQTJDZixTQUFPLFFBM0NRO0FBNENmLFNBQU8sbUJBNUNRO0FBNkNmLFNBQU8sc0JBN0NRO0FBOENmLFNBQU8sa0JBOUNRO0FBK0NmLFNBQU8sdUJBL0NRO0FBZ0RmLFNBQU8sbUJBaERRO0FBaURmLFNBQU8saUNBakRRO0FBa0RmLFNBQU8sK0JBbERRO0FBbURmLFNBQU8sdUJBbkRRO0FBb0RmLFNBQU8saUJBcERRO0FBcURmLFNBQU8sYUFyRFE7QUFzRGYsU0FBTyxxQkF0RFE7QUF1RGYsU0FBTyxpQkF2RFE7QUF3RGYsU0FBTyw0QkF4RFE7QUF5RGYsU0FBTyx5QkF6RFE7QUEwRGYsU0FBTyxzQkExRFE7QUEyRGYsU0FBTyxlQTNEUTtBQTREZixTQUFPLDBCQTVEUTtBQTZEZixTQUFPLGNBN0RRO0FBOERmLFNBQU87QUE5RFEsQ0FBakIiLCJmaWxlIjoiYnJvd3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICBcIjEwMFwiOiBcIkNvbnRpbnVlXCIsXG4gIFwiMTAxXCI6IFwiU3dpdGNoaW5nIFByb3RvY29sc1wiLFxuICBcIjEwMlwiOiBcIlByb2Nlc3NpbmdcIixcbiAgXCIyMDBcIjogXCJPS1wiLFxuICBcIjIwMVwiOiBcIkNyZWF0ZWRcIixcbiAgXCIyMDJcIjogXCJBY2NlcHRlZFwiLFxuICBcIjIwM1wiOiBcIk5vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uXCIsXG4gIFwiMjA0XCI6IFwiTm8gQ29udGVudFwiLFxuICBcIjIwNVwiOiBcIlJlc2V0IENvbnRlbnRcIixcbiAgXCIyMDZcIjogXCJQYXJ0aWFsIENvbnRlbnRcIixcbiAgXCIyMDdcIjogXCJNdWx0aS1TdGF0dXNcIixcbiAgXCIyMDhcIjogXCJBbHJlYWR5IFJlcG9ydGVkXCIsXG4gIFwiMjI2XCI6IFwiSU0gVXNlZFwiLFxuICBcIjMwMFwiOiBcIk11bHRpcGxlIENob2ljZXNcIixcbiAgXCIzMDFcIjogXCJNb3ZlZCBQZXJtYW5lbnRseVwiLFxuICBcIjMwMlwiOiBcIkZvdW5kXCIsXG4gIFwiMzAzXCI6IFwiU2VlIE90aGVyXCIsXG4gIFwiMzA0XCI6IFwiTm90IE1vZGlmaWVkXCIsXG4gIFwiMzA1XCI6IFwiVXNlIFByb3h5XCIsXG4gIFwiMzA3XCI6IFwiVGVtcG9yYXJ5IFJlZGlyZWN0XCIsXG4gIFwiMzA4XCI6IFwiUGVybWFuZW50IFJlZGlyZWN0XCIsXG4gIFwiNDAwXCI6IFwiQmFkIFJlcXVlc3RcIixcbiAgXCI0MDFcIjogXCJVbmF1dGhvcml6ZWRcIixcbiAgXCI0MDJcIjogXCJQYXltZW50IFJlcXVpcmVkXCIsXG4gIFwiNDAzXCI6IFwiRm9yYmlkZGVuXCIsXG4gIFwiNDA0XCI6IFwiTm90IEZvdW5kXCIsXG4gIFwiNDA1XCI6IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCIsXG4gIFwiNDA2XCI6IFwiTm90IEFjY2VwdGFibGVcIixcbiAgXCI0MDdcIjogXCJQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiLFxuICBcIjQwOFwiOiBcIlJlcXVlc3QgVGltZW91dFwiLFxuICBcIjQwOVwiOiBcIkNvbmZsaWN0XCIsXG4gIFwiNDEwXCI6IFwiR29uZVwiLFxuICBcIjQxMVwiOiBcIkxlbmd0aCBSZXF1aXJlZFwiLFxuICBcIjQxMlwiOiBcIlByZWNvbmRpdGlvbiBGYWlsZWRcIixcbiAgXCI0MTNcIjogXCJQYXlsb2FkIFRvbyBMYXJnZVwiLFxuICBcIjQxNFwiOiBcIlVSSSBUb28gTG9uZ1wiLFxuICBcIjQxNVwiOiBcIlVuc3VwcG9ydGVkIE1lZGlhIFR5cGVcIixcbiAgXCI0MTZcIjogXCJSYW5nZSBOb3QgU2F0aXNmaWFibGVcIixcbiAgXCI0MTdcIjogXCJFeHBlY3RhdGlvbiBGYWlsZWRcIixcbiAgXCI0MThcIjogXCJJJ20gYSB0ZWFwb3RcIixcbiAgXCI0MjFcIjogXCJNaXNkaXJlY3RlZCBSZXF1ZXN0XCIsXG4gIFwiNDIyXCI6IFwiVW5wcm9jZXNzYWJsZSBFbnRpdHlcIixcbiAgXCI0MjNcIjogXCJMb2NrZWRcIixcbiAgXCI0MjRcIjogXCJGYWlsZWQgRGVwZW5kZW5jeVwiLFxuICBcIjQyNVwiOiBcIlVub3JkZXJlZCBDb2xsZWN0aW9uXCIsXG4gIFwiNDI2XCI6IFwiVXBncmFkZSBSZXF1aXJlZFwiLFxuICBcIjQyOFwiOiBcIlByZWNvbmRpdGlvbiBSZXF1aXJlZFwiLFxuICBcIjQyOVwiOiBcIlRvbyBNYW55IFJlcXVlc3RzXCIsXG4gIFwiNDMxXCI6IFwiUmVxdWVzdCBIZWFkZXIgRmllbGRzIFRvbyBMYXJnZVwiLFxuICBcIjQ1MVwiOiBcIlVuYXZhaWxhYmxlIEZvciBMZWdhbCBSZWFzb25zXCIsXG4gIFwiNTAwXCI6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsXG4gIFwiNTAxXCI6IFwiTm90IEltcGxlbWVudGVkXCIsXG4gIFwiNTAyXCI6IFwiQmFkIEdhdGV3YXlcIixcbiAgXCI1MDNcIjogXCJTZXJ2aWNlIFVuYXZhaWxhYmxlXCIsXG4gIFwiNTA0XCI6IFwiR2F0ZXdheSBUaW1lb3V0XCIsXG4gIFwiNTA1XCI6IFwiSFRUUCBWZXJzaW9uIE5vdCBTdXBwb3J0ZWRcIixcbiAgXCI1MDZcIjogXCJWYXJpYW50IEFsc28gTmVnb3RpYXRlc1wiLFxuICBcIjUwN1wiOiBcIkluc3VmZmljaWVudCBTdG9yYWdlXCIsXG4gIFwiNTA4XCI6IFwiTG9vcCBEZXRlY3RlZFwiLFxuICBcIjUwOVwiOiBcIkJhbmR3aWR0aCBMaW1pdCBFeGNlZWRlZFwiLFxuICBcIjUxMFwiOiBcIk5vdCBFeHRlbmRlZFwiLFxuICBcIjUxMVwiOiBcIk5ldHdvcmsgQXV0aGVudGljYXRpb24gUmVxdWlyZWRcIlxufVxuIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/ieee754/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/ieee754/index.js","source":"\"use strict\";\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJyZWFkIiwiYnVmZmVyIiwib2Zmc2V0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlIiwibSIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImkiLCJkIiwicyIsIk5hTiIsIkluZmluaXR5IiwiTWF0aCIsInBvdyIsIndyaXRlIiwidmFsdWUiLCJjIiwicnQiLCJhYnMiLCJpc05hTiIsImZsb29yIiwibG9nIiwiTE4yIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxRQUFRQyxJQUFSLEdBQWUsVUFBVUMsTUFBVixFQUFrQkMsTUFBbEIsRUFBMEJDLElBQTFCLEVBQWdDQyxJQUFoQyxFQUFzQ0MsTUFBdEMsRUFBOEM7QUFDM0QsTUFBSUMsQ0FBSixFQUFPQyxDQUFQO0FBQ0EsTUFBSUMsT0FBT0gsU0FBUyxDQUFULEdBQWFELElBQWIsR0FBb0IsQ0FBL0I7QUFDQSxNQUFJSyxPQUFPLENBQUMsS0FBS0QsSUFBTixJQUFjLENBQXpCO0FBQ0EsTUFBSUUsUUFBUUQsUUFBUSxDQUFwQjtBQUNBLE1BQUlFLFFBQVEsQ0FBQyxDQUFiO0FBQ0EsTUFBSUMsSUFBSVQsT0FBUUUsU0FBUyxDQUFqQixHQUFzQixDQUE5QjtBQUNBLE1BQUlRLElBQUlWLE9BQU8sQ0FBQyxDQUFSLEdBQVksQ0FBcEI7QUFDQSxNQUFJVyxJQUFJYixPQUFPQyxTQUFTVSxDQUFoQixDQUFSOztBQUVBQSxPQUFLQyxDQUFMOztBQUVBUCxNQUFJUSxJQUFLLENBQUMsS0FBTSxDQUFDSCxLQUFSLElBQWtCLENBQTNCO0FBQ0FHLFFBQU8sQ0FBQ0gsS0FBUjtBQUNBQSxXQUFTSCxJQUFUO0FBQ0EsU0FBT0csUUFBUSxDQUFmLEVBQWtCTCxJQUFJQSxJQUFJLEdBQUosR0FBVUwsT0FBT0MsU0FBU1UsQ0FBaEIsQ0FBZCxFQUFrQ0EsS0FBS0MsQ0FBdkMsRUFBMENGLFNBQVMsQ0FBckUsRUFBd0UsQ0FBRTs7QUFFMUVKLE1BQUlELElBQUss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TyxJQUFJSCxJQUFJSSxLQUFKLElBQWEsQ0FBakIsRUFBb0I7QUFDekJILFVBQUksQ0FBQ2EsUUFBUUMsQ0FBUixHQUFZLENBQWIsSUFBa0JKLEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVlkLElBQVosQ0FBdEI7QUFDQUUsVUFBSUEsSUFBSUksS0FBUjtBQUNELEtBSE0sTUFHQTtBQUNMSCxVQUFJYSxRQUFRSCxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZUixRQUFRLENBQXBCLENBQVIsR0FBaUNPLEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVlkLElBQVosQ0FBckM7QUFDQUUsVUFBSSxDQUFKO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPRixRQUFRLENBQWYsRUFBa0JILE9BQU9DLFNBQVNVLENBQWhCLElBQXFCTCxJQUFJLElBQXpCLEVBQStCSyxLQUFLQyxDQUFwQyxFQUF1Q04sS0FBSyxHQUE1QyxFQUFpREgsUUFBUSxDQUEzRSxFQUE4RSxDQUFFOztBQUVoRkUsTUFBS0EsS0FBS0YsSUFBTixHQUFjRyxDQUFsQjtBQUNBQyxVQUFRSixJQUFSO0FBQ0EsU0FBT0ksT0FBTyxDQUFkLEVBQWlCUCxPQUFPQyxTQUFTVSxDQUFoQixJQUFxQk4sSUFBSSxJQUF6QixFQUErQk0sS0FBS0MsQ0FBcEMsRUFBdUNQLEtBQUssR0FBNUMsRUFBaURFLFFBQVEsQ0FBMUUsRUFBNkUsQ0FBRTs7QUFFL0VQLFNBQU9DLFNBQVNVLENBQVQsR0FBYUMsQ0FBcEIsS0FBMEJDLElBQUksR0FBOUI7QUFDRCxDQWxERCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/base64-js/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/base64-js/index.js","source":"'use strict';\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n}\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction placeHoldersCount(b64) {\n  var len = b64.length;\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n}\n\nfunction byteLength(b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64);\n}\n\nfunction toByteArray(b64) {\n  var i, l, tmp, placeHolders, arr;\n  var len = b64.length;\n  placeHolders = placeHoldersCount(b64);\n\n  arr = new Arr(len * 3 / 4 - placeHolders);\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len;\n\n  var L = 0;\n\n  for (i = 0; i < l; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[L++] = tmp >> 16 & 0xFF;\n    arr[L++] = tmp >> 8 & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  if (placeHolders === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[L++] = tmp & 0xFF;\n  } else if (placeHolders === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[L++] = tmp >> 8 & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    output += lookup[tmp >> 2];\n    output += lookup[tmp << 4 & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    output += lookup[tmp >> 10];\n    output += lookup[tmp >> 4 & 0x3F];\n    output += lookup[tmp << 2 & 0x3F];\n    output += '=';\n  }\n\n  parts.push(output);\n\n  return parts.join('');\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/buffer/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/buffer/index.js","source":"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (isArrayBufferView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (isArrayBufferView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\n// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`\nfunction isArrayBufferView (obj) {\n  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","deps":{"ieee754":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/ieee754/index.js","base64-js":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/base64-js/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/capability.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/capability.js","source":"(function (global){\n'use strict';\n\nexports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);\n\nexports.blobConstructor = false;\ntry {\n\tnew Blob([new ArrayBuffer(1)]);\n\texports.blobConstructor = true;\n} catch (e) {}\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr;\nfunction getXHR() {\n\t// Cache the xhr value\n\tif (xhr !== undefined) return xhr;\n\n\tif (global.XMLHttpRequest) {\n\t\txhr = new global.XMLHttpRequest();\n\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t// Note: this doesn't actually make an http request.\n\t\ttry {\n\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');\n\t\t} catch (e) {\n\t\t\txhr = null;\n\t\t}\n\t} else {\n\t\t// Service workers don't have XHR\n\t\txhr = null;\n\t}\n\treturn xhr;\n}\n\nfunction checkTypeSupport(type) {\n\tvar xhr = getXHR();\n\tif (!xhr) return false;\n\ttry {\n\t\txhr.responseType = type;\n\t\treturn xhr.responseType === type;\n\t} catch (e) {}\n\treturn false;\n}\n\n// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\nvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';\nvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice);\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || haveArrayBuffer && checkTypeSupport('arraybuffer');\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');\nexports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer');\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);\n\nexports.vbArray = isFunction(global.VBArray);\n\nfunction isFunction(value) {\n\treturn typeof value === 'function';\n}\n\nxhr = null; // Help gc\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcGFiaWxpdHkuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsImZldGNoIiwiaXNGdW5jdGlvbiIsImdsb2JhbCIsIlJlYWRhYmxlU3RyZWFtIiwiYmxvYkNvbnN0cnVjdG9yIiwiQmxvYiIsIkFycmF5QnVmZmVyIiwiZSIsInhociIsImdldFhIUiIsInVuZGVmaW5lZCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIlhEb21haW5SZXF1ZXN0IiwiY2hlY2tUeXBlU3VwcG9ydCIsInR5cGUiLCJyZXNwb25zZVR5cGUiLCJoYXZlQXJyYXlCdWZmZXIiLCJoYXZlU2xpY2UiLCJwcm90b3R5cGUiLCJzbGljZSIsImFycmF5YnVmZmVyIiwibXNzdHJlYW0iLCJtb3pjaHVua2VkYXJyYXlidWZmZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwidmJBcnJheSIsIlZCQXJyYXkiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsUUFBUUMsS0FBUixHQUFnQkMsV0FBV0MsT0FBT0YsS0FBbEIsS0FBNEJDLFdBQVdDLE9BQU9DLGNBQWxCLENBQTVDOztBQUVBSixRQUFRSyxlQUFSLEdBQTBCLEtBQTFCO0FBQ0EsSUFBSTtBQUNILEtBQUlDLElBQUosQ0FBUyxDQUFDLElBQUlDLFdBQUosQ0FBZ0IsQ0FBaEIsQ0FBRCxDQUFUO0FBQ0FQLFNBQVFLLGVBQVIsR0FBMEIsSUFBMUI7QUFDQSxDQUhELENBR0UsT0FBT0csQ0FBUCxFQUFVLENBQUU7O0FBRWQ7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsR0FBSjtBQUNBLFNBQVNDLE1BQVQsR0FBbUI7QUFDbEI7QUFDQSxLQUFJRCxRQUFRRSxTQUFaLEVBQXVCLE9BQU9GLEdBQVA7O0FBRXZCLEtBQUlOLE9BQU9TLGNBQVgsRUFBMkI7QUFDMUJILFFBQU0sSUFBSU4sT0FBT1MsY0FBWCxFQUFOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSTtBQUNISCxPQUFJSSxJQUFKLENBQVMsS0FBVCxFQUFnQlYsT0FBT1csY0FBUCxHQUF3QixHQUF4QixHQUE4QixxQkFBOUM7QUFDQSxHQUZELENBRUUsT0FBTU4sQ0FBTixFQUFTO0FBQ1ZDLFNBQU0sSUFBTjtBQUNBO0FBQ0QsRUFWRCxNQVVPO0FBQ047QUFDQUEsUUFBTSxJQUFOO0FBQ0E7QUFDRCxRQUFPQSxHQUFQO0FBQ0E7O0FBRUQsU0FBU00sZ0JBQVQsQ0FBMkJDLElBQTNCLEVBQWlDO0FBQ2hDLEtBQUlQLE1BQU1DLFFBQVY7QUFDQSxLQUFJLENBQUNELEdBQUwsRUFBVSxPQUFPLEtBQVA7QUFDVixLQUFJO0FBQ0hBLE1BQUlRLFlBQUosR0FBbUJELElBQW5CO0FBQ0EsU0FBT1AsSUFBSVEsWUFBSixLQUFxQkQsSUFBNUI7QUFDQSxFQUhELENBR0UsT0FBT1IsQ0FBUCxFQUFVLENBQUU7QUFDZCxRQUFPLEtBQVA7QUFDQTs7QUFFRDtBQUNBO0FBQ0EsSUFBSVUsa0JBQWtCLE9BQU9mLE9BQU9JLFdBQWQsS0FBOEIsV0FBcEQ7QUFDQSxJQUFJWSxZQUFZRCxtQkFBbUJoQixXQUFXQyxPQUFPSSxXQUFQLENBQW1CYSxTQUFuQixDQUE2QkMsS0FBeEMsQ0FBbkM7O0FBRUE7QUFDQTtBQUNBckIsUUFBUXNCLFdBQVIsR0FBc0J0QixRQUFRQyxLQUFSLElBQWtCaUIsbUJBQW1CSCxpQkFBaUIsYUFBakIsQ0FBM0Q7O0FBRUE7QUFDQTtBQUNBZixRQUFRdUIsUUFBUixHQUFtQixDQUFDdkIsUUFBUUMsS0FBVCxJQUFrQmtCLFNBQWxCLElBQStCSixpQkFBaUIsV0FBakIsQ0FBbEQ7QUFDQWYsUUFBUXdCLHFCQUFSLEdBQWdDLENBQUN4QixRQUFRQyxLQUFULElBQWtCaUIsZUFBbEIsSUFDL0JILGlCQUFpQix5QkFBakIsQ0FERDs7QUFHQTtBQUNBO0FBQ0FmLFFBQVF5QixnQkFBUixHQUEyQnpCLFFBQVFDLEtBQVIsS0FBa0JTLFdBQVdSLFdBQVdRLFNBQVNlLGdCQUFwQixDQUFYLEdBQW1ELEtBQXJFLENBQTNCOztBQUVBekIsUUFBUTBCLE9BQVIsR0FBa0J4QixXQUFXQyxPQUFPd0IsT0FBbEIsQ0FBbEI7O0FBRUEsU0FBU3pCLFVBQVQsQ0FBcUIwQixLQUFyQixFQUE0QjtBQUMzQixRQUFPLE9BQU9BLEtBQVAsS0FBaUIsVUFBeEI7QUFDQTs7QUFFRG5CLE1BQU0sSUFBTixDLENBQVciLCJmaWxlIjoiY2FwYWJpbGl0eS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZmV0Y2ggPSBpc0Z1bmN0aW9uKGdsb2JhbC5mZXRjaCkgJiYgaXNGdW5jdGlvbihnbG9iYWwuUmVhZGFibGVTdHJlYW0pXG5cbmV4cG9ydHMuYmxvYkNvbnN0cnVjdG9yID0gZmFsc2VcbnRyeSB7XG5cdG5ldyBCbG9iKFtuZXcgQXJyYXlCdWZmZXIoMSldKVxuXHRleHBvcnRzLmJsb2JDb25zdHJ1Y3RvciA9IHRydWVcbn0gY2F0Y2ggKGUpIHt9XG5cbi8vIFRoZSB4aHIgcmVxdWVzdCB0byBleGFtcGxlLmNvbSBtYXkgdmlvbGF0ZSBzb21lIHJlc3RyaWN0aXZlIENTUCBjb25maWd1cmF0aW9ucyxcbi8vIHNvIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBicm93c2VyIHRoYXQgc3VwcG9ydHMgYGZldGNoYCwgYXZvaWQgY2FsbGluZyBnZXRYSFIoKVxuLy8gYW5kIGFzc3VtZSBzdXBwb3J0IGZvciBjZXJ0YWluIGZlYXR1cmVzIGJlbG93LlxudmFyIHhoclxuZnVuY3Rpb24gZ2V0WEhSICgpIHtcblx0Ly8gQ2FjaGUgdGhlIHhociB2YWx1ZVxuXHRpZiAoeGhyICE9PSB1bmRlZmluZWQpIHJldHVybiB4aHJcblxuXHRpZiAoZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KSB7XG5cdFx0eGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG5cdFx0Ly8gSWYgWERvbWFpblJlcXVlc3QgaXMgYXZhaWxhYmxlIChpZSBvbmx5LCB3aGVyZSB4aHIgbWlnaHQgbm90IHdvcmtcblx0XHQvLyBjcm9zcyBkb21haW4pLCB1c2UgdGhlIHBhZ2UgbG9jYXRpb24uIE90aGVyd2lzZSB1c2UgZXhhbXBsZS5jb21cblx0XHQvLyBOb3RlOiB0aGlzIGRvZXNuJ3QgYWN0dWFsbHkgbWFrZSBhbiBodHRwIHJlcXVlc3QuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKCdHRVQnLCBnbG9iYWwuWERvbWFpblJlcXVlc3QgPyAnLycgOiAnaHR0cHM6Ly9leGFtcGxlLmNvbScpXG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR4aHIgPSBudWxsXG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcnZpY2Ugd29ya2VycyBkb24ndCBoYXZlIFhIUlxuXHRcdHhociA9IG51bGxcblx0fVxuXHRyZXR1cm4geGhyXG59XG5cbmZ1bmN0aW9uIGNoZWNrVHlwZVN1cHBvcnQgKHR5cGUpIHtcblx0dmFyIHhociA9IGdldFhIUigpXG5cdGlmICgheGhyKSByZXR1cm4gZmFsc2Vcblx0dHJ5IHtcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gdHlwZVxuXHRcdHJldHVybiB4aHIucmVzcG9uc2VUeXBlID09PSB0eXBlXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZVxufVxuXG4vLyBGb3Igc29tZSBzdHJhbmdlIHJlYXNvbiwgU2FmYXJpIDcuMCByZXBvcnRzIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdvYmplY3QnLlxuLy8gU2FmYXJpIDcuMSBhcHBlYXJzIHRvIGhhdmUgZml4ZWQgdGhpcyBidWcuXG52YXIgaGF2ZUFycmF5QnVmZmVyID0gdHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCdcbnZhciBoYXZlU2xpY2UgPSBoYXZlQXJyYXlCdWZmZXIgJiYgaXNGdW5jdGlvbihnbG9iYWwuQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gYXJyYXlidWZmZXIgd2lsbCBiZSBzdXBwb3J0ZWQgdG9vLiBTa2lwIGNhbGxpbmdcbi8vIGNoZWNrVHlwZVN1cHBvcnQoKSwgc2luY2UgdGhhdCBjYWxscyBnZXRYSFIoKS5cbmV4cG9ydHMuYXJyYXlidWZmZXIgPSBleHBvcnRzLmZldGNoIHx8IChoYXZlQXJyYXlCdWZmZXIgJiYgY2hlY2tUeXBlU3VwcG9ydCgnYXJyYXlidWZmZXInKSlcblxuLy8gVGhlc2UgbmV4dCB0d28gdGVzdHMgdW5hdm9pZGFibHkgc2hvdyB3YXJuaW5ncyBpbiBDaHJvbWUuIFNpbmNlIGZldGNoIHdpbGwgYWx3YXlzXG4vLyBiZSB1c2VkIGlmIGl0J3MgYXZhaWxhYmxlLCBqdXN0IHJldHVybiBmYWxzZSBmb3IgdGhlc2UgdG8gYXZvaWQgdGhlIHdhcm5pbmdzLlxuZXhwb3J0cy5tc3N0cmVhbSA9ICFleHBvcnRzLmZldGNoICYmIGhhdmVTbGljZSAmJiBjaGVja1R5cGVTdXBwb3J0KCdtcy1zdHJlYW0nKVxuZXhwb3J0cy5tb3pjaHVua2VkYXJyYXlidWZmZXIgPSAhZXhwb3J0cy5mZXRjaCAmJiBoYXZlQXJyYXlCdWZmZXIgJiZcblx0Y2hlY2tUeXBlU3VwcG9ydCgnbW96LWNodW5rZWQtYXJyYXlidWZmZXInKVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gb3ZlcnJpZGVNaW1lVHlwZSB3aWxsIGJlIHN1cHBvcnRlZCB0b28uIFNraXAgY2FsbGluZ1xuLy8gZ2V0WEhSKCkuXG5leHBvcnRzLm92ZXJyaWRlTWltZVR5cGUgPSBleHBvcnRzLmZldGNoIHx8IChnZXRYSFIoKSA/IGlzRnVuY3Rpb24oZ2V0WEhSKCkub3ZlcnJpZGVNaW1lVHlwZSkgOiBmYWxzZSlcblxuZXhwb3J0cy52YkFycmF5ID0gaXNGdW5jdGlvbihnbG9iYWwuVkJBcnJheSlcblxuZnVuY3Rpb24gaXNGdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG54aHIgPSBudWxsIC8vIEhlbHAgZ2NcbiJdfQ==\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/xtend/immutable.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/xtend/immutable.js","source":"\"use strict\";\n\nmodule.exports = extend;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {};\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n\n    return target;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltbXV0YWJsZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZXh0ZW5kIiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwiY2FsbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQkMsTUFBakI7O0FBRUEsSUFBSUMsaUJBQWlCQyxPQUFPQyxTQUFQLENBQWlCRixjQUF0Qzs7QUFFQSxTQUFTRCxNQUFULEdBQWtCO0FBQ2QsUUFBSUksU0FBUyxFQUFiOztBQUVBLFNBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJQyxVQUFVQyxNQUE5QixFQUFzQ0YsR0FBdEMsRUFBMkM7QUFDdkMsWUFBSUcsU0FBU0YsVUFBVUQsQ0FBVixDQUFiOztBQUVBLGFBQUssSUFBSUksR0FBVCxJQUFnQkQsTUFBaEIsRUFBd0I7QUFDcEIsZ0JBQUlQLGVBQWVTLElBQWYsQ0FBb0JGLE1BQXBCLEVBQTRCQyxHQUE1QixDQUFKLEVBQXNDO0FBQ2xDTCx1QkFBT0ssR0FBUCxJQUFjRCxPQUFPQyxHQUFQLENBQWQ7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsV0FBT0wsTUFBUDtBQUNIIiwiZmlsZSI6ImltbXV0YWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICB2YXIgdGFyZ2V0ID0ge31cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV1cblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/decode.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/decode.js","source":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function (qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr,\n        vstr,\n        k,\n        v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlY29kZS5qcyJdLCJuYW1lcyI6WyJoYXNPd25Qcm9wZXJ0eSIsIm9iaiIsInByb3AiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsInFzIiwic2VwIiwiZXEiLCJvcHRpb25zIiwibGVuZ3RoIiwicmVnZXhwIiwic3BsaXQiLCJtYXhLZXlzIiwibGVuIiwiaSIsIngiLCJyZXBsYWNlIiwiaWR4IiwiaW5kZXhPZiIsImtzdHIiLCJ2c3RyIiwiayIsInYiLCJzdWJzdHIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc0FycmF5IiwicHVzaCIsIkFycmF5IiwieHMiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0EsY0FBVCxDQUF3QkMsR0FBeEIsRUFBNkJDLElBQTdCLEVBQW1DO0FBQ2pDLFNBQU9DLE9BQU9DLFNBQVAsQ0FBaUJKLGNBQWpCLENBQWdDSyxJQUFoQyxDQUFxQ0osR0FBckMsRUFBMENDLElBQTFDLENBQVA7QUFDRDs7QUFFREksT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxFQUFULEVBQWFDLEdBQWIsRUFBa0JDLEVBQWxCLEVBQXNCQyxPQUF0QixFQUErQjtBQUM5Q0YsUUFBTUEsT0FBTyxHQUFiO0FBQ0FDLE9BQUtBLE1BQU0sR0FBWDtBQUNBLE1BQUlULE1BQU0sRUFBVjs7QUFFQSxNQUFJLE9BQU9PLEVBQVAsS0FBYyxRQUFkLElBQTBCQSxHQUFHSSxNQUFILEtBQWMsQ0FBNUMsRUFBK0M7QUFDN0MsV0FBT1gsR0FBUDtBQUNEOztBQUVELE1BQUlZLFNBQVMsS0FBYjtBQUNBTCxPQUFLQSxHQUFHTSxLQUFILENBQVNMLEdBQVQsQ0FBTDs7QUFFQSxNQUFJTSxVQUFVLElBQWQ7QUFDQSxNQUFJSixXQUFXLE9BQU9BLFFBQVFJLE9BQWYsS0FBMkIsUUFBMUMsRUFBb0Q7QUFDbERBLGNBQVVKLFFBQVFJLE9BQWxCO0FBQ0Q7O0FBRUQsTUFBSUMsTUFBTVIsR0FBR0ksTUFBYjtBQUNBO0FBQ0EsTUFBSUcsVUFBVSxDQUFWLElBQWVDLE1BQU1ELE9BQXpCLEVBQWtDO0FBQ2hDQyxVQUFNRCxPQUFOO0FBQ0Q7O0FBRUQsT0FBSyxJQUFJRSxJQUFJLENBQWIsRUFBZ0JBLElBQUlELEdBQXBCLEVBQXlCLEVBQUVDLENBQTNCLEVBQThCO0FBQzVCLFFBQUlDLElBQUlWLEdBQUdTLENBQUgsRUFBTUUsT0FBTixDQUFjTixNQUFkLEVBQXNCLEtBQXRCLENBQVI7QUFBQSxRQUNJTyxNQUFNRixFQUFFRyxPQUFGLENBQVVYLEVBQVYsQ0FEVjtBQUFBLFFBRUlZLElBRko7QUFBQSxRQUVVQyxJQUZWO0FBQUEsUUFFZ0JDLENBRmhCO0FBQUEsUUFFbUJDLENBRm5COztBQUlBLFFBQUlMLE9BQU8sQ0FBWCxFQUFjO0FBQ1pFLGFBQU9KLEVBQUVRLE1BQUYsQ0FBUyxDQUFULEVBQVlOLEdBQVosQ0FBUDtBQUNBRyxhQUFPTCxFQUFFUSxNQUFGLENBQVNOLE1BQU0sQ0FBZixDQUFQO0FBQ0QsS0FIRCxNQUdPO0FBQ0xFLGFBQU9KLENBQVA7QUFDQUssYUFBTyxFQUFQO0FBQ0Q7O0FBRURDLFFBQUlHLG1CQUFtQkwsSUFBbkIsQ0FBSjtBQUNBRyxRQUFJRSxtQkFBbUJKLElBQW5CLENBQUo7O0FBRUEsUUFBSSxDQUFDdkIsZUFBZUMsR0FBZixFQUFvQnVCLENBQXBCLENBQUwsRUFBNkI7QUFDM0J2QixVQUFJdUIsQ0FBSixJQUFTQyxDQUFUO0FBQ0QsS0FGRCxNQUVPLElBQUlHLFFBQVEzQixJQUFJdUIsQ0FBSixDQUFSLENBQUosRUFBcUI7QUFDMUJ2QixVQUFJdUIsQ0FBSixFQUFPSyxJQUFQLENBQVlKLENBQVo7QUFDRCxLQUZNLE1BRUE7QUFDTHhCLFVBQUl1QixDQUFKLElBQVMsQ0FBQ3ZCLElBQUl1QixDQUFKLENBQUQsRUFBU0MsQ0FBVCxDQUFUO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPeEIsR0FBUDtBQUNELENBakREOztBQW1EQSxJQUFJMkIsVUFBVUUsTUFBTUYsT0FBTixJQUFpQixVQUFVRyxFQUFWLEVBQWM7QUFDM0MsU0FBTzVCLE9BQU9DLFNBQVAsQ0FBaUI0QixRQUFqQixDQUEwQjNCLElBQTFCLENBQStCMEIsRUFBL0IsTUFBdUMsZ0JBQTlDO0FBQ0QsQ0FGRCIsImZpbGUiOiJkZWNvZGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIl19","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/encode.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/encode.js","source":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar stringifyPrimitive = function stringifyPrimitive(v) {\n  switch (typeof v === 'undefined' ? 'undefined' : _typeof(v)) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function (obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n    return map(objectKeys(obj), function (k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function (v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map(xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuY29kZS5qcyJdLCJuYW1lcyI6WyJzdHJpbmdpZnlQcmltaXRpdmUiLCJ2IiwiaXNGaW5pdGUiLCJtb2R1bGUiLCJleHBvcnRzIiwib2JqIiwic2VwIiwiZXEiLCJuYW1lIiwidW5kZWZpbmVkIiwibWFwIiwib2JqZWN0S2V5cyIsImsiLCJrcyIsImVuY29kZVVSSUNvbXBvbmVudCIsImlzQXJyYXkiLCJqb2luIiwiQXJyYXkiLCJ4cyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImYiLCJyZXMiLCJpIiwibGVuZ3RoIiwicHVzaCIsImtleXMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7OztBQUVBLElBQUlBLHFCQUFxQixTQUFyQkEsa0JBQXFCLENBQVNDLENBQVQsRUFBWTtBQUNuQyxpQkFBZUEsQ0FBZix5Q0FBZUEsQ0FBZjtBQUNFLFNBQUssUUFBTDtBQUNFLGFBQU9BLENBQVA7O0FBRUYsU0FBSyxTQUFMO0FBQ0UsYUFBT0EsSUFBSSxNQUFKLEdBQWEsT0FBcEI7O0FBRUYsU0FBSyxRQUFMO0FBQ0UsYUFBT0MsU0FBU0QsQ0FBVCxJQUFjQSxDQUFkLEdBQWtCLEVBQXpCOztBQUVGO0FBQ0UsYUFBTyxFQUFQO0FBWEo7QUFhRCxDQWREOztBQWdCQUUsT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxHQUFULEVBQWNDLEdBQWQsRUFBbUJDLEVBQW5CLEVBQXVCQyxJQUF2QixFQUE2QjtBQUM1Q0YsUUFBTUEsT0FBTyxHQUFiO0FBQ0FDLE9BQUtBLE1BQU0sR0FBWDtBQUNBLE1BQUlGLFFBQVEsSUFBWixFQUFrQjtBQUNoQkEsVUFBTUksU0FBTjtBQUNEOztBQUVELE1BQUksUUFBT0osR0FBUCx5Q0FBT0EsR0FBUCxPQUFlLFFBQW5CLEVBQTZCO0FBQzNCLFdBQU9LLElBQUlDLFdBQVdOLEdBQVgsQ0FBSixFQUFxQixVQUFTTyxDQUFULEVBQVk7QUFDdEMsVUFBSUMsS0FBS0MsbUJBQW1CZCxtQkFBbUJZLENBQW5CLENBQW5CLElBQTRDTCxFQUFyRDtBQUNBLFVBQUlRLFFBQVFWLElBQUlPLENBQUosQ0FBUixDQUFKLEVBQXFCO0FBQ25CLGVBQU9GLElBQUlMLElBQUlPLENBQUosQ0FBSixFQUFZLFVBQVNYLENBQVQsRUFBWTtBQUM3QixpQkFBT1ksS0FBS0MsbUJBQW1CZCxtQkFBbUJDLENBQW5CLENBQW5CLENBQVo7QUFDRCxTQUZNLEVBRUplLElBRkksQ0FFQ1YsR0FGRCxDQUFQO0FBR0QsT0FKRCxNQUlPO0FBQ0wsZUFBT08sS0FBS0MsbUJBQW1CZCxtQkFBbUJLLElBQUlPLENBQUosQ0FBbkIsQ0FBbkIsQ0FBWjtBQUNEO0FBQ0YsS0FUTSxFQVNKSSxJQVRJLENBU0NWLEdBVEQsQ0FBUDtBQVdEOztBQUVELE1BQUksQ0FBQ0UsSUFBTCxFQUFXLE9BQU8sRUFBUDtBQUNYLFNBQU9NLG1CQUFtQmQsbUJBQW1CUSxJQUFuQixDQUFuQixJQUErQ0QsRUFBL0MsR0FDQU8sbUJBQW1CZCxtQkFBbUJLLEdBQW5CLENBQW5CLENBRFA7QUFFRCxDQXhCRDs7QUEwQkEsSUFBSVUsVUFBVUUsTUFBTUYsT0FBTixJQUFpQixVQUFVRyxFQUFWLEVBQWM7QUFDM0MsU0FBT0MsT0FBT0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCSixFQUEvQixNQUF1QyxnQkFBOUM7QUFDRCxDQUZEOztBQUlBLFNBQVNSLEdBQVQsQ0FBY1EsRUFBZCxFQUFrQkssQ0FBbEIsRUFBcUI7QUFDbkIsTUFBSUwsR0FBR1IsR0FBUCxFQUFZLE9BQU9RLEdBQUdSLEdBQUgsQ0FBT2EsQ0FBUCxDQUFQO0FBQ1osTUFBSUMsTUFBTSxFQUFWO0FBQ0EsT0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlQLEdBQUdRLE1BQXZCLEVBQStCRCxHQUEvQixFQUFvQztBQUNsQ0QsUUFBSUcsSUFBSixDQUFTSixFQUFFTCxHQUFHTyxDQUFILENBQUYsRUFBU0EsQ0FBVCxDQUFUO0FBQ0Q7QUFDRCxTQUFPRCxHQUFQO0FBQ0Q7O0FBRUQsSUFBSWIsYUFBYVEsT0FBT1MsSUFBUCxJQUFlLFVBQVV2QixHQUFWLEVBQWU7QUFDN0MsTUFBSW1CLE1BQU0sRUFBVjtBQUNBLE9BQUssSUFBSUssR0FBVCxJQUFnQnhCLEdBQWhCLEVBQXFCO0FBQ25CLFFBQUljLE9BQU9DLFNBQVAsQ0FBaUJVLGNBQWpCLENBQWdDUixJQUFoQyxDQUFxQ2pCLEdBQXJDLEVBQTBDd0IsR0FBMUMsQ0FBSixFQUFvREwsSUFBSUcsSUFBSixDQUFTRSxHQUFUO0FBQ3JEO0FBQ0QsU0FBT0wsR0FBUDtBQUNELENBTkQiLCJmaWxlIjoiZW5jb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5mdW5jdGlvbiBtYXAgKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHJldHVybiB4cy5tYXAoZik7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG4iXX0=","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/index.js","source":"'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","deps":{"./decode":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/decode.js","./encode":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/encode.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/url.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/url.js","source":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","deps":{"./util":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/util.js","punycode":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/punycode/punycode.js","querystring":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js","source":"'use strict';\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function TempCtor() {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluaGVyaXRzX2Jyb3dzZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiY3JlYXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsImluaGVyaXRzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJUZW1wQ3RvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLE9BQU9BLE9BQU9DLE1BQWQsS0FBeUIsVUFBN0IsRUFBeUM7QUFDdkM7QUFDQUMsU0FBT0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQWtCQyxJQUFsQixFQUF3QkMsU0FBeEIsRUFBbUM7QUFDbERELFNBQUtFLE1BQUwsR0FBY0QsU0FBZDtBQUNBRCxTQUFLRyxTQUFMLEdBQWlCUixPQUFPQyxNQUFQLENBQWNLLFVBQVVFLFNBQXhCLEVBQW1DO0FBQ2xEQyxtQkFBYTtBQUNYQyxlQUFPTCxJQURJO0FBRVhNLG9CQUFZLEtBRkQ7QUFHWEMsa0JBQVUsSUFIQztBQUlYQyxzQkFBYztBQUpIO0FBRHFDLEtBQW5DLENBQWpCO0FBUUQsR0FWRDtBQVdELENBYkQsTUFhTztBQUNMO0FBQ0FYLFNBQU9DLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLFNBQXhCLEVBQW1DO0FBQ2xERCxTQUFLRSxNQUFMLEdBQWNELFNBQWQ7QUFDQSxRQUFJUSxXQUFXLFNBQVhBLFFBQVcsR0FBWSxDQUFFLENBQTdCO0FBQ0FBLGFBQVNOLFNBQVQsR0FBcUJGLFVBQVVFLFNBQS9CO0FBQ0FILFNBQUtHLFNBQUwsR0FBaUIsSUFBSU0sUUFBSixFQUFqQjtBQUNBVCxTQUFLRyxTQUFMLENBQWVDLFdBQWYsR0FBNkJKLElBQTdCO0FBQ0QsR0FORDtBQU9EIiwiZmlsZSI6ImluaGVyaXRzX2Jyb3dzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/response.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/response.js","source":"(function (process,global,Buffer){\n'use strict';\n\nvar capability = require('./capability');\nvar inherits = require('inherits');\nvar stream = require('readable-stream');\n\nvar rStates = exports.readyStates = {\n\tUNSENT: 0,\n\tOPENED: 1,\n\tHEADERS_RECEIVED: 2,\n\tLOADING: 3,\n\tDONE: 4\n};\n\nvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {\n\tvar self = this;\n\tstream.Readable.call(self);\n\n\tself._mode = mode;\n\tself.headers = {};\n\tself.rawHeaders = [];\n\tself.trailers = {};\n\tself.rawTrailers = [];\n\n\t// Fake the 'close' event, but only once 'end' fires\n\tself.on('end', function () {\n\t\t// The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n\t\tprocess.nextTick(function () {\n\t\t\tself.emit('close');\n\t\t});\n\t});\n\n\tif (mode === 'fetch') {\n\t\tvar read = function read() {\n\t\t\treader.read().then(function (result) {\n\t\t\t\tif (self._destroyed) return;\n\t\t\t\tif (result.done) {\n\t\t\t\t\tself.push(null);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tself.push(new Buffer(result.value));\n\t\t\t\tread();\n\t\t\t}).catch(function (err) {\n\t\t\t\tself.emit('error', err);\n\t\t\t});\n\t\t};\n\n\t\tself._fetchResponse = response;\n\n\t\tself.url = response.url;\n\t\tself.statusCode = response.status;\n\t\tself.statusMessage = response.statusText;\n\n\t\tresponse.headers.forEach(function (header, key) {\n\t\t\tself.headers[key.toLowerCase()] = header;\n\t\t\tself.rawHeaders.push(key, header);\n\t\t});\n\n\t\t// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed\n\t\tvar reader = response.body.getReader();\n\n\t\tread();\n\t} else {\n\t\tself._xhr = xhr;\n\t\tself._pos = 0;\n\n\t\tself.url = xhr.responseURL;\n\t\tself.statusCode = xhr.status;\n\t\tself.statusMessage = xhr.statusText;\n\t\tvar headers = xhr.getAllResponseHeaders().split(/\\r?\\n/);\n\t\theaders.forEach(function (header) {\n\t\t\tvar matches = header.match(/^([^:]+):\\s*(.*)/);\n\t\t\tif (matches) {\n\t\t\t\tvar key = matches[1].toLowerCase();\n\t\t\t\tif (key === 'set-cookie') {\n\t\t\t\t\tif (self.headers[key] === undefined) {\n\t\t\t\t\t\tself.headers[key] = [];\n\t\t\t\t\t}\n\t\t\t\t\tself.headers[key].push(matches[2]);\n\t\t\t\t} else if (self.headers[key] !== undefined) {\n\t\t\t\t\tself.headers[key] += ', ' + matches[2];\n\t\t\t\t} else {\n\t\t\t\t\tself.headers[key] = matches[2];\n\t\t\t\t}\n\t\t\t\tself.rawHeaders.push(matches[1], matches[2]);\n\t\t\t}\n\t\t});\n\n\t\tself._charset = 'x-user-defined';\n\t\tif (!capability.overrideMimeType) {\n\t\t\tvar mimeType = self.rawHeaders['mime-type'];\n\t\t\tif (mimeType) {\n\t\t\t\tvar charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/);\n\t\t\t\tif (charsetMatch) {\n\t\t\t\t\tself._charset = charsetMatch[1].toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!self._charset) self._charset = 'utf-8'; // best guess\n\t\t}\n\t}\n};\n\ninherits(IncomingMessage, stream.Readable);\n\nIncomingMessage.prototype._read = function () {};\n\nIncomingMessage.prototype._onXHRProgress = function () {\n\tvar self = this;\n\n\tvar xhr = self._xhr;\n\n\tvar response = null;\n\tswitch (self._mode) {\n\t\tcase 'text:vbarray':\n\t\t\t// For IE9\n\t\t\tif (xhr.readyState !== rStates.DONE) break;\n\t\t\ttry {\n\t\t\t\t// This fails in IE8\n\t\t\t\tresponse = new global.VBArray(xhr.responseBody).toArray();\n\t\t\t} catch (e) {}\n\t\t\tif (response !== null) {\n\t\t\t\tself.push(new Buffer(response));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t// Falls through in IE8\t\n\t\tcase 'text':\n\t\t\ttry {\n\t\t\t\t// This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4\n\t\t\t\tresponse = xhr.responseText;\n\t\t\t} catch (e) {\n\t\t\t\tself._mode = 'text:vbarray';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (response.length > self._pos) {\n\t\t\t\tvar newData = response.substr(self._pos);\n\t\t\t\tif (self._charset === 'x-user-defined') {\n\t\t\t\t\tvar buffer = new Buffer(newData.length);\n\t\t\t\t\tfor (var i = 0; i < newData.length; i++) {\n\t\t\t\t\t\tbuffer[i] = newData.charCodeAt(i) & 0xff;\n\t\t\t\t\t}self.push(buffer);\n\t\t\t\t} else {\n\t\t\t\t\tself.push(newData, self._charset);\n\t\t\t\t}\n\t\t\t\tself._pos = response.length;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'arraybuffer':\n\t\t\tif (xhr.readyState !== rStates.DONE || !xhr.response) break;\n\t\t\tresponse = xhr.response;\n\t\t\tself.push(new Buffer(new Uint8Array(response)));\n\t\t\tbreak;\n\t\tcase 'moz-chunked-arraybuffer':\n\t\t\t// take whole\n\t\t\tresponse = xhr.response;\n\t\t\tif (xhr.readyState !== rStates.LOADING || !response) break;\n\t\t\tself.push(new Buffer(new Uint8Array(response)));\n\t\t\tbreak;\n\t\tcase 'ms-stream':\n\t\t\tresponse = xhr.response;\n\t\t\tif (xhr.readyState !== rStates.LOADING) break;\n\t\t\tvar reader = new global.MSStreamReader();\n\t\t\treader.onprogress = function () {\n\t\t\t\tif (reader.result.byteLength > self._pos) {\n\t\t\t\t\tself.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));\n\t\t\t\t\tself._pos = reader.result.byteLength;\n\t\t\t\t}\n\t\t\t};\n\t\t\treader.onload = function () {\n\t\t\t\tself.push(null);\n\t\t\t};\n\t\t\t// reader.onerror = ??? // TODO: this\n\t\t\treader.readAsArrayBuffer(response);\n\t\t\tbreak;\n\t}\n\n\t// The ms-stream case handles end separately in reader.onload()\n\tif (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n\t\tself.push(null);\n\t}\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer)","deps":{"_process":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process/browser.js","buffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/buffer/index.js","./capability":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/capability.js","inherits":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js","readable-stream":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/readable-browser.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/to-arraybuffer/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/to-arraybuffer/index.js","source":"'use strict';\n\nvar Buffer = require('buffer').Buffer;\n\nmodule.exports = function (buf) {\n\t// If the buffer is backed by a Uint8Array, a faster version will work\n\tif (buf instanceof Uint8Array) {\n\t\t// If the buffer isn't a subarray, return the underlying ArrayBuffer\n\t\tif (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n\t\t\treturn buf.buffer;\n\t\t} else if (typeof buf.buffer.slice === 'function') {\n\t\t\t// Otherwise we need to get a proper copy\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\t}\n\t}\n\n\tif (Buffer.isBuffer(buf)) {\n\t\t// This is the slow version that will work with any Buffer\n\t\t// implementation (even in old browsers)\n\t\tvar arrayCopy = new Uint8Array(buf.length);\n\t\tvar len = buf.length;\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tarrayCopy[i] = buf[i];\n\t\t}\n\t\treturn arrayCopy.buffer;\n\t} else {\n\t\tthrow new Error('Argument must be a Buffer');\n\t}\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkJ1ZmZlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVmIiwiVWludDhBcnJheSIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiYnVmZmVyIiwic2xpY2UiLCJpc0J1ZmZlciIsImFycmF5Q29weSIsImxlbmd0aCIsImxlbiIsImkiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxRQUFRLFFBQVIsRUFBa0JELE1BQS9COztBQUVBRSxPQUFPQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZTtBQUMvQjtBQUNBLEtBQUlBLGVBQWVDLFVBQW5CLEVBQStCO0FBQzlCO0FBQ0EsTUFBSUQsSUFBSUUsVUFBSixLQUFtQixDQUFuQixJQUF3QkYsSUFBSUcsVUFBSixLQUFtQkgsSUFBSUksTUFBSixDQUFXRCxVQUExRCxFQUFzRTtBQUNyRSxVQUFPSCxJQUFJSSxNQUFYO0FBQ0EsR0FGRCxNQUVPLElBQUksT0FBT0osSUFBSUksTUFBSixDQUFXQyxLQUFsQixLQUE0QixVQUFoQyxFQUE0QztBQUNsRDtBQUNBLFVBQU9MLElBQUlJLE1BQUosQ0FBV0MsS0FBWCxDQUFpQkwsSUFBSUUsVUFBckIsRUFBaUNGLElBQUlFLFVBQUosR0FBaUJGLElBQUlHLFVBQXRELENBQVA7QUFDQTtBQUNEOztBQUVELEtBQUlQLE9BQU9VLFFBQVAsQ0FBZ0JOLEdBQWhCLENBQUosRUFBMEI7QUFDekI7QUFDQTtBQUNBLE1BQUlPLFlBQVksSUFBSU4sVUFBSixDQUFlRCxJQUFJUSxNQUFuQixDQUFoQjtBQUNBLE1BQUlDLE1BQU1ULElBQUlRLE1BQWQ7QUFDQSxPQUFLLElBQUlFLElBQUksQ0FBYixFQUFnQkEsSUFBSUQsR0FBcEIsRUFBeUJDLEdBQXpCLEVBQThCO0FBQzdCSCxhQUFVRyxDQUFWLElBQWVWLElBQUlVLENBQUosQ0FBZjtBQUNBO0FBQ0QsU0FBT0gsVUFBVUgsTUFBakI7QUFDQSxFQVRELE1BU087QUFDTixRQUFNLElBQUlPLEtBQUosQ0FBVSwyQkFBVixDQUFOO0FBQ0E7QUFDRCxDQXhCRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmKSB7XG5cdC8vIElmIHRoZSBidWZmZXIgaXMgYmFja2VkIGJ5IGEgVWludDhBcnJheSwgYSBmYXN0ZXIgdmVyc2lvbiB3aWxsIHdvcmtcblx0aWYgKGJ1ZiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcblx0XHQvLyBJZiB0aGUgYnVmZmVyIGlzbid0IGEgc3ViYXJyYXksIHJldHVybiB0aGUgdW5kZXJseWluZyBBcnJheUJ1ZmZlclxuXHRcdGlmIChidWYuYnl0ZU9mZnNldCA9PT0gMCAmJiBidWYuYnl0ZUxlbmd0aCA9PT0gYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gYnVmLmJ1ZmZlclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIGJ1Zi5idWZmZXIuc2xpY2UgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIHRvIGdldCBhIHByb3BlciBjb3B5XG5cdFx0XHRyZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYuYnl0ZUxlbmd0aClcblx0XHR9XG5cdH1cblxuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcblx0XHQvLyBUaGlzIGlzIHRoZSBzbG93IHZlcnNpb24gdGhhdCB3aWxsIHdvcmsgd2l0aCBhbnkgQnVmZmVyXG5cdFx0Ly8gaW1wbGVtZW50YXRpb24gKGV2ZW4gaW4gb2xkIGJyb3dzZXJzKVxuXHRcdHZhciBhcnJheUNvcHkgPSBuZXcgVWludDhBcnJheShidWYubGVuZ3RoKVxuXHRcdHZhciBsZW4gPSBidWYubGVuZ3RoXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0YXJyYXlDb3B5W2ldID0gYnVmW2ldXG5cdFx0fVxuXHRcdHJldHVybiBhcnJheUNvcHkuYnVmZmVyXG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcblx0fVxufVxuIl19","deps":{"buffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/buffer/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/browser-resolve/empty.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/browser-resolve/empty.js","source":"","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/events/events.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/events/events.js","source":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/stream-browser.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/stream-browser.js","source":"'use strict';\n\nmodule.exports = require('events').EventEmitter;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmVhbS1icm93c2VyLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiRXZlbnRFbWl0dGVyIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCQyxRQUFRLFFBQVIsRUFBa0JDLFlBQW5DIiwiZmlsZSI6InN0cmVhbS1icm93c2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iXX0=","deps":{"events":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/events/events.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_duplex.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_duplex.js","source":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  processNextTick(cb, err);\n};\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"./_stream_readable":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_writable.js","process-nextick-args":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process-nextick-args/index.js","inherits":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js","core-util-is":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/core-util-is/lib/util.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_transform.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_transform.js","source":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return stream.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er, data) {\n      done(stream, er, data);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"./_stream_duplex":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_duplex.js","inherits":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js","core-util-is":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/core-util-is/lib/util.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_passthrough.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_passthrough.js","source":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdHJlYW1fcGFzc3Rocm91Z2guanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlBhc3NUaHJvdWdoIiwiVHJhbnNmb3JtIiwicmVxdWlyZSIsInV0aWwiLCJpbmhlcml0cyIsIm9wdGlvbnMiLCJjYWxsIiwicHJvdG90eXBlIiwiX3RyYW5zZm9ybSIsImNodW5rIiwiZW5jb2RpbmciLCJjYiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUFBLE9BQU9DLE9BQVAsR0FBaUJDLFdBQWpCOztBQUVBLElBQUlDLFlBQVlDLFFBQVEscUJBQVIsQ0FBaEI7O0FBRUE7QUFDQSxJQUFJQyxPQUFPRCxRQUFRLGNBQVIsQ0FBWDtBQUNBQyxLQUFLQyxRQUFMLEdBQWdCRixRQUFRLFVBQVIsQ0FBaEI7QUFDQTs7QUFFQUMsS0FBS0MsUUFBTCxDQUFjSixXQUFkLEVBQTJCQyxTQUEzQjs7QUFFQSxTQUFTRCxXQUFULENBQXFCSyxPQUFyQixFQUE4QjtBQUM1QixNQUFJLEVBQUUsZ0JBQWdCTCxXQUFsQixDQUFKLEVBQW9DLE9BQU8sSUFBSUEsV0FBSixDQUFnQkssT0FBaEIsQ0FBUDs7QUFFcENKLFlBQVVLLElBQVYsQ0FBZSxJQUFmLEVBQXFCRCxPQUFyQjtBQUNEOztBQUVETCxZQUFZTyxTQUFaLENBQXNCQyxVQUF0QixHQUFtQyxVQUFVQyxLQUFWLEVBQWlCQyxRQUFqQixFQUEyQkMsRUFBM0IsRUFBK0I7QUFDaEVBLEtBQUcsSUFBSCxFQUFTRixLQUFUO0FBQ0QsQ0FGRCIsImZpbGUiOiJfc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07Il19","deps":{"./_stream_transform":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_transform.js","inherits":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js","core-util-is":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/core-util-is/lib/util.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/isarray/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/isarray/index.js","source":"'use strict';\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5IiwiaXNBcnJheSIsImFyciIsImNhbGwiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsV0FBVyxHQUFHQSxRQUFsQjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQkMsTUFBTUMsT0FBTixJQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFDL0MsU0FBT0wsU0FBU00sSUFBVCxDQUFjRCxHQUFkLEtBQXNCLGdCQUE3QjtBQUNELENBRkQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/util-deprecate/browser.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/util-deprecate/browser.js","source":"(function (global){\n'use strict';\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate(fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config(name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImRlcHJlY2F0ZSIsImZuIiwibXNnIiwiY29uZmlnIiwid2FybmVkIiwiZGVwcmVjYXRlZCIsIkVycm9yIiwiY29uc29sZSIsInRyYWNlIiwid2FybiIsImFwcGx5IiwiYXJndW1lbnRzIiwibmFtZSIsImdsb2JhbCIsImxvY2FsU3RvcmFnZSIsIl8iLCJ2YWwiLCJTdHJpbmciLCJ0b0xvd2VyQ2FzZSJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7OztBQUlBQSxPQUFPQyxPQUFQLEdBQWlCQyxTQUFqQjs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLFNBQVNBLFNBQVQsQ0FBb0JDLEVBQXBCLEVBQXdCQyxHQUF4QixFQUE2QjtBQUMzQixNQUFJQyxPQUFPLGVBQVAsQ0FBSixFQUE2QjtBQUMzQixXQUFPRixFQUFQO0FBQ0Q7O0FBRUQsTUFBSUcsU0FBUyxLQUFiO0FBQ0EsV0FBU0MsVUFBVCxHQUFzQjtBQUNwQixRQUFJLENBQUNELE1BQUwsRUFBYTtBQUNYLFVBQUlELE9BQU8sa0JBQVAsQ0FBSixFQUFnQztBQUM5QixjQUFNLElBQUlHLEtBQUosQ0FBVUosR0FBVixDQUFOO0FBQ0QsT0FGRCxNQUVPLElBQUlDLE9BQU8sa0JBQVAsQ0FBSixFQUFnQztBQUNyQ0ksZ0JBQVFDLEtBQVIsQ0FBY04sR0FBZDtBQUNELE9BRk0sTUFFQTtBQUNMSyxnQkFBUUUsSUFBUixDQUFhUCxHQUFiO0FBQ0Q7QUFDREUsZUFBUyxJQUFUO0FBQ0Q7QUFDRCxXQUFPSCxHQUFHUyxLQUFILENBQVMsSUFBVCxFQUFlQyxTQUFmLENBQVA7QUFDRDs7QUFFRCxTQUFPTixVQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7O0FBUUEsU0FBU0YsTUFBVCxDQUFpQlMsSUFBakIsRUFBdUI7QUFDckI7QUFDQSxNQUFJO0FBQ0YsUUFBSSxDQUFDQyxPQUFPQyxZQUFaLEVBQTBCLE9BQU8sS0FBUDtBQUMzQixHQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsV0FBTyxLQUFQO0FBQ0Q7QUFDRCxNQUFJQyxNQUFNSCxPQUFPQyxZQUFQLENBQW9CRixJQUFwQixDQUFWO0FBQ0EsTUFBSSxRQUFRSSxHQUFaLEVBQWlCLE9BQU8sS0FBUDtBQUNqQixTQUFPQyxPQUFPRCxHQUFQLEVBQVlFLFdBQVosT0FBOEIsTUFBckM7QUFDRCIsImZpbGUiOiJicm93c2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIl19\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process-nextick-args/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process-nextick-args/index.js","source":"(function (process){\n'use strict';\n\nif (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = nextTick;\n} else {\n  module.exports = process.nextTick;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n    case 0:\n    case 1:\n      return process.nextTick(fn);\n    case 2:\n      return process.nextTick(function afterTickOne() {\n        fn.call(null, arg1);\n      });\n    case 3:\n      return process.nextTick(function afterTickTwo() {\n        fn.call(null, arg1, arg2);\n      });\n    case 4:\n      return process.nextTick(function afterTickThree() {\n        fn.call(null, arg1, arg2, arg3);\n      });\n    default:\n      args = new Array(len - 1);\n      i = 0;\n      while (i < args.length) {\n        args[i++] = arguments[i];\n      }\n      return process.nextTick(function afterTick() {\n        fn.apply(null, args);\n      });\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJ2ZXJzaW9uIiwiaW5kZXhPZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0VGljayIsImZuIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiVHlwZUVycm9yIiwibGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsImkiLCJhZnRlclRpY2tPbmUiLCJjYWxsIiwiYWZ0ZXJUaWNrVHdvIiwiYWZ0ZXJUaWNrVGhyZWUiLCJBcnJheSIsImFmdGVyVGljayIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJLENBQUNBLFFBQVFDLE9BQVQsSUFDQUQsUUFBUUMsT0FBUixDQUFnQkMsT0FBaEIsQ0FBd0IsS0FBeEIsTUFBbUMsQ0FEbkMsSUFFQUYsUUFBUUMsT0FBUixDQUFnQkMsT0FBaEIsQ0FBd0IsS0FBeEIsTUFBbUMsQ0FBbkMsSUFBd0NGLFFBQVFDLE9BQVIsQ0FBZ0JDLE9BQWhCLENBQXdCLE9BQXhCLE1BQXFDLENBRmpGLEVBRW9GO0FBQ2xGQyxTQUFPQyxPQUFQLEdBQWlCQyxRQUFqQjtBQUNELENBSkQsTUFJTztBQUNMRixTQUFPQyxPQUFQLEdBQWlCSixRQUFRSyxRQUF6QjtBQUNEOztBQUVELFNBQVNBLFFBQVQsQ0FBa0JDLEVBQWxCLEVBQXNCQyxJQUF0QixFQUE0QkMsSUFBNUIsRUFBa0NDLElBQWxDLEVBQXdDO0FBQ3RDLE1BQUksT0FBT0gsRUFBUCxLQUFjLFVBQWxCLEVBQThCO0FBQzVCLFVBQU0sSUFBSUksU0FBSixDQUFjLHdDQUFkLENBQU47QUFDRDtBQUNELE1BQUlDLE1BQU1DLFVBQVVDLE1BQXBCO0FBQ0EsTUFBSUMsSUFBSixFQUFVQyxDQUFWO0FBQ0EsVUFBUUosR0FBUjtBQUNBLFNBQUssQ0FBTDtBQUNBLFNBQUssQ0FBTDtBQUNFLGFBQU9YLFFBQVFLLFFBQVIsQ0FBaUJDLEVBQWpCLENBQVA7QUFDRixTQUFLLENBQUw7QUFDRSxhQUFPTixRQUFRSyxRQUFSLENBQWlCLFNBQVNXLFlBQVQsR0FBd0I7QUFDOUNWLFdBQUdXLElBQUgsQ0FBUSxJQUFSLEVBQWNWLElBQWQ7QUFDRCxPQUZNLENBQVA7QUFHRixTQUFLLENBQUw7QUFDRSxhQUFPUCxRQUFRSyxRQUFSLENBQWlCLFNBQVNhLFlBQVQsR0FBd0I7QUFDOUNaLFdBQUdXLElBQUgsQ0FBUSxJQUFSLEVBQWNWLElBQWQsRUFBb0JDLElBQXBCO0FBQ0QsT0FGTSxDQUFQO0FBR0YsU0FBSyxDQUFMO0FBQ0UsYUFBT1IsUUFBUUssUUFBUixDQUFpQixTQUFTYyxjQUFULEdBQTBCO0FBQ2hEYixXQUFHVyxJQUFILENBQVEsSUFBUixFQUFjVixJQUFkLEVBQW9CQyxJQUFwQixFQUEwQkMsSUFBMUI7QUFDRCxPQUZNLENBQVA7QUFHRjtBQUNFSyxhQUFPLElBQUlNLEtBQUosQ0FBVVQsTUFBTSxDQUFoQixDQUFQO0FBQ0FJLFVBQUksQ0FBSjtBQUNBLGFBQU9BLElBQUlELEtBQUtELE1BQWhCLEVBQXdCO0FBQ3RCQyxhQUFLQyxHQUFMLElBQVlILFVBQVVHLENBQVYsQ0FBWjtBQUNEO0FBQ0QsYUFBT2YsUUFBUUssUUFBUixDQUFpQixTQUFTZ0IsU0FBVCxHQUFxQjtBQUMzQ2YsV0FBR2dCLEtBQUgsQ0FBUyxJQUFULEVBQWVSLElBQWY7QUFDRCxPQUZNLENBQVA7QUF0QkY7QUEwQkQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gbmV4dFRpY2s7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3MubmV4dFRpY2s7XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzLCBpO1xuICBzd2l0Y2ggKGxlbikge1xuICBjYXNlIDA6XG4gIGNhc2UgMTpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gIGNhc2UgMjpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tPbmUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEpO1xuICAgIH0pO1xuICBjYXNlIDM6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVHdvKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyKTtcbiAgICB9KTtcbiAgY2FzZSA0OlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1RocmVlKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9KTtcbiAgZGVmYXVsdDpcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrKCkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==\n}).call(this,require('_process'))","deps":{"_process":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process/browser.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/safe-buffer/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/safe-buffer/index.js","source":"'use strict';\n\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer');\nvar Buffer = buffer.Buffer;\n\n// alternative to using Object.keys for old browsers\nfunction copyProps(src, dst) {\n  for (var key in src) {\n    dst[key] = src[key];\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer;\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports);\n  exports.Buffer = SafeBuffer;\n}\n\nfunction SafeBuffer(arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length);\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer);\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number');\n  }\n  return Buffer(arg, encodingOrOffset, length);\n};\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n  var buf = Buffer(size);\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding);\n    } else {\n      buf.fill(fill);\n    }\n  } else {\n    buf.fill(0);\n  }\n  return buf;\n};\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n  return Buffer(size);\n};\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n  return buffer.SlowBuffer(size);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImJ1ZmZlciIsInJlcXVpcmUiLCJCdWZmZXIiLCJjb3B5UHJvcHMiLCJzcmMiLCJkc3QiLCJrZXkiLCJmcm9tIiwiYWxsb2MiLCJhbGxvY1Vuc2FmZSIsImFsbG9jVW5zYWZlU2xvdyIsIm1vZHVsZSIsImV4cG9ydHMiLCJTYWZlQnVmZmVyIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImxlbmd0aCIsIlR5cGVFcnJvciIsInNpemUiLCJmaWxsIiwiZW5jb2RpbmciLCJidWYiLCJ1bmRlZmluZWQiLCJTbG93QnVmZmVyIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsSUFBSUEsU0FBU0MsUUFBUSxRQUFSLENBQWI7QUFDQSxJQUFJQyxTQUFTRixPQUFPRSxNQUFwQjs7QUFFQTtBQUNBLFNBQVNDLFNBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCQyxHQUF6QixFQUE4QjtBQUM1QixPQUFLLElBQUlDLEdBQVQsSUFBZ0JGLEdBQWhCLEVBQXFCO0FBQ25CQyxRQUFJQyxHQUFKLElBQVdGLElBQUlFLEdBQUosQ0FBWDtBQUNEO0FBQ0Y7QUFDRCxJQUFJSixPQUFPSyxJQUFQLElBQWVMLE9BQU9NLEtBQXRCLElBQStCTixPQUFPTyxXQUF0QyxJQUFxRFAsT0FBT1EsZUFBaEUsRUFBaUY7QUFDL0VDLFNBQU9DLE9BQVAsR0FBaUJaLE1BQWpCO0FBQ0QsQ0FGRCxNQUVPO0FBQ0w7QUFDQUcsWUFBVUgsTUFBVixFQUFrQlksT0FBbEI7QUFDQUEsVUFBUVYsTUFBUixHQUFpQlcsVUFBakI7QUFDRDs7QUFFRCxTQUFTQSxVQUFULENBQXFCQyxHQUFyQixFQUEwQkMsZ0JBQTFCLEVBQTRDQyxNQUE1QyxFQUFvRDtBQUNsRCxTQUFPZCxPQUFPWSxHQUFQLEVBQVlDLGdCQUFaLEVBQThCQyxNQUE5QixDQUFQO0FBQ0Q7O0FBRUQ7QUFDQWIsVUFBVUQsTUFBVixFQUFrQlcsVUFBbEI7O0FBRUFBLFdBQVdOLElBQVgsR0FBa0IsVUFBVU8sR0FBVixFQUFlQyxnQkFBZixFQUFpQ0MsTUFBakMsRUFBeUM7QUFDekQsTUFBSSxPQUFPRixHQUFQLEtBQWUsUUFBbkIsRUFBNkI7QUFDM0IsVUFBTSxJQUFJRyxTQUFKLENBQWMsK0JBQWQsQ0FBTjtBQUNEO0FBQ0QsU0FBT2YsT0FBT1ksR0FBUCxFQUFZQyxnQkFBWixFQUE4QkMsTUFBOUIsQ0FBUDtBQUNELENBTEQ7O0FBT0FILFdBQVdMLEtBQVgsR0FBbUIsVUFBVVUsSUFBVixFQUFnQkMsSUFBaEIsRUFBc0JDLFFBQXRCLEVBQWdDO0FBQ2pELE1BQUksT0FBT0YsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUM1QixVQUFNLElBQUlELFNBQUosQ0FBYywyQkFBZCxDQUFOO0FBQ0Q7QUFDRCxNQUFJSSxNQUFNbkIsT0FBT2dCLElBQVAsQ0FBVjtBQUNBLE1BQUlDLFNBQVNHLFNBQWIsRUFBd0I7QUFDdEIsUUFBSSxPQUFPRixRQUFQLEtBQW9CLFFBQXhCLEVBQWtDO0FBQ2hDQyxVQUFJRixJQUFKLENBQVNBLElBQVQsRUFBZUMsUUFBZjtBQUNELEtBRkQsTUFFTztBQUNMQyxVQUFJRixJQUFKLENBQVNBLElBQVQ7QUFDRDtBQUNGLEdBTkQsTUFNTztBQUNMRSxRQUFJRixJQUFKLENBQVMsQ0FBVDtBQUNEO0FBQ0QsU0FBT0UsR0FBUDtBQUNELENBZkQ7O0FBaUJBUixXQUFXSixXQUFYLEdBQXlCLFVBQVVTLElBQVYsRUFBZ0I7QUFDdkMsTUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCLFVBQU0sSUFBSUQsU0FBSixDQUFjLDJCQUFkLENBQU47QUFDRDtBQUNELFNBQU9mLE9BQU9nQixJQUFQLENBQVA7QUFDRCxDQUxEOztBQU9BTCxXQUFXSCxlQUFYLEdBQTZCLFVBQVVRLElBQVYsRUFBZ0I7QUFDM0MsTUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCLFVBQU0sSUFBSUQsU0FBSixDQUFjLDJCQUFkLENBQU47QUFDRDtBQUNELFNBQU9qQixPQUFPdUIsVUFBUCxDQUFrQkwsSUFBbEIsQ0FBUDtBQUNELENBTEQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIl19","deps":{"buffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/buffer/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-buffer/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-buffer/index.js","source":"'use strict';\n\n/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);\n};\n\nfunction isBuffer(obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer(obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJvYmoiLCJpc0J1ZmZlciIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwicmVhZEZsb2F0TEUiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFDOUIsU0FBT0EsT0FBTyxJQUFQLEtBQWdCQyxTQUFTRCxHQUFULEtBQWlCRSxhQUFhRixHQUFiLENBQWpCLElBQXNDLENBQUMsQ0FBQ0EsSUFBSUcsU0FBNUQsQ0FBUDtBQUNELENBRkQ7O0FBSUEsU0FBU0YsUUFBVCxDQUFtQkQsR0FBbkIsRUFBd0I7QUFDdEIsU0FBTyxDQUFDLENBQUNBLElBQUlJLFdBQU4sSUFBcUIsT0FBT0osSUFBSUksV0FBSixDQUFnQkgsUUFBdkIsS0FBb0MsVUFBekQsSUFBdUVELElBQUlJLFdBQUosQ0FBZ0JILFFBQWhCLENBQXlCRCxHQUF6QixDQUE5RTtBQUNEOztBQUVEO0FBQ0EsU0FBU0UsWUFBVCxDQUF1QkYsR0FBdkIsRUFBNEI7QUFDMUIsU0FBTyxPQUFPQSxJQUFJSyxXQUFYLEtBQTJCLFVBQTNCLElBQXlDLE9BQU9MLElBQUlNLEtBQVgsS0FBcUIsVUFBOUQsSUFBNEVMLFNBQVNELElBQUlNLEtBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUFULENBQW5GO0FBQ0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiJdfQ==","deps":{}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/core-util-is/lib/util.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/core-util-is/lib/util.js","source":"(function (Buffer){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return objectToString(e) === '[object Error]' || e instanceof Error;\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol\n  typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOlsiaXNBcnJheSIsImFyZyIsIkFycmF5Iiwib2JqZWN0VG9TdHJpbmciLCJleHBvcnRzIiwiaXNCb29sZWFuIiwiaXNOdWxsIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc051bWJlciIsImlzU3RyaW5nIiwiaXNTeW1ib2wiLCJpc1VuZGVmaW5lZCIsImlzUmVnRXhwIiwicmUiLCJpc09iamVjdCIsImlzRGF0ZSIsImQiLCJpc0Vycm9yIiwiZSIsIkVycm9yIiwiaXNGdW5jdGlvbiIsImlzUHJpbWl0aXZlIiwiaXNCdWZmZXIiLCJCdWZmZXIiLCJvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVNBLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQ3BCLE1BQUlDLE1BQU1GLE9BQVYsRUFBbUI7QUFDakIsV0FBT0UsTUFBTUYsT0FBTixDQUFjQyxHQUFkLENBQVA7QUFDRDtBQUNELFNBQU9FLGVBQWVGLEdBQWYsTUFBd0IsZ0JBQS9CO0FBQ0Q7QUFDREcsUUFBUUosT0FBUixHQUFrQkEsT0FBbEI7O0FBRUEsU0FBU0ssU0FBVCxDQUFtQkosR0FBbkIsRUFBd0I7QUFDdEIsU0FBTyxPQUFPQSxHQUFQLEtBQWUsU0FBdEI7QUFDRDtBQUNERyxRQUFRQyxTQUFSLEdBQW9CQSxTQUFwQjs7QUFFQSxTQUFTQyxNQUFULENBQWdCTCxHQUFoQixFQUFxQjtBQUNuQixTQUFPQSxRQUFRLElBQWY7QUFDRDtBQUNERyxRQUFRRSxNQUFSLEdBQWlCQSxNQUFqQjs7QUFFQSxTQUFTQyxpQkFBVCxDQUEyQk4sR0FBM0IsRUFBZ0M7QUFDOUIsU0FBT0EsT0FBTyxJQUFkO0FBQ0Q7QUFDREcsUUFBUUcsaUJBQVIsR0FBNEJBLGlCQUE1Qjs7QUFFQSxTQUFTQyxRQUFULENBQWtCUCxHQUFsQixFQUF1QjtBQUNyQixTQUFPLE9BQU9BLEdBQVAsS0FBZSxRQUF0QjtBQUNEO0FBQ0RHLFFBQVFJLFFBQVIsR0FBbUJBLFFBQW5COztBQUVBLFNBQVNDLFFBQVQsQ0FBa0JSLEdBQWxCLEVBQXVCO0FBQ3JCLFNBQU8sT0FBT0EsR0FBUCxLQUFlLFFBQXRCO0FBQ0Q7QUFDREcsUUFBUUssUUFBUixHQUFtQkEsUUFBbkI7O0FBRUEsU0FBU0MsUUFBVCxDQUFrQlQsR0FBbEIsRUFBdUI7QUFDckIsU0FBTyxRQUFPQSxHQUFQLHlDQUFPQSxHQUFQLE9BQWUsUUFBdEI7QUFDRDtBQUNERyxRQUFRTSxRQUFSLEdBQW1CQSxRQUFuQjs7QUFFQSxTQUFTQyxXQUFULENBQXFCVixHQUFyQixFQUEwQjtBQUN4QixTQUFPQSxRQUFRLEtBQUssQ0FBcEI7QUFDRDtBQUNERyxRQUFRTyxXQUFSLEdBQXNCQSxXQUF0Qjs7QUFFQSxTQUFTQyxRQUFULENBQWtCQyxFQUFsQixFQUFzQjtBQUNwQixTQUFPVixlQUFlVSxFQUFmLE1BQXVCLGlCQUE5QjtBQUNEO0FBQ0RULFFBQVFRLFFBQVIsR0FBbUJBLFFBQW5COztBQUVBLFNBQVNFLFFBQVQsQ0FBa0JiLEdBQWxCLEVBQXVCO0FBQ3JCLFNBQU8sUUFBT0EsR0FBUCx5Q0FBT0EsR0FBUCxPQUFlLFFBQWYsSUFBMkJBLFFBQVEsSUFBMUM7QUFDRDtBQUNERyxRQUFRVSxRQUFSLEdBQW1CQSxRQUFuQjs7QUFFQSxTQUFTQyxNQUFULENBQWdCQyxDQUFoQixFQUFtQjtBQUNqQixTQUFPYixlQUFlYSxDQUFmLE1BQXNCLGVBQTdCO0FBQ0Q7QUFDRFosUUFBUVcsTUFBUixHQUFpQkEsTUFBakI7O0FBRUEsU0FBU0UsT0FBVCxDQUFpQkMsQ0FBakIsRUFBb0I7QUFDbEIsU0FBUWYsZUFBZWUsQ0FBZixNQUFzQixnQkFBdEIsSUFBMENBLGFBQWFDLEtBQS9EO0FBQ0Q7QUFDRGYsUUFBUWEsT0FBUixHQUFrQkEsT0FBbEI7O0FBRUEsU0FBU0csVUFBVCxDQUFvQm5CLEdBQXBCLEVBQXlCO0FBQ3ZCLFNBQU8sT0FBT0EsR0FBUCxLQUFlLFVBQXRCO0FBQ0Q7QUFDREcsUUFBUWdCLFVBQVIsR0FBcUJBLFVBQXJCOztBQUVBLFNBQVNDLFdBQVQsQ0FBcUJwQixHQUFyQixFQUEwQjtBQUN4QixTQUFPQSxRQUFRLElBQVIsSUFDQSxPQUFPQSxHQUFQLEtBQWUsU0FEZixJQUVBLE9BQU9BLEdBQVAsS0FBZSxRQUZmLElBR0EsT0FBT0EsR0FBUCxLQUFlLFFBSGYsSUFJQSxRQUFPQSxHQUFQLHlDQUFPQSxHQUFQLE9BQWUsUUFKZixJQUk0QjtBQUM1QixTQUFPQSxHQUFQLEtBQWUsV0FMdEI7QUFNRDtBQUNERyxRQUFRaUIsV0FBUixHQUFzQkEsV0FBdEI7O0FBRUFqQixRQUFRa0IsUUFBUixHQUFtQkMsT0FBT0QsUUFBMUI7O0FBRUEsU0FBU25CLGNBQVQsQ0FBd0JxQixDQUF4QixFQUEyQjtBQUN6QixTQUFPQyxPQUFPQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLENBQS9CLENBQVA7QUFDRCIsImZpbGUiOiJ1dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuIl19\n}).call(this,{\"isBuffer\":require(\"../../is-buffer/index.js\")})","deps":{"../../is-buffer/index.js":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-buffer/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_writable.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_writable.js","source":"(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = _isUint8Array(chunk) && !state.objectMode;\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    processNextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    processNextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      processNextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","deps":{"_process":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process/browser.js","./_stream_duplex":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_duplex.js","./internal/streams/stream":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/stream-browser.js","./internal/streams/destroy":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/destroy.js","process-nextick-args":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process-nextick-args/index.js","inherits":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js","util-deprecate":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/util-deprecate/browser.js","safe-buffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/safe-buffer/index.js","core-util-is":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/core-util-is/lib/util.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/BufferList.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/BufferList.js","source":"'use strict';\n\n/*<replacement>*/\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJ1ZmZlckxpc3QuanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIkJ1ZmZlciIsInJlcXVpcmUiLCJjb3B5QnVmZmVyIiwic3JjIiwidGFyZ2V0Iiwib2Zmc2V0IiwiY29weSIsIm1vZHVsZSIsImV4cG9ydHMiLCJCdWZmZXJMaXN0IiwiaGVhZCIsInRhaWwiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJwdXNoIiwidiIsImVudHJ5IiwiZGF0YSIsIm5leHQiLCJ1bnNoaWZ0Iiwic2hpZnQiLCJyZXQiLCJjbGVhciIsImpvaW4iLCJzIiwicCIsImNvbmNhdCIsIm4iLCJhbGxvYyIsImFsbG9jVW5zYWZlIiwiaSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUEsU0FBU0EsZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNDLFdBQW5DLEVBQWdEO0FBQUUsTUFBSSxFQUFFRCxvQkFBb0JDLFdBQXRCLENBQUosRUFBd0M7QUFBRSxVQUFNLElBQUlDLFNBQUosQ0FBYyxtQ0FBZCxDQUFOO0FBQTJEO0FBQUU7O0FBRXpKLElBQUlDLFNBQVNDLFFBQVEsYUFBUixFQUF1QkQsTUFBcEM7QUFDQTs7QUFFQSxTQUFTRSxVQUFULENBQW9CQyxHQUFwQixFQUF5QkMsTUFBekIsRUFBaUNDLE1BQWpDLEVBQXlDO0FBQ3ZDRixNQUFJRyxJQUFKLENBQVNGLE1BQVQsRUFBaUJDLE1BQWpCO0FBQ0Q7O0FBRURFLE9BQU9DLE9BQVAsR0FBaUIsWUFBWTtBQUMzQixXQUFTQyxVQUFULEdBQXNCO0FBQ3BCYixvQkFBZ0IsSUFBaEIsRUFBc0JhLFVBQXRCOztBQUVBLFNBQUtDLElBQUwsR0FBWSxJQUFaO0FBQ0EsU0FBS0MsSUFBTCxHQUFZLElBQVo7QUFDQSxTQUFLQyxNQUFMLEdBQWMsQ0FBZDtBQUNEOztBQUVESCxhQUFXSSxTQUFYLENBQXFCQyxJQUFyQixHQUE0QixTQUFTQSxJQUFULENBQWNDLENBQWQsRUFBaUI7QUFDM0MsUUFBSUMsUUFBUSxFQUFFQyxNQUFNRixDQUFSLEVBQVdHLE1BQU0sSUFBakIsRUFBWjtBQUNBLFFBQUksS0FBS04sTUFBTCxHQUFjLENBQWxCLEVBQXFCLEtBQUtELElBQUwsQ0FBVU8sSUFBVixHQUFpQkYsS0FBakIsQ0FBckIsS0FBaUQsS0FBS04sSUFBTCxHQUFZTSxLQUFaO0FBQ2pELFNBQUtMLElBQUwsR0FBWUssS0FBWjtBQUNBLE1BQUUsS0FBS0osTUFBUDtBQUNELEdBTEQ7O0FBT0FILGFBQVdJLFNBQVgsQ0FBcUJNLE9BQXJCLEdBQStCLFNBQVNBLE9BQVQsQ0FBaUJKLENBQWpCLEVBQW9CO0FBQ2pELFFBQUlDLFFBQVEsRUFBRUMsTUFBTUYsQ0FBUixFQUFXRyxNQUFNLEtBQUtSLElBQXRCLEVBQVo7QUFDQSxRQUFJLEtBQUtFLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUIsS0FBS0QsSUFBTCxHQUFZSyxLQUFaO0FBQ3ZCLFNBQUtOLElBQUwsR0FBWU0sS0FBWjtBQUNBLE1BQUUsS0FBS0osTUFBUDtBQUNELEdBTEQ7O0FBT0FILGFBQVdJLFNBQVgsQ0FBcUJPLEtBQXJCLEdBQTZCLFNBQVNBLEtBQVQsR0FBaUI7QUFDNUMsUUFBSSxLQUFLUixNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3ZCLFFBQUlTLE1BQU0sS0FBS1gsSUFBTCxDQUFVTyxJQUFwQjtBQUNBLFFBQUksS0FBS0wsTUFBTCxLQUFnQixDQUFwQixFQUF1QixLQUFLRixJQUFMLEdBQVksS0FBS0MsSUFBTCxHQUFZLElBQXhCLENBQXZCLEtBQXlELEtBQUtELElBQUwsR0FBWSxLQUFLQSxJQUFMLENBQVVRLElBQXRCO0FBQ3pELE1BQUUsS0FBS04sTUFBUDtBQUNBLFdBQU9TLEdBQVA7QUFDRCxHQU5EOztBQVFBWixhQUFXSSxTQUFYLENBQXFCUyxLQUFyQixHQUE2QixTQUFTQSxLQUFULEdBQWlCO0FBQzVDLFNBQUtaLElBQUwsR0FBWSxLQUFLQyxJQUFMLEdBQVksSUFBeEI7QUFDQSxTQUFLQyxNQUFMLEdBQWMsQ0FBZDtBQUNELEdBSEQ7O0FBS0FILGFBQVdJLFNBQVgsQ0FBcUJVLElBQXJCLEdBQTRCLFNBQVNBLElBQVQsQ0FBY0MsQ0FBZCxFQUFpQjtBQUMzQyxRQUFJLEtBQUtaLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUIsT0FBTyxFQUFQO0FBQ3ZCLFFBQUlhLElBQUksS0FBS2YsSUFBYjtBQUNBLFFBQUlXLE1BQU0sS0FBS0ksRUFBRVIsSUFBakI7QUFDQSxXQUFPUSxJQUFJQSxFQUFFUCxJQUFiLEVBQW1CO0FBQ2pCRyxhQUFPRyxJQUFJQyxFQUFFUixJQUFiO0FBQ0QsWUFBT0ksR0FBUDtBQUNGLEdBUEQ7O0FBU0FaLGFBQVdJLFNBQVgsQ0FBcUJhLE1BQXJCLEdBQThCLFNBQVNBLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQy9DLFFBQUksS0FBS2YsTUFBTCxLQUFnQixDQUFwQixFQUF1QixPQUFPWixPQUFPNEIsS0FBUCxDQUFhLENBQWIsQ0FBUDtBQUN2QixRQUFJLEtBQUtoQixNQUFMLEtBQWdCLENBQXBCLEVBQXVCLE9BQU8sS0FBS0YsSUFBTCxDQUFVTyxJQUFqQjtBQUN2QixRQUFJSSxNQUFNckIsT0FBTzZCLFdBQVAsQ0FBbUJGLE1BQU0sQ0FBekIsQ0FBVjtBQUNBLFFBQUlGLElBQUksS0FBS2YsSUFBYjtBQUNBLFFBQUlvQixJQUFJLENBQVI7QUFDQSxXQUFPTCxDQUFQLEVBQVU7QUFDUnZCLGlCQUFXdUIsRUFBRVIsSUFBYixFQUFtQkksR0FBbkIsRUFBd0JTLENBQXhCO0FBQ0FBLFdBQUtMLEVBQUVSLElBQUYsQ0FBT0wsTUFBWjtBQUNBYSxVQUFJQSxFQUFFUCxJQUFOO0FBQ0Q7QUFDRCxXQUFPRyxHQUFQO0FBQ0QsR0FaRDs7QUFjQSxTQUFPWixVQUFQO0FBQ0QsQ0E1RGdCLEVBQWpCIiwiZmlsZSI6IkJ1ZmZlckxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAtLXRoaXMubGVuZ3RoO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICB9cmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAocCkge1xuICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpOyJdfQ==","deps":{"safe-buffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/safe-buffer/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/destroy.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/destroy.js","source":"'use strict';\n\n/*<replacement>*/\n\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      processNextTick(emitErrorNT, this, err);\n    }\n    return;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      processNextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlc3Ryb3kuanMiXSwibmFtZXMiOlsicHJvY2Vzc05leHRUaWNrIiwicmVxdWlyZSIsImRlc3Ryb3kiLCJlcnIiLCJjYiIsIl90aGlzIiwicmVhZGFibGVEZXN0cm95ZWQiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIndyaXRhYmxlRGVzdHJveWVkIiwiX3dyaXRhYmxlU3RhdGUiLCJlcnJvckVtaXR0ZWQiLCJlbWl0RXJyb3JOVCIsIl9kZXN0cm95IiwidW5kZXN0cm95IiwicmVhZGluZyIsImVuZGVkIiwiZW5kRW1pdHRlZCIsImVuZGluZyIsImZpbmlzaGVkIiwic2VsZiIsImVtaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQSxJQUFJQSxrQkFBa0JDLFFBQVEsc0JBQVIsQ0FBdEI7QUFDQTs7QUFFQTtBQUNBLFNBQVNDLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCQyxFQUF0QixFQUEwQjtBQUN4QixNQUFJQyxRQUFRLElBQVo7O0FBRUEsTUFBSUMsb0JBQW9CLEtBQUtDLGNBQUwsSUFBdUIsS0FBS0EsY0FBTCxDQUFvQkMsU0FBbkU7QUFDQSxNQUFJQyxvQkFBb0IsS0FBS0MsY0FBTCxJQUF1QixLQUFLQSxjQUFMLENBQW9CRixTQUFuRTs7QUFFQSxNQUFJRixxQkFBcUJHLGlCQUF6QixFQUE0QztBQUMxQyxRQUFJTCxFQUFKLEVBQVE7QUFDTkEsU0FBR0QsR0FBSDtBQUNELEtBRkQsTUFFTyxJQUFJQSxRQUFRLENBQUMsS0FBS08sY0FBTixJQUF3QixDQUFDLEtBQUtBLGNBQUwsQ0FBb0JDLFlBQXJELENBQUosRUFBd0U7QUFDN0VYLHNCQUFnQlksV0FBaEIsRUFBNkIsSUFBN0IsRUFBbUNULEdBQW5DO0FBQ0Q7QUFDRDtBQUNEOztBQUVEO0FBQ0E7O0FBRUEsTUFBSSxLQUFLSSxjQUFULEVBQXlCO0FBQ3ZCLFNBQUtBLGNBQUwsQ0FBb0JDLFNBQXBCLEdBQWdDLElBQWhDO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFJLEtBQUtFLGNBQVQsRUFBeUI7QUFDdkIsU0FBS0EsY0FBTCxDQUFvQkYsU0FBcEIsR0FBZ0MsSUFBaEM7QUFDRDs7QUFFRCxPQUFLSyxRQUFMLENBQWNWLE9BQU8sSUFBckIsRUFBMkIsVUFBVUEsR0FBVixFQUFlO0FBQ3hDLFFBQUksQ0FBQ0MsRUFBRCxJQUFPRCxHQUFYLEVBQWdCO0FBQ2RILHNCQUFnQlksV0FBaEIsRUFBNkJQLEtBQTdCLEVBQW9DRixHQUFwQztBQUNBLFVBQUlFLE1BQU1LLGNBQVYsRUFBMEI7QUFDeEJMLGNBQU1LLGNBQU4sQ0FBcUJDLFlBQXJCLEdBQW9DLElBQXBDO0FBQ0Q7QUFDRixLQUxELE1BS08sSUFBSVAsRUFBSixFQUFRO0FBQ2JBLFNBQUdELEdBQUg7QUFDRDtBQUNGLEdBVEQ7QUFVRDs7QUFFRCxTQUFTVyxTQUFULEdBQXFCO0FBQ25CLE1BQUksS0FBS1AsY0FBVCxFQUF5QjtBQUN2QixTQUFLQSxjQUFMLENBQW9CQyxTQUFwQixHQUFnQyxLQUFoQztBQUNBLFNBQUtELGNBQUwsQ0FBb0JRLE9BQXBCLEdBQThCLEtBQTlCO0FBQ0EsU0FBS1IsY0FBTCxDQUFvQlMsS0FBcEIsR0FBNEIsS0FBNUI7QUFDQSxTQUFLVCxjQUFMLENBQW9CVSxVQUFwQixHQUFpQyxLQUFqQztBQUNEOztBQUVELE1BQUksS0FBS1AsY0FBVCxFQUF5QjtBQUN2QixTQUFLQSxjQUFMLENBQW9CRixTQUFwQixHQUFnQyxLQUFoQztBQUNBLFNBQUtFLGNBQUwsQ0FBb0JNLEtBQXBCLEdBQTRCLEtBQTVCO0FBQ0EsU0FBS04sY0FBTCxDQUFvQlEsTUFBcEIsR0FBNkIsS0FBN0I7QUFDQSxTQUFLUixjQUFMLENBQW9CUyxRQUFwQixHQUErQixLQUEvQjtBQUNBLFNBQUtULGNBQUwsQ0FBb0JDLFlBQXBCLEdBQW1DLEtBQW5DO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTQyxXQUFULENBQXFCUSxJQUFyQixFQUEyQmpCLEdBQTNCLEVBQWdDO0FBQzlCaUIsT0FBS0MsSUFBTCxDQUFVLE9BQVYsRUFBbUJsQixHQUFuQjtBQUNEOztBQUVEbUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmckIsV0FBU0EsT0FETTtBQUVmWSxhQUFXQTtBQUZJLENBQWpCIiwiZmlsZSI6ImRlc3Ryb3kuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwcm9jZXNzTmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwcm9jZXNzTmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHByb2Nlc3NOZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XG4gICAgICBpZiAoX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveVxufTsiXX0=","deps":{"process-nextick-args":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process-nextick-args/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/string_decoder/lib/string_decoder.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/string_decoder/lib/string_decoder.js","source":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return -1;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// UTF-8 replacement characters ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\uFFFD'.repeat(p);\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\uFFFD'.repeat(p + 1);\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\uFFFD'.repeat(p + 2);\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character for each buffered byte of a (partial)\n// character needs to be added to the output.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\uFFFD'.repeat(this.lastTotal - this.lastNeed);\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZ19kZWNvZGVyLmpzIl0sIm5hbWVzIjpbIkJ1ZmZlciIsInJlcXVpcmUiLCJpc0VuY29kaW5nIiwiZW5jb2RpbmciLCJ0b0xvd2VyQ2FzZSIsIl9ub3JtYWxpemVFbmNvZGluZyIsImVuYyIsInJldHJpZWQiLCJub3JtYWxpemVFbmNvZGluZyIsIm5lbmMiLCJFcnJvciIsImV4cG9ydHMiLCJTdHJpbmdEZWNvZGVyIiwibmIiLCJ0ZXh0IiwidXRmMTZUZXh0IiwiZW5kIiwidXRmMTZFbmQiLCJmaWxsTGFzdCIsInV0ZjhGaWxsTGFzdCIsImJhc2U2NFRleHQiLCJiYXNlNjRFbmQiLCJ3cml0ZSIsInNpbXBsZVdyaXRlIiwic2ltcGxlRW5kIiwibGFzdE5lZWQiLCJsYXN0VG90YWwiLCJsYXN0Q2hhciIsImFsbG9jVW5zYWZlIiwicHJvdG90eXBlIiwiYnVmIiwibGVuZ3RoIiwiciIsImkiLCJ1bmRlZmluZWQiLCJ1dGY4RW5kIiwidXRmOFRleHQiLCJjb3B5IiwidG9TdHJpbmciLCJ1dGY4Q2hlY2tCeXRlIiwiYnl0ZSIsInV0ZjhDaGVja0luY29tcGxldGUiLCJzZWxmIiwiaiIsInV0ZjhDaGVja0V4dHJhQnl0ZXMiLCJwIiwicmVwZWF0IiwidG90YWwiLCJjIiwiY2hhckNvZGVBdCIsInNsaWNlIiwibiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsU0FBU0MsUUFBUSxhQUFSLEVBQXVCRCxNQUFwQzs7QUFFQSxJQUFJRSxhQUFhRixPQUFPRSxVQUFQLElBQXFCLFVBQVVDLFFBQVYsRUFBb0I7QUFDeERBLGFBQVcsS0FBS0EsUUFBaEI7QUFDQSxVQUFRQSxZQUFZQSxTQUFTQyxXQUFULEVBQXBCO0FBQ0UsU0FBSyxLQUFMLENBQVcsS0FBSyxNQUFMLENBQVksS0FBSyxPQUFMLENBQWEsS0FBSyxPQUFMLENBQWEsS0FBSyxRQUFMLENBQWMsS0FBSyxRQUFMLENBQWMsS0FBSyxNQUFMLENBQVksS0FBSyxPQUFMLENBQWEsS0FBSyxTQUFM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QUFjVyxRQUFkLENBQXVCLFFBQXZCLEVBQWlDLENBQWpDLEVBQW9DLElBQUksS0FBS2IsUUFBN0MsQ0FBWDtBQUNuQixTQUFPTyxDQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxTQUFTVCxXQUFULENBQXFCTyxHQUFyQixFQUEwQjtBQUN4QixTQUFPQSxJQUFJUSxRQUFKLENBQWEsS0FBS25DLFFBQWxCLENBQVA7QUFDRDs7QUFFRCxTQUFTcUIsU0FBVCxDQUFtQk0sR0FBbkIsRUFBd0I7QUFDdEIsU0FBT0EsT0FBT0EsSUFBSUMsTUFBWCxHQUFvQixLQUFLVCxLQUFMLENBQVdRLEdBQVgsQ0FBcEIsR0FBc0MsRUFBN0M7QUFDRCIsImZpbGUiOiJzdHJpbmdfZGVjb2Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gLTE7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnLnJlcGVhdChwKTtcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCcucmVwZWF0KHAgKyAxKTtcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnLnJlcGVhdChwICsgMik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgZm9yIGVhY2ggYnVmZmVyZWQgYnl0ZSBvZiBhIChwYXJ0aWFsKVxuLy8gY2hhcmFjdGVyIG5lZWRzIHRvIGJlIGFkZGVkIHRvIHRoZSBvdXRwdXQuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJy5yZXBlYXQodGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59Il19","deps":{"safe-buffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/safe-buffer/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_readable.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_readable.js","source":"(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n// TODO(bmeurer): Change this back to const once hole checks are\n// properly optimized away early in Ignition+TurboFan.\n/*<replacement>*/\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') {\n    return emitter.prependListener(event, fn);\n  } else {\n    // This is a hack to make sure that our error handler is attached before any\n    // userland ones.  NEVER DO THIS. This is here only because this code needs\n    // to continue to work with older versions of Node.js that do not include\n    // the prependListener() method. The goal is to eventually remove this hack.\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n  }\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","deps":{"_process":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process/browser.js","util":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/browser-resolve/empty.js","./_stream_duplex":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_duplex.js","events":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/events/events.js","./internal/streams/stream":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/stream-browser.js","inherits":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js","safe-buffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/safe-buffer/index.js","core-util-is":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/core-util-is/lib/util.js","isarray":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/isarray/index.js","process-nextick-args":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process-nextick-args/index.js","./internal/streams/BufferList":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/BufferList.js","./internal/streams/destroy":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/destroy.js","string_decoder/":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/string_decoder/lib/string_decoder.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/readable-browser.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/readable-browser.js","source":"'use strict';\n\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWRhYmxlLWJyb3dzZXIuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJTdHJlYW0iLCJSZWFkYWJsZSIsIldyaXRhYmxlIiwiRHVwbGV4IiwiVHJhbnNmb3JtIiwiUGFzc1Rocm91Z2giXSwibWFwcGluZ3MiOiI7O0FBQUFBLFVBQVVDLE9BQU9ELE9BQVAsR0FBaUJFLFFBQVEsMkJBQVIsQ0FBM0I7QUFDQUYsUUFBUUcsTUFBUixHQUFpQkgsT0FBakI7QUFDQUEsUUFBUUksUUFBUixHQUFtQkosT0FBbkI7QUFDQUEsUUFBUUssUUFBUixHQUFtQkgsUUFBUSwyQkFBUixDQUFuQjtBQUNBRixRQUFRTSxNQUFSLEdBQWlCSixRQUFRLHlCQUFSLENBQWpCO0FBQ0FGLFFBQVFPLFNBQVIsR0FBb0JMLFFBQVEsNEJBQVIsQ0FBcEI7QUFDQUYsUUFBUVEsV0FBUixHQUFzQk4sUUFBUSw4QkFBUixDQUF0QiIsImZpbGUiOiJyZWFkYWJsZS1icm93c2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiJdfQ==","deps":{"./lib/_stream_duplex.js":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_transform.js":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_passthrough.js":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_passthrough.js","./lib/_stream_writable.js":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_writable.js","./lib/_stream_readable.js":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_readable.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/request.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/request.js","source":"(function (process,global,Buffer){\n'use strict';\n\nvar capability = require('./capability');\nvar inherits = require('inherits');\nvar response = require('./response');\nvar stream = require('readable-stream');\nvar toArrayBuffer = require('to-arraybuffer');\n\nvar IncomingMessage = response.IncomingMessage;\nvar rStates = response.readyStates;\n\nfunction decideMode(preferBinary, useFetch) {\n\tif (capability.fetch && useFetch) {\n\t\treturn 'fetch';\n\t} else if (capability.mozchunkedarraybuffer) {\n\t\treturn 'moz-chunked-arraybuffer';\n\t} else if (capability.msstream) {\n\t\treturn 'ms-stream';\n\t} else if (capability.arraybuffer && preferBinary) {\n\t\treturn 'arraybuffer';\n\t} else if (capability.vbArray && preferBinary) {\n\t\treturn 'text:vbarray';\n\t} else {\n\t\treturn 'text';\n\t}\n}\n\nvar ClientRequest = module.exports = function (opts) {\n\tvar self = this;\n\tstream.Writable.call(self);\n\n\tself._opts = opts;\n\tself._body = [];\n\tself._headers = {};\n\tif (opts.auth) self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));\n\tObject.keys(opts.headers).forEach(function (name) {\n\t\tself.setHeader(name, opts.headers[name]);\n\t});\n\n\tvar preferBinary;\n\tvar useFetch = true;\n\tif (opts.mode === 'disable-fetch' || 'timeout' in opts) {\n\t\t// If the use of XHR should be preferred and includes preserving the 'content-type' header.\n\t\t// Force XHR to be used since the Fetch API does not yet support timeouts.\n\t\tuseFetch = false;\n\t\tpreferBinary = true;\n\t} else if (opts.mode === 'prefer-streaming') {\n\t\t// If streaming is a high priority but binary compatibility and\n\t\t// the accuracy of the 'content-type' header aren't\n\t\tpreferBinary = false;\n\t} else if (opts.mode === 'allow-wrong-content-type') {\n\t\t// If streaming is more important than preserving the 'content-type' header\n\t\tpreferBinary = !capability.overrideMimeType;\n\t} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n\t\t// Use binary if text streaming may corrupt data or the content-type header, or for speed\n\t\tpreferBinary = true;\n\t} else {\n\t\tthrow new Error('Invalid value for opts.mode');\n\t}\n\tself._mode = decideMode(preferBinary, useFetch);\n\n\tself.on('finish', function () {\n\t\tself._onFinish();\n\t});\n};\n\ninherits(ClientRequest, stream.Writable);\n\nClientRequest.prototype.setHeader = function (name, value) {\n\tvar self = this;\n\tvar lowerName = name.toLowerCase();\n\t// This check is not necessary, but it prevents warnings from browsers about setting unsafe\n\t// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n\t// http-browserify did it, so I will too.\n\tif (unsafeHeaders.indexOf(lowerName) !== -1) return;\n\n\tself._headers[lowerName] = {\n\t\tname: name,\n\t\tvalue: value\n\t};\n};\n\nClientRequest.prototype.getHeader = function (name) {\n\tvar header = this._headers[name.toLowerCase()];\n\tif (header) return header.value;\n\treturn null;\n};\n\nClientRequest.prototype.removeHeader = function (name) {\n\tvar self = this;\n\tdelete self._headers[name.toLowerCase()];\n};\n\nClientRequest.prototype._onFinish = function () {\n\tvar self = this;\n\n\tif (self._destroyed) return;\n\tvar opts = self._opts;\n\n\tvar headersObj = self._headers;\n\tvar body = null;\n\tif (opts.method !== 'GET' && opts.method !== 'HEAD') {\n\t\tif (capability.blobConstructor) {\n\t\t\tbody = new global.Blob(self._body.map(function (buffer) {\n\t\t\t\treturn toArrayBuffer(buffer);\n\t\t\t}), {\n\t\t\t\ttype: (headersObj['content-type'] || {}).value || ''\n\t\t\t});\n\t\t} else {\n\t\t\t// get utf8 string\n\t\t\tbody = Buffer.concat(self._body).toString();\n\t\t}\n\t}\n\n\t// create flattened list of headers\n\tvar headersList = [];\n\tObject.keys(headersObj).forEach(function (keyName) {\n\t\tvar name = headersObj[keyName].name;\n\t\tvar value = headersObj[keyName].value;\n\t\tif (Array.isArray(value)) {\n\t\t\tvalue.forEach(function (v) {\n\t\t\t\theadersList.push([name, v]);\n\t\t\t});\n\t\t} else {\n\t\t\theadersList.push([name, value]);\n\t\t}\n\t});\n\n\tif (self._mode === 'fetch') {\n\t\tglobal.fetch(self._opts.url, {\n\t\t\tmethod: self._opts.method,\n\t\t\theaders: headersList,\n\t\t\tbody: body || undefined,\n\t\t\tmode: 'cors',\n\t\t\tcredentials: opts.withCredentials ? 'include' : 'same-origin'\n\t\t}).then(function (response) {\n\t\t\tself._fetchResponse = response;\n\t\t\tself._connect();\n\t\t}, function (reason) {\n\t\t\tself.emit('error', reason);\n\t\t});\n\t} else {\n\t\tvar xhr = self._xhr = new global.XMLHttpRequest();\n\t\ttry {\n\t\t\txhr.open(self._opts.method, self._opts.url, true);\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// Can't set responseType on really old browsers\n\t\tif ('responseType' in xhr) xhr.responseType = self._mode.split(':')[0];\n\n\t\tif ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;\n\n\t\tif (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');\n\n\t\tif ('timeout' in opts) {\n\t\t\txhr.timeout = opts.timeout;\n\t\t\txhr.ontimeout = function () {\n\t\t\t\tself.emit('timeout');\n\t\t\t};\n\t\t}\n\n\t\theadersList.forEach(function (header) {\n\t\t\txhr.setRequestHeader(header[0], header[1]);\n\t\t});\n\n\t\tself._response = null;\n\t\txhr.onreadystatechange = function () {\n\t\t\tswitch (xhr.readyState) {\n\t\t\t\tcase rStates.LOADING:\n\t\t\t\tcase rStates.DONE:\n\t\t\t\t\tself._onXHRProgress();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\t// Necessary for streaming in Firefox, since xhr.response is ONLY defined\n\t\t// in onprogress, not in onreadystatechange with xhr.readyState = 3\n\t\tif (self._mode === 'moz-chunked-arraybuffer') {\n\t\t\txhr.onprogress = function () {\n\t\t\t\tself._onXHRProgress();\n\t\t\t};\n\t\t}\n\n\t\txhr.onerror = function () {\n\t\t\tif (self._destroyed) return;\n\t\t\tself.emit('error', new Error('XHR error'));\n\t\t};\n\n\t\ttry {\n\t\t\txhr.send(body);\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t}\n};\n\n/**\n * Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8\n */\nfunction statusValid(xhr) {\n\ttry {\n\t\tvar status = xhr.status;\n\t\treturn status !== null && status !== 0;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\nClientRequest.prototype._onXHRProgress = function () {\n\tvar self = this;\n\n\tif (!statusValid(self._xhr) || self._destroyed) return;\n\n\tif (!self._response) self._connect();\n\n\tself._response._onXHRProgress();\n};\n\nClientRequest.prototype._connect = function () {\n\tvar self = this;\n\n\tif (self._destroyed) return;\n\n\tself._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);\n\tself._response.on('error', function (err) {\n\t\tself.emit('error', err);\n\t});\n\n\tself.emit('response', self._response);\n};\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n\tvar self = this;\n\n\tself._body.push(chunk);\n\tcb();\n};\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {\n\tvar self = this;\n\tself._destroyed = true;\n\tif (self._response) self._response._destroyed = true;\n\tif (self._xhr) self._xhr.abort();\n\t// Currently, there isn't a way to truly abort a fetch.\n\t// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27\n};\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n\tvar self = this;\n\tif (typeof data === 'function') {\n\t\tcb = data;\n\t\tdata = undefined;\n\t}\n\n\tstream.Writable.prototype.end.call(self, data, encoding, cb);\n};\n\nClientRequest.prototype.flushHeaders = function () {};\nClientRequest.prototype.setTimeout = function () {};\nClientRequest.prototype.setNoDelay = function () {};\nClientRequest.prototype.setSocketKeepAlive = function () {};\n\n// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\nvar unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'user-agent', 'via'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVlc3QuanMiXSwibmFtZXMiOlsiY2FwYWJpbGl0eSIsInJlcXVpcmUiLCJpbmhlcml0cyIsInJlc3BvbnNlIiwic3RyZWFtIiwidG9BcnJheUJ1ZmZlciIsIkluY29taW5nTWVzc2FnZSIsInJTdGF0ZXMiLCJyZWFkeVN0YXRlcyIsImRlY2lkZU1vZGUiLCJwcmVmZXJCaW5hcnkiLCJ1c2VGZXRjaCIsImZldGNoIiwibW96Y2h1bmtlZGFycmF5YnVmZmVyIiwibXNzdHJlYW0iLCJhcnJheWJ1ZmZlciIsInZiQXJyYXkiLCJDbGllbnRSZXF1ZXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdHMiLCJzZWxmIiwiV3JpdGFibGUiLCJjYWxsIiwiX29wdHMiLCJfYm9keSIsIl9oZWFkZXJzIiwiYXV0aCIsInNldEhlYWRlciIsIkJ1ZmZlciIsInRvU3RyaW5nIiwiT2JqZWN0Iiwia2V5cyIsImhlYWRlcnMiLCJmb3JFYWNoIiwibmFtZSIsIm1vZGUiLCJvdmVycmlkZU1pbWVUeXBlIiwiRXJyb3IiLCJfbW9kZSIsIm9uIiwiX29uRmluaXNoIiwicHJvdG90eXBlIiwidmFsdWUiLCJsb3dlck5hbWUiLCJ0b0xvd2VyQ2FzZSIsInVuc2FmZUhlYWRlcnMiLCJpbmRleE9mIiwiZ2V0SGVhZGVyIiwiaGVhZGVyIiwicmVtb3ZlSGVhZGVyIiwiX2Rlc3Ryb3llZCIsImhlYWRlcnNPYmoiLCJib2R5IiwibWV0aG9kIiwiYmxvYkNvbnN0cnVjdG9yIiwiZ2xvYmFsIiwiQmxvYiIsIm1hcCIsImJ1ZmZlciIsInR5cGUiLCJjb25jYXQiLCJoZWFkZXJzTGlzdCIsImtleU5hbWUiLCJBcnJheSIsImlzQXJyYXkiLCJ2IiwicHVzaCIsInVybCIsInVuZGVmaW5lZCIsImNyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwidGhlbiIsIl9mZXRjaFJlc3BvbnNlIiwiX2Nvbm5lY3QiLCJyZWFzb24iLCJlbWl0IiwieGhyIiwiX3hociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsImVyciIsInByb2Nlc3MiLCJuZXh0VGljayIsInJlc3BvbnNlVHlwZSIsInNwbGl0IiwidGltZW91dCIsIm9udGltZW91dCIsInNldFJlcXVlc3RIZWFkZXIiLCJfcmVzcG9uc2UiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiTE9BRElORyIsIkRPTkUiLCJfb25YSFJQcm9ncmVzcyIsIm9ucHJvZ3Jlc3MiLCJvbmVycm9yIiwic2VuZCIsInN0YXR1c1ZhbGlkIiwic3RhdHVzIiwiZSIsIl93cml0ZSIsImNodW5rIiwiZW5jb2RpbmciLCJjYiIsImFib3J0IiwiZGVzdHJveSIsImVuZCIsImRhdGEiLCJmbHVzaEhlYWRlcnMiLCJzZXRUaW1lb3V0Iiwic2V0Tm9EZWxheSIsInNldFNvY2tldEtlZXBBbGl2ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxhQUFhQyxRQUFRLGNBQVIsQ0FBakI7QUFDQSxJQUFJQyxXQUFXRCxRQUFRLFVBQVIsQ0FBZjtBQUNBLElBQUlFLFdBQVdGLFFBQVEsWUFBUixDQUFmO0FBQ0EsSUFBSUcsU0FBU0gsUUFBUSxpQkFBUixDQUFiO0FBQ0EsSUFBSUksZ0JBQWdCSixRQUFRLGdCQUFSLENBQXBCOztBQUVBLElBQUlLLGtCQUFrQkgsU0FBU0csZUFBL0I7QUFDQSxJQUFJQyxVQUFVSixTQUFTSyxXQUF2Qjs7QUFFQSxTQUFTQyxVQUFULENBQXFCQyxZQUFyQixFQUFtQ0MsUUFBbkMsRUFBNkM7QUFDNUMsS0FBSVgsV0FBV1ksS0FBWCxJQUFvQkQsUUFBeEIsRUFBa0M7QUFDakMsU0FBTyxPQUFQO0FBQ0EsRUFGRCxNQUVPLElBQUlYLFdBQVdhLHFCQUFmLEVBQXNDO0FBQzVDLFNBQU8seUJBQVA7QUFDQSxFQUZNLE1BRUEsSUFBSWIsV0FBV2MsUUFBZixFQUF5QjtBQUMvQixTQUFPLFdBQVA7QUFDQSxFQUZNLE1BRUEsSUFBSWQsV0FBV2UsV0FBWCxJQUEwQkwsWUFBOUIsRUFBNEM7QUFDbEQsU0FBTyxhQUFQO0FBQ0EsRUFGTSxNQUVB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QUFFLENBQXJEO0FBQ0E1RixjQUFjeUIsU0FBZCxDQUF3Qm9FLFVBQXhCLEdBQXFDLFlBQVksQ0FBRSxDQUFuRDtBQUNBN0YsY0FBY3lCLFNBQWQsQ0FBd0JxRSxVQUF4QixHQUFxQyxZQUFZLENBQUUsQ0FBbkQ7QUFDQTlGLGNBQWN5QixTQUFkLENBQXdCc0Usa0JBQXhCLEdBQTZDLFlBQVksQ0FBRSxDQUEzRDs7QUFFQTtBQUNBLElBQUlsRSxnQkFBZ0IsQ0FDbkIsZ0JBRG1CLEVBRW5CLGlCQUZtQixFQUduQixnQ0FIbUIsRUFJbkIsK0JBSm1CLEVBS25CLFlBTG1CLEVBTW5CLGdCQU5tQixFQU9uQixRQVBtQixFQVFuQixTQVJtQixFQVNuQixNQVRtQixFQVVuQixLQVZtQixFQVduQixRQVhtQixFQVluQixNQVptQixFQWFuQixZQWJtQixFQWNuQixRQWRtQixFQWVuQixTQWZtQixFQWdCbkIsSUFoQm1CLEVBaUJuQixTQWpCbUIsRUFrQm5CLG1CQWxCbUIsRUFtQm5CLFNBbkJtQixFQW9CbkIsWUFwQm1CLEVBcUJuQixLQXJCbUIsQ0FBcEIiLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9jYXBhYmlsaXR5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciByZXNwb25zZSA9IHJlcXVpcmUoJy4vcmVzcG9uc2UnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpXG52YXIgdG9BcnJheUJ1ZmZlciA9IHJlcXVpcmUoJ3RvLWFycmF5YnVmZmVyJylcblxudmFyIEluY29taW5nTWVzc2FnZSA9IHJlc3BvbnNlLkluY29taW5nTWVzc2FnZVxudmFyIHJTdGF0ZXMgPSByZXNwb25zZS5yZWFkeVN0YXRlc1xuXG5mdW5jdGlvbiBkZWNpZGVNb2RlIChwcmVmZXJCaW5hcnksIHVzZUZldGNoKSB7XG5cdGlmIChjYXBhYmlsaXR5LmZldGNoICYmIHVzZUZldGNoKSB7XG5cdFx0cmV0dXJuICdmZXRjaCdcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1vemNodW5rZWRhcnJheWJ1ZmZlcikge1xuXHRcdHJldHVybiAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInXG5cdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5tc3N0cmVhbSkge1xuXHRcdHJldHVybiAnbXMtc3RyZWFtJ1xuXHR9IGVsc2UgaWYgKGNhcGFiaWxpdHkuYXJyYXlidWZmZXIgJiYgcHJlZmVyQmluYXJ5KSB7XG5cdFx0cmV0dXJuICdhcnJheWJ1ZmZlcidcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5LnZiQXJyYXkgJiYgcHJlZmVyQmluYXJ5KSB7XG5cdFx0cmV0dXJuICd0ZXh0OnZiYXJyYXknXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuICd0ZXh0J1xuXHR9XG59XG5cbnZhciBDbGllbnRSZXF1ZXN0ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0c3RyZWFtLldyaXRhYmxlLmNhbGwoc2VsZilcblxuXHRzZWxmLl9vcHRzID0gb3B0c1xuXHRzZWxmLl9ib2R5ID0gW11cblx0c2VsZi5faGVhZGVycyA9IHt9XG5cdGlmIChvcHRzLmF1dGgpXG5cdFx0c2VsZi5zZXRIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIG5ldyBCdWZmZXIob3B0cy5hdXRoKS50b1N0cmluZygnYmFzZTY0JykpXG5cdE9iamVjdC5rZXlzKG9wdHMuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdHNlbGYuc2V0SGVhZGVyKG5hbWUsIG9wdHMuaGVhZGVyc1tuYW1lXSlcblx0fSlcblxuXHR2YXIgcHJlZmVyQmluYXJ5XG5cdHZhciB1c2VGZXRjaCA9IHRydWVcblx0aWYgKG9wdHMubW9kZSA9PT0gJ2Rpc2FibGUtZmV0Y2gnIHx8ICd0aW1lb3V0JyBpbiBvcHRzKSB7XG5cdFx0Ly8gSWYgdGhlIHVzZSBvZiBYSFIgc2hvdWxkIGJlIHByZWZlcnJlZCBhbmQgaW5jbHVkZXMgcHJlc2VydmluZyB0aGUgJ2NvbnRlbnQtdHlwZScgaGVhZGVyLlxuXHRcdC8vIEZvcmNlIFhIUiB0byBiZSB1c2VkIHNpbmNlIHRoZSBGZXRjaCBBUEkgZG9lcyBub3QgeWV0IHN1cHBvcnQgdGltZW91dHMuXG5cdFx0dXNlRmV0Y2ggPSBmYWxzZVxuXHRcdHByZWZlckJpbmFyeSA9IHRydWVcblx0fSBlbHNlIGlmIChvcHRzLm1vZGUgPT09ICdwcmVmZXItc3RyZWFtaW5nJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBhIGhpZ2ggcHJpb3JpdHkgYnV0IGJpbmFyeSBjb21wYXRpYmlsaXR5IGFuZFxuXHRcdC8vIHRoZSBhY2N1cmFjeSBvZiB0aGUgJ2NvbnRlbnQtdHlwZScgaGVhZGVyIGFyZW4ndFxuXHRcdHByZWZlckJpbmFyeSA9IGZhbHNlXG5cdH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAnYWxsb3ctd3JvbmctY29udGVudC10eXBlJykge1xuXHRcdC8vIElmIHN0cmVhbWluZyBpcyBtb3JlIGltcG9ydGFudCB0aGFuIHByZXNlcnZpbmcgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlclxuXHRcdHByZWZlckJpbmFyeSA9ICFjYXBhYmlsaXR5Lm92ZXJyaWRlTWltZVR5cGVcblx0fSBlbHNlIGlmICghb3B0cy5tb2RlIHx8IG9wdHMubW9kZSA9PT0gJ2RlZmF1bHQnIHx8IG9wdHMubW9kZSA9PT0gJ3ByZWZlci1mYXN0Jykge1xuXHRcdC8vIFVzZSBiaW5hcnkgaWYgdGV4dCBzdHJlYW1pbmcgbWF5IGNvcnJ1cHQgZGF0YSBvciB0aGUgY29udGVudC10eXBlIGhlYWRlciwgb3IgZm9yIHNwZWVkXG5cdFx0cHJlZmVyQmluYXJ5ID0gdHJ1ZVxuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3Igb3B0cy5tb2RlJylcblx0fVxuXHRzZWxmLl9tb2RlID0gZGVjaWRlTW9kZShwcmVmZXJCaW5hcnksIHVzZUZldGNoKVxuXG5cdHNlbGYub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcblx0XHRzZWxmLl9vbkZpbmlzaCgpXG5cdH0pXG59XG5cbmluaGVyaXRzKENsaWVudFJlcXVlc3QsIHN0cmVhbS5Xcml0YWJsZSlcblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0SGVhZGVyID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHR2YXIgbG93ZXJOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG5cdC8vIFRoaXMgY2hlY2sgaXMgbm90IG5lY2Vzc2FyeSwgYnV0IGl0IHByZXZlbnRzIHdhcm5pbmdzIGZyb20gYnJvd3NlcnMgYWJvdXQgc2V0dGluZyB1bnNhZmVcblx0Ly8gaGVhZGVycy4gVG8gYmUgaG9uZXN0IEknbSBub3QgZW50aXJlbHkgc3VyZSBoaWRpbmcgdGhlc2Ugd2FybmluZ3MgaXMgYSBnb29kIHRoaW5nLCBidXRcblx0Ly8gaHR0cC1icm93c2VyaWZ5IGRpZCBpdCwgc28gSSB3aWxsIHRvby5cblx0aWYgKHVuc2FmZUhlYWRlcnMuaW5kZXhPZihsb3dlck5hbWUpICE9PSAtMSlcblx0XHRyZXR1cm5cblxuXHRzZWxmLl9oZWFkZXJzW2xvd2VyTmFtZV0gPSB7XG5cdFx0bmFtZTogbmFtZSxcblx0XHR2YWx1ZTogdmFsdWVcblx0fVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuXHR2YXIgaGVhZGVyID0gdGhpcy5faGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldXG5cdGlmIChoZWFkZXIpXG5cdFx0cmV0dXJuIGhlYWRlci52YWx1ZVxuXHRyZXR1cm4gbnVsbFxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5yZW1vdmVIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0ZGVsZXRlIHNlbGYuX2hlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fb25GaW5pc2ggPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0cmV0dXJuXG5cdHZhciBvcHRzID0gc2VsZi5fb3B0c1xuXG5cdHZhciBoZWFkZXJzT2JqID0gc2VsZi5faGVhZGVyc1xuXHR2YXIgYm9keSA9IG51bGxcblx0aWYgKG9wdHMubWV0aG9kICE9PSAnR0VUJyAmJiBvcHRzLm1ldGhvZCAhPT0gJ0hFQUQnKSB7XG5cdFx0aWYgKGNhcGFiaWxpdHkuYmxvYkNvbnN0cnVjdG9yKSB7XG5cdFx0XHRib2R5ID0gbmV3IGdsb2JhbC5CbG9iKHNlbGYuX2JvZHkubWFwKGZ1bmN0aW9uIChidWZmZXIpIHtcblx0XHRcdFx0cmV0dXJuIHRvQXJyYXlCdWZmZXIoYnVmZmVyKVxuXHRcdFx0fSksIHtcblx0XHRcdFx0dHlwZTogKGhlYWRlcnNPYmpbJ2NvbnRlbnQtdHlwZSddIHx8IHt9KS52YWx1ZSB8fCAnJ1xuXHRcdFx0fSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gZ2V0IHV0Zjggc3RyaW5nXG5cdFx0XHRib2R5ID0gQnVmZmVyLmNvbmNhdChzZWxmLl9ib2R5KS50b1N0cmluZygpXG5cdFx0fVxuXHR9XG5cblx0Ly8gY3JlYXRlIGZsYXR0ZW5lZCBsaXN0IG9mIGhlYWRlcnNcblx0dmFyIGhlYWRlcnNMaXN0ID0gW11cblx0T2JqZWN0LmtleXMoaGVhZGVyc09iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5TmFtZSkge1xuXHRcdHZhciBuYW1lID0gaGVhZGVyc09ialtrZXlOYW1lXS5uYW1lXG5cdFx0dmFyIHZhbHVlID0gaGVhZGVyc09ialtrZXlOYW1lXS52YWx1ZVxuXHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0dmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodikge1xuXHRcdFx0XHRoZWFkZXJzTGlzdC5wdXNoKFtuYW1lLCB2XSlcblx0XHRcdH0pXG5cdFx0fSBlbHNlIHtcblx0XHRcdGhlYWRlcnNMaXN0LnB1c2goW25hbWUsIHZhbHVlXSlcblx0XHR9XG5cdH0pXG5cblx0aWYgKHNlbGYuX21vZGUgPT09ICdmZXRjaCcpIHtcblx0XHRnbG9iYWwuZmV0Y2goc2VsZi5fb3B0cy51cmwsIHtcblx0XHRcdG1ldGhvZDogc2VsZi5fb3B0cy5tZXRob2QsXG5cdFx0XHRoZWFkZXJzOiBoZWFkZXJzTGlzdCxcblx0XHRcdGJvZHk6IGJvZHkgfHwgdW5kZWZpbmVkLFxuXHRcdFx0bW9kZTogJ2NvcnMnLFxuXHRcdFx0Y3JlZGVudGlhbHM6IG9wdHMud2l0aENyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogJ3NhbWUtb3JpZ2luJ1xuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdFx0XHRzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2Vcblx0XHRcdHNlbGYuX2Nvbm5lY3QoKVxuXHRcdH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCByZWFzb24pXG5cdFx0fSlcblx0fSBlbHNlIHtcblx0XHR2YXIgeGhyID0gc2VsZi5feGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKHNlbGYuX29wdHMubWV0aG9kLCBzZWxmLl9vcHRzLnVybCwgdHJ1ZSlcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0fSlcblx0XHRcdHJldHVyblxuXHRcdH1cblxuXHRcdC8vIENhbid0IHNldCByZXNwb25zZVR5cGUgb24gcmVhbGx5IG9sZCBicm93c2Vyc1xuXHRcdGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIpXG5cdFx0XHR4aHIucmVzcG9uc2VUeXBlID0gc2VsZi5fbW9kZS5zcGxpdCgnOicpWzBdXG5cblx0XHRpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKVxuXHRcdFx0eGhyLndpdGhDcmVkZW50aWFscyA9ICEhb3B0cy53aXRoQ3JlZGVudGlhbHNcblxuXHRcdGlmIChzZWxmLl9tb2RlID09PSAndGV4dCcgJiYgJ292ZXJyaWRlTWltZVR5cGUnIGluIHhocilcblx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkJylcblxuXHRcdGlmICgndGltZW91dCcgaW4gb3B0cykge1xuXHRcdFx0eGhyLnRpbWVvdXQgPSBvcHRzLnRpbWVvdXRcblx0XHRcdHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYuZW1pdCgndGltZW91dCcpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGVhZGVyc0xpc3QuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7XG5cdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXJbMF0sIGhlYWRlclsxXSlcblx0XHR9KVxuXG5cdFx0c2VsZi5fcmVzcG9uc2UgPSBudWxsXG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcblx0XHRcdFx0Y2FzZSByU3RhdGVzLkxPQURJTkc6XG5cdFx0XHRcdGNhc2UgclN0YXRlcy5ET05FOlxuXHRcdFx0XHRcdHNlbGYuX29uWEhSUHJvZ3Jlc3MoKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIE5lY2Vzc2FyeSBmb3Igc3RyZWFtaW5nIGluIEZpcmVmb3gsIHNpbmNlIHhoci5yZXNwb25zZSBpcyBPTkxZIGRlZmluZWRcblx0XHQvLyBpbiBvbnByb2dyZXNzLCBub3QgaW4gb25yZWFkeXN0YXRlY2hhbmdlIHdpdGggeGhyLnJlYWR5U3RhdGUgPSAzXG5cdFx0aWYgKHNlbGYuX21vZGUgPT09ICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcicpIHtcblx0XHRcdHhoci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLl9vblhIUlByb2dyZXNzKClcblx0XHRcdH1cblx0XHR9XG5cblx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdHJldHVyblxuXHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignWEhSIGVycm9yJykpXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5zZW5kKGJvZHkpXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgeGhyLnN0YXR1cyBpcyByZWFkYWJsZSBhbmQgbm9uLXplcm8sIGluZGljYXRpbmcgbm8gZXJyb3IuXG4gKiBFdmVuIHRob3VnaCB0aGUgc3BlYyBzYXlzIGl0IHNob3VsZCBiZSBhdmFpbGFibGUgaW4gcmVhZHlTdGF0ZSAzLFxuICogYWNjZXNzaW5nIGl0IHRocm93cyBhbiBleGNlcHRpb24gaW4gSUU4XG4gKi9cbmZ1bmN0aW9uIHN0YXR1c1ZhbGlkICh4aHIpIHtcblx0dHJ5IHtcblx0XHR2YXIgc3RhdHVzID0geGhyLnN0YXR1c1xuXHRcdHJldHVybiAoc3RhdHVzICE9PSBudWxsICYmIHN0YXR1cyAhPT0gMClcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLl9vblhIUlByb2dyZXNzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRpZiAoIXN0YXR1c1ZhbGlkKHNlbGYuX3hocikgfHwgc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXG5cdGlmICghc2VsZi5fcmVzcG9uc2UpXG5cdFx0c2VsZi5fY29ubmVjdCgpXG5cblx0c2VsZi5fcmVzcG9uc2UuX29uWEhSUHJvZ3Jlc3MoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0aWYgKHNlbGYuX2Rlc3Ryb3llZClcblx0XHRyZXR1cm5cblxuXHRzZWxmLl9yZXNwb25zZSA9IG5ldyBJbmNvbWluZ01lc3NhZ2Uoc2VsZi5feGhyLCBzZWxmLl9mZXRjaFJlc3BvbnNlLCBzZWxmLl9tb2RlKVxuXHRzZWxmLl9yZXNwb25zZS5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpIHtcblx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHR9KVxuXG5cdHNlbGYuZW1pdCgncmVzcG9uc2UnLCBzZWxmLl9yZXNwb25zZSlcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0c2VsZi5fYm9keS5wdXNoKGNodW5rKVxuXHRjYigpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdHNlbGYuX2Rlc3Ryb3llZCA9IHRydWVcblx0aWYgKHNlbGYuX3Jlc3BvbnNlKVxuXHRcdHNlbGYuX3Jlc3BvbnNlLl9kZXN0cm95ZWQgPSB0cnVlXG5cdGlmIChzZWxmLl94aHIpXG5cdFx0c2VsZi5feGhyLmFib3J0KClcblx0Ly8gQ3VycmVudGx5LCB0aGVyZSBpc24ndCBhIHdheSB0byB0cnVseSBhYm9ydCBhIGZldGNoLlxuXHQvLyBJZiB5b3UgbGlrZSBiaWtlc2hlZGRpbmcsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2ZldGNoL2lzc3Vlcy8yN1xufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNiKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcblx0XHRjYiA9IGRhdGFcblx0XHRkYXRhID0gdW5kZWZpbmVkXG5cdH1cblxuXHRzdHJlYW0uV3JpdGFibGUucHJvdG90eXBlLmVuZC5jYWxsKHNlbGYsIGRhdGEsIGVuY29kaW5nLCBjYilcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZmx1c2hIZWFkZXJzID0gZnVuY3Rpb24gKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0Tm9EZWxheSA9IGZ1bmN0aW9uICgpIHt9XG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRTb2NrZXRLZWVwQWxpdmUgPSBmdW5jdGlvbiAoKSB7fVxuXG4vLyBUYWtlbiBmcm9tIGh0dHA6Ly93d3cudzMub3JnL1RSL1hNTEh0dHBSZXF1ZXN0LyN0aGUtc2V0cmVxdWVzdGhlYWRlciUyOCUyOS1tZXRob2RcbnZhciB1bnNhZmVIZWFkZXJzID0gW1xuXHQnYWNjZXB0LWNoYXJzZXQnLFxuXHQnYWNjZXB0LWVuY29kaW5nJyxcblx0J2FjY2Vzcy1jb250cm9sLXJlcXVlc3QtaGVhZGVycycsXG5cdCdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LW1ldGhvZCcsXG5cdCdjb25uZWN0aW9uJyxcblx0J2NvbnRlbnQtbGVuZ3RoJyxcblx0J2Nvb2tpZScsXG5cdCdjb29raWUyJyxcblx0J2RhdGUnLFxuXHQnZG50Jyxcblx0J2V4cGVjdCcsXG5cdCdob3N0Jyxcblx0J2tlZXAtYWxpdmUnLFxuXHQnb3JpZ2luJyxcblx0J3JlZmVyZXInLFxuXHQndGUnLFxuXHQndHJhaWxlcicsXG5cdCd0cmFuc2Zlci1lbmNvZGluZycsXG5cdCd1cGdyYWRlJyxcblx0J3VzZXItYWdlbnQnLFxuXHQndmlhJ1xuXVxuIl19\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {},require(\"buffer\").Buffer)","deps":{"_process":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process/browser.js","buffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/buffer/index.js","./capability":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/capability.js","inherits":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js","./response":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/response.js","to-arraybuffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/to-arraybuffer/index.js","readable-stream":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/readable-browser.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/index.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/index.js","source":"(function (global){\nvar ClientRequest = require('./lib/request')\nvar extend = require('xtend')\nvar statusCodes = require('builtin-status-codes')\nvar url = require('url')\n\nvar http = exports\n\nhttp.request = function (opts, cb) {\n\tif (typeof opts === 'string')\n\t\topts = url.parse(opts)\n\telse\n\t\topts = extend(opts)\n\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t// the protocol is something else, like 'file:'\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\tvar protocol = opts.protocol || defaultProtocol\n\tvar host = opts.hostname || opts.host\n\tvar port = opts.port\n\tvar path = opts.path || '/'\n\n\t// Necessary for IPv6 addresses\n\tif (host && host.indexOf(':') !== -1)\n\t\thost = '[' + host + ']'\n\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\topts.method = (opts.method || 'GET').toUpperCase()\n\topts.headers = opts.headers || {}\n\n\t// Also valid opts.auth, opts.mode\n\n\tvar req = new ClientRequest(opts)\n\tif (cb)\n\t\treq.on('response', cb)\n\treturn req\n}\n\nhttp.get = function get (opts, cb) {\n\tvar req = http.request(opts, cb)\n\treq.end()\n\treturn req\n}\n\nhttp.Agent = function () {}\nhttp.Agent.defaultMaxSockets = 4\n\nhttp.STATUS_CODES = statusCodes\n\nhttp.METHODS = [\n\t'CHECKOUT',\n\t'CONNECT',\n\t'COPY',\n\t'DELETE',\n\t'GET',\n\t'HEAD',\n\t'LOCK',\n\t'M-SEARCH',\n\t'MERGE',\n\t'MKACTIVITY',\n\t'MKCOL',\n\t'MOVE',\n\t'NOTIFY',\n\t'OPTIONS',\n\t'PATCH',\n\t'POST',\n\t'PROPFIND',\n\t'PROPPATCH',\n\t'PURGE',\n\t'PUT',\n\t'REPORT',\n\t'SEARCH',\n\t'SUBSCRIBE',\n\t'TRACE',\n\t'UNLOCK',\n\t'UNSUBSCRIBE'\n]\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","deps":{"url":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/url.js","builtin-status-codes":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/builtin-status-codes/browser.js","xtend":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/xtend/immutable.js","./lib/request":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/request.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/xmlhttprequest/lib/XMLHttpRequest.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/xmlhttprequest/lib/XMLHttpRequest.js","source":"(function (process,Buffer){\n\"use strict\";\n\n/**\n * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.\n *\n * This can be used with JS designed for browsers to improve reuse of code and\n * allow the use of existing libraries.\n *\n * Usage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.\n *\n * @author Dan DeFelippi <dan@driverdan.com>\n * @contributor David Ellis <d.f.ellis@ieee.org>\n * @license MIT\n */\n\nvar Url = require(\"url\");\nvar spawn = require(\"child_process\").spawn;\n\n\nexports.XMLHttpRequest = function () {\n  \"use strict\";\n\n  /**\n   * Private variables\n   */\n\n  var self = this;\n  var http = require(\"http\");\n  var https = require(\"https\");\n\n  // Holds http.js objects\n  var request;\n  var response;\n\n  // Request settings\n  var settings = {};\n\n  // Disable header blacklist.\n  // Not part of XHR specs.\n  var disableHeaderCheck = false;\n\n  // Set some default headers\n  var defaultHeaders = {\n    \"User-Agent\": \"node-XMLHttpRequest\",\n    \"Accept\": \"*/*\"\n  };\n\n  var headers = {};\n  var headersCase = {};\n\n  // These headers are not user setable.\n  // The following are allowed but banned in the spec:\n  // * user-agent\n  var forbiddenRequestHeaders = [\"accept-charset\", \"accept-encoding\", \"access-control-request-headers\", \"access-control-request-method\", \"connection\", \"content-length\", \"content-transfer-encoding\", \"cookie\", \"cookie2\", \"date\", \"expect\", \"host\", \"keep-alive\", \"origin\", \"referer\", \"te\", \"trailer\", \"transfer-encoding\", \"upgrade\", \"via\"];\n\n  // These request methods are not allowed\n  var forbiddenRequestMethods = [\"TRACE\", \"TRACK\", \"CONNECT\"];\n\n  // Send flag\n  var sendFlag = false;\n  // Error flag, used when errors occur or abort is called\n  var errorFlag = false;\n\n  // Event listeners\n  var listeners = {};\n\n  /**\n   * Constants\n   */\n\n  this.UNSENT = 0;\n  this.OPENED = 1;\n  this.HEADERS_RECEIVED = 2;\n  this.LOADING = 3;\n  this.DONE = 4;\n\n  /**\n   * Public vars\n   */\n\n  // Current state\n  this.readyState = this.UNSENT;\n\n  // default ready state change handler in case one is not set or is set late\n  this.onreadystatechange = null;\n\n  // Result & response\n  this.responseText = \"\";\n  this.responseXML = \"\";\n  this.status = null;\n  this.statusText = null;\n\n  // Whether cross-site Access-Control requests should be made using\n  // credentials such as cookies or authorization headers\n  this.withCredentials = false;\n\n  /**\n   * Private methods\n   */\n\n  /**\n   * Check if the specified header is allowed.\n   *\n   * @param string header Header to validate\n   * @return boolean False if not allowed, otherwise true\n   */\n  var isAllowedHttpHeader = function isAllowedHttpHeader(header) {\n    return disableHeaderCheck || header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1;\n  };\n\n  /**\n   * Check if the specified method is allowed.\n   *\n   * @param string method Request method to validate\n   * @return boolean False if not allowed, otherwise true\n   */\n  var isAllowedHttpMethod = function isAllowedHttpMethod(method) {\n    return method && forbiddenRequestMethods.indexOf(method) === -1;\n  };\n\n  /**\n   * Public methods\n   */\n\n  /**\n   * Open the connection. Currently supports local server requests.\n   *\n   * @param string method Connection method (eg GET, POST)\n   * @param string url URL for the connection.\n   * @param boolean async Asynchronous connection. Default is true.\n   * @param string user Username for basic authentication (optional)\n   * @param string password Password for basic authentication (optional)\n   */\n  this.open = function (method, url, async, user, password) {\n    this.abort();\n    errorFlag = false;\n\n    // Check for valid request method\n    if (!isAllowedHttpMethod(method)) {\n      throw new Error(\"SecurityError: Request method not allowed\");\n    }\n\n    settings = {\n      \"method\": method,\n      \"url\": url.toString(),\n      \"async\": typeof async !== \"boolean\" ? true : async,\n      \"user\": user || null,\n      \"password\": password || null\n    };\n\n    setState(this.OPENED);\n  };\n\n  /**\n   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.\n   * This does not conform to the W3C spec.\n   *\n   * @param boolean state Enable or disable header checking.\n   */\n  this.setDisableHeaderCheck = function (state) {\n    disableHeaderCheck = state;\n  };\n\n  /**\n   * Sets a header for the request or appends the value if one is already set.\n   *\n   * @param string header Header name\n   * @param string value Header value\n   */\n  this.setRequestHeader = function (header, value) {\n    if (this.readyState !== this.OPENED) {\n      throw new Error(\"INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN\");\n    }\n    if (!isAllowedHttpHeader(header)) {\n      console.warn(\"Refused to set unsafe header \\\"\" + header + \"\\\"\");\n      return;\n    }\n    if (sendFlag) {\n      throw new Error(\"INVALID_STATE_ERR: send flag is true\");\n    }\n    header = headersCase[header.toLowerCase()] || header;\n    headersCase[header.toLowerCase()] = header;\n    headers[header] = headers[header] ? headers[header] + ', ' + value : value;\n  };\n\n  /**\n   * Gets a header from the server response.\n   *\n   * @param string header Name of header to get.\n   * @return string Text of the header or null if it doesn't exist.\n   */\n  this.getResponseHeader = function (header) {\n    if (typeof header === \"string\" && this.readyState > this.OPENED && response && response.headers && response.headers[header.toLowerCase()] && !errorFlag) {\n      return response.headers[header.toLowerCase()];\n    }\n\n    return null;\n  };\n\n  /**\n   * Gets all the response headers.\n   *\n   * @return string A string with all response headers separated by CR+LF\n   */\n  this.getAllResponseHeaders = function () {\n    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {\n      return \"\";\n    }\n    var result = \"\";\n\n    for (var i in response.headers) {\n      // Cookie headers are excluded\n      if (i !== \"set-cookie\" && i !== \"set-cookie2\") {\n        result += i + \": \" + response.headers[i] + \"\\r\\n\";\n      }\n    }\n    return result.substr(0, result.length - 2);\n  };\n\n  /**\n   * Gets a request header\n   *\n   * @param string name Name of header to get\n   * @return string Returns the request header or empty string if not set\n   */\n  this.getRequestHeader = function (name) {\n    if (typeof name === \"string\" && headersCase[name.toLowerCase()]) {\n      return headers[headersCase[name.toLowerCase()]];\n    }\n\n    return \"\";\n  };\n\n  /**\n   * Sends the request to the server.\n   *\n   * @param string data Optional data to send as request body.\n   */\n  this.send = function (data) {\n    if (this.readyState !== this.OPENED) {\n      throw new Error(\"INVALID_STATE_ERR: connection must be opened before send() is called\");\n    }\n\n    if (sendFlag) {\n      throw new Error(\"INVALID_STATE_ERR: send has already been called\");\n    }\n\n    var ssl = false,\n        local = false;\n    var url = Url.parse(settings.url);\n    var host;\n    // Determine the server\n    switch (url.protocol) {\n      case \"https:\":\n        ssl = true;\n      // SSL & non-SSL both need host, no break here.\n      case \"http:\":\n        host = url.hostname;\n        break;\n\n      case \"file:\":\n        local = true;\n        break;\n\n      case undefined:\n      case null:\n      case \"\":\n        host = \"localhost\";\n        break;\n\n      default:\n        throw new Error(\"Protocol not supported.\");\n    }\n\n    // Load files off the local filesystem (file://)\n    if (local) {\n      if (settings.method !== \"GET\") {\n        throw new Error(\"XMLHttpRequest: Only GET method is supported\");\n      }\n\n      if (settings.async) {\n        fs.readFile(url.pathname, \"utf8\", function (error, data) {\n          if (error) {\n            self.handleError(error);\n          } else {\n            self.status = 200;\n            self.responseText = data;\n            setState(self.DONE);\n          }\n        });\n      } else {\n        try {\n          this.responseText = fs.readFileSync(url.pathname, \"utf8\");\n          this.status = 200;\n          setState(self.DONE);\n        } catch (e) {\n          this.handleError(e);\n        }\n      }\n\n      return;\n    }\n\n    // Default to port 80. If accessing localhost on another port be sure\n    // to use http://localhost:port/path\n    var port = url.port || (ssl ? 443 : 80);\n    // Add query string if one is used\n    var uri = url.pathname + (url.search ? url.search : \"\");\n\n    // Set the defaults if they haven't been set\n    for (var name in defaultHeaders) {\n      if (!headersCase[name.toLowerCase()]) {\n        headers[name] = defaultHeaders[name];\n      }\n    }\n\n    // Set the Host header or the server may reject the request\n    headers.Host = host;\n    if (!(ssl && port === 443 || port === 80)) {\n      headers.Host += \":\" + url.port;\n    }\n\n    // Set Basic Auth if necessary\n    if (settings.user) {\n      if (typeof settings.password === \"undefined\") {\n        settings.password = \"\";\n      }\n      var authBuf = new Buffer(settings.user + \":\" + settings.password);\n      headers.Authorization = \"Basic \" + authBuf.toString(\"base64\");\n    }\n\n    // Set content length header\n    if (settings.method === \"GET\" || settings.method === \"HEAD\") {\n      data = null;\n    } else if (data) {\n      headers[\"Content-Length\"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);\n\n      if (!headers[\"Content-Type\"]) {\n        headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\n      }\n    } else if (settings.method === \"POST\") {\n      // For a post with no data set Content-Length: 0.\n      // This is required by buggy servers that don't meet the specs.\n      headers[\"Content-Length\"] = 0;\n    }\n\n    var options = {\n      host: host,\n      port: port,\n      path: uri,\n      method: settings.method,\n      headers: headers,\n      agent: false,\n      withCredentials: self.withCredentials\n    };\n\n    // Reset error flag\n    errorFlag = false;\n\n    // Handle async requests\n    if (settings.async) {\n      // Use the proper protocol\n      var doRequest = ssl ? https.request : http.request;\n\n      // Request is being sent, set send flag\n      sendFlag = true;\n\n      // As per spec, this is called here for historical reasons.\n      self.dispatchEvent(\"readystatechange\");\n\n      // Handler for the response\n      var responseHandler = function responseHandler(resp) {\n        // Set response var to the response we got back\n        // This is so it remains accessable outside this scope\n        response = resp;\n        // Check for redirect\n        // @TODO Prevent looped redirects\n        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {\n          // Change URL to the redirect location\n          settings.url = response.headers.location;\n          var url = Url.parse(settings.url);\n          // Set host var in case it's used later\n          host = url.hostname;\n          // Options for the new request\n          var newOptions = {\n            hostname: url.hostname,\n            port: url.port,\n            path: url.path,\n            method: response.statusCode === 303 ? \"GET\" : settings.method,\n            headers: headers,\n            withCredentials: self.withCredentials\n          };\n\n          // Issue the new request\n          request = doRequest(newOptions, responseHandler).on(\"error\", errorHandler);\n          request.end();\n          // @TODO Check if an XHR event needs to be fired here\n          return;\n        }\n\n        response.setEncoding(\"utf8\");\n\n        setState(self.HEADERS_RECEIVED);\n        self.status = response.statusCode;\n\n        response.on(\"data\", function (chunk) {\n          // Make sure there's some data\n          if (chunk) {\n            self.responseText += chunk;\n          }\n          // Don't emit state changes if the connection has been aborted.\n          if (sendFlag) {\n            setState(self.LOADING);\n          }\n        });\n\n        response.on(\"end\", function () {\n          if (sendFlag) {\n            // Discard the end event if the connection has been aborted\n            setState(self.DONE);\n            sendFlag = false;\n          }\n        });\n\n        response.on(\"error\", function (error) {\n          self.handleError(error);\n        });\n      };\n\n      // Error handler for the request\n      var errorHandler = function errorHandler(error) {\n        self.handleError(error);\n      };\n\n      // Create the request\n      request = doRequest(options, responseHandler).on(\"error\", errorHandler);\n\n      // Node 0.4 and later won't accept empty data. Make sure it's needed.\n      if (data) {\n        request.write(data);\n      }\n\n      request.end();\n\n      self.dispatchEvent(\"loadstart\");\n    } else {\n      // Synchronous\n      // Create a temporary file for communication with the other Node process\n      var contentFile = \".node-xmlhttprequest-content-\" + process.pid;\n      var syncFile = \".node-xmlhttprequest-sync-\" + process.pid;\n      fs.writeFileSync(syncFile, \"\", \"utf8\");\n      // The async request the other Node process executes\n      var execString = \"var http = require('http'), https = require('https'), fs = require('fs');\" + \"var doRequest = http\" + (ssl ? \"s\" : \"\") + \".request;\" + \"var options = \" + JSON.stringify(options) + \";\" + \"var responseText = '';\" + \"var req = doRequest(options, function(response) {\" + \"response.setEncoding('utf8');\" + \"response.on('data', function(chunk) {\" + \"  responseText += chunk;\" + \"});\" + \"response.on('end', function() {\" + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');\" + \"fs.unlinkSync('\" + syncFile + \"');\" + \"});\" + \"response.on('error', function(error) {\" + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: error}), 'utf8');\" + \"fs.unlinkSync('\" + syncFile + \"');\" + \"});\" + \"}).on('error', function(error) {\" + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: error}), 'utf8');\" + \"fs.unlinkSync('\" + syncFile + \"');\" + \"});\" + (data ? \"req.write('\" + JSON.stringify(data).slice(1, -1).replace(/'/g, \"\\\\'\") + \"');\" : \"\") + \"req.end();\";\n      // Start the other Node Process, executing this string\n      var syncProc = spawn(process.argv[0], [\"-e\", execString]);\n      while (fs.existsSync(syncFile)) {\n        // Wait while the sync file is empty\n      }\n      var resp = JSON.parse(fs.readFileSync(contentFile, 'utf8'));\n      // Kill the child process once the file has data\n      syncProc.stdin.end();\n      // Remove the temporary file\n      fs.unlinkSync(contentFile);\n\n      if (resp.err) {\n        self.handleError(resp.err);\n      } else {\n        response = resp.data;\n        self.status = resp.data.statusCode;\n        self.responseText = resp.data.text;\n        setState(self.DONE);\n      }\n    }\n  };\n\n  /**\n   * Called when an error is encountered to deal with it.\n   */\n  this.handleError = function (error) {\n    this.status = 0;\n    this.statusText = error;\n    this.responseText = error.stack;\n    errorFlag = true;\n    setState(this.DONE);\n    this.dispatchEvent('error');\n  };\n\n  /**\n   * Aborts a request.\n   */\n  this.abort = function () {\n    if (request) {\n      request.abort();\n      request = null;\n    }\n\n    headers = defaultHeaders;\n    this.status = 0;\n    this.responseText = \"\";\n    this.responseXML = \"\";\n\n    errorFlag = true;\n\n    if (this.readyState !== this.UNSENT && (this.readyState !== this.OPENED || sendFlag) && this.readyState !== this.DONE) {\n      sendFlag = false;\n      setState(this.DONE);\n    }\n    this.readyState = this.UNSENT;\n    this.dispatchEvent('abort');\n  };\n\n  /**\n   * Adds an event listener. Preferred method of binding to events.\n   */\n  this.addEventListener = function (event, callback) {\n    if (!(event in listeners)) {\n      listeners[event] = [];\n    }\n    // Currently allows duplicate callbacks. Should it?\n    listeners[event].push(callback);\n  };\n\n  /**\n   * Remove an event callback that has already been bound.\n   * Only works on the matching funciton, cannot be a copy.\n   */\n  this.removeEventListener = function (event, callback) {\n    if (event in listeners) {\n      // Filter will return a new array with the callback removed\n      listeners[event] = listeners[event].filter(function (ev) {\n        return ev !== callback;\n      });\n    }\n  };\n\n  /**\n   * Dispatch any events, including both \"on\" methods and events attached using addEventListener.\n   */\n  this.dispatchEvent = function (event) {\n    if (typeof self[\"on\" + event] === \"function\") {\n      self[\"on\" + event]();\n    }\n    if (event in listeners) {\n      for (var i = 0, len = listeners[event].length; i < len; i++) {\n        listeners[event][i].call(self);\n      }\n    }\n  };\n\n  /**\n   * Changes readyState and calls onreadystatechange.\n   *\n   * @param int state New state\n   */\n  var setState = function setState(state) {\n    if (state == self.LOADING || self.readyState !== state) {\n      self.readyState = state;\n\n      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {\n        self.dispatchEvent(\"readystatechange\");\n      }\n\n      if (self.readyState === self.DONE && !errorFlag) {\n        self.dispatchEvent(\"load\");\n        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)\n        self.dispatchEvent(\"loadend\");\n      }\n    }\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n}).call(this,require('_process'),require(\"buffer\").Buffer)","deps":{"child_process":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/browserify/lib/_empty.js","_process":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process/browser.js","https":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/https-browserify/index.js","buffer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/buffer/index.js","url":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/url.js","http":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/index.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-request/build/d3-request.node.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-request/build/d3-request.node.js","source":"'use strict';\n\nvar XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar d3Collection = require('d3-collection');\nvar d3Dispatch = require('d3-dispatch');\nvar d3Dsv = require('d3-dsv');\n\nvar request = function request(url, callback) {\n  var request,\n      event = d3Dispatch.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n      _mimeType,\n      headers = d3Collection.map(),\n      xhr = new XMLHttpRequest(),\n      _user = null,\n      _password = null,\n      _response,\n      _responseType,\n      _timeout = 0;\n\n  // If IE does not support CORS, use XDomainRequest.\n  if (typeof XDomainRequest !== \"undefined\" && !(\"withCredentials\" in xhr) && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest();\n\n  \"onload\" in xhr ? xhr.onload = xhr.onerror = xhr.ontimeout = respond : xhr.onreadystatechange = function (o) {\n    xhr.readyState > 3 && respond(o);\n  };\n\n  function respond(o) {\n    var status = xhr.status,\n        result;\n    if (!status && hasResponse(xhr) || status >= 200 && status < 300 || status === 304) {\n      if (_response) {\n        try {\n          result = _response.call(request, xhr);\n        } catch (e) {\n          event.call(\"error\", request, e);\n          return;\n        }\n      } else {\n        result = xhr;\n      }\n      event.call(\"load\", request, result);\n    } else {\n      event.call(\"error\", request, o);\n    }\n  }\n\n  xhr.onprogress = function (e) {\n    event.call(\"progress\", request, e);\n  };\n\n  request = {\n    header: function header(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers.get(name);\n      if (value == null) headers.remove(name);else headers.set(name, value + \"\");\n      return request;\n    },\n\n    // If mimeType is non-null and no Accept header is set, a default is used.\n    mimeType: function mimeType(value) {\n      if (!arguments.length) return _mimeType;\n      _mimeType = value == null ? null : value + \"\";\n      return request;\n    },\n\n    // Specifies what type the response value should take;\n    // for instance, arraybuffer, blob, document, or text.\n    responseType: function responseType(value) {\n      if (!arguments.length) return _responseType;\n      _responseType = value;\n      return request;\n    },\n\n    timeout: function timeout(value) {\n      if (!arguments.length) return _timeout;\n      _timeout = +value;\n      return request;\n    },\n\n    user: function user(value) {\n      return arguments.length < 1 ? _user : (_user = value == null ? null : value + \"\", request);\n    },\n\n    password: function password(value) {\n      return arguments.length < 1 ? _password : (_password = value == null ? null : value + \"\", request);\n    },\n\n    // Specify how to convert the response content to a specific type;\n    // changes the callback value on \"load\" events.\n    response: function response(value) {\n      _response = value;\n      return request;\n    },\n\n    // Alias for send(\"GET\", …).\n    get: function get(data, callback) {\n      return request.send(\"GET\", data, callback);\n    },\n\n    // Alias for send(\"POST\", …).\n    post: function post(data, callback) {\n      return request.send(\"POST\", data, callback);\n    },\n\n    // If callback is non-null, it will be used for error and load events.\n    send: function send(method, data, callback) {\n      xhr.open(method, url, true, _user, _password);\n      if (_mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", _mimeType + \",*/*\");\n      if (xhr.setRequestHeader) headers.each(function (value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n      if (_mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(_mimeType);\n      if (_responseType != null) xhr.responseType = _responseType;\n      if (_timeout > 0) xhr.timeout = _timeout;\n      if (callback == null && typeof data === \"function\") callback = data, data = null;\n      if (callback != null && callback.length === 1) callback = fixCallback(callback);\n      if (callback != null) request.on(\"error\", callback).on(\"load\", function (xhr) {\n        callback(null, xhr);\n      });\n      event.call(\"beforesend\", request, xhr);\n      xhr.send(data == null ? null : data);\n      return request;\n    },\n\n    abort: function abort() {\n      xhr.abort();\n      return request;\n    },\n\n    on: function on() {\n      var value = event.on.apply(event, arguments);\n      return value === event ? request : value;\n    }\n  };\n\n  if (callback != null) {\n    if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    return request.get(callback);\n  }\n\n  return request;\n};\n\nfunction fixCallback(callback) {\n  return function (error, xhr) {\n    callback(error == null ? xhr : null);\n  };\n}\n\nfunction hasResponse(xhr) {\n  var type = xhr.responseType;\n  return type && type !== \"text\" ? xhr.response // null on error\n  : xhr.responseText; // \"\" on error\n}\n\nvar type = function type(defaultMimeType, response) {\n  return function (url, callback) {\n    var r = request(url).mimeType(defaultMimeType).response(response);\n    if (callback != null) {\n      if (typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      return r.get(callback);\n    }\n    return r;\n  };\n};\n\nvar html = type(\"text/html\", function (xhr) {\n  return document.createRange().createContextualFragment(xhr.responseText);\n});\n\nvar json = type(\"application/json\", function (xhr) {\n  return JSON.parse(xhr.responseText);\n});\n\nvar text = type(\"text/plain\", function (xhr) {\n  return xhr.responseText;\n});\n\nvar xml = type(\"application/xml\", function (xhr) {\n  var xml = xhr.responseXML;\n  if (!xml) throw new Error(\"parse error\");\n  return xml;\n});\n\nvar dsv = function dsv(defaultMimeType, parse) {\n  return function (url, row, callback) {\n    if (arguments.length < 3) callback = row, row = null;\n    var r = request(url).mimeType(defaultMimeType);\n    r.row = function (_) {\n      return arguments.length ? r.response(responseOf(parse, row = _)) : row;\n    };\n    r.row(row);\n    return callback ? r.get(callback) : r;\n  };\n};\n\nfunction responseOf(parse, row) {\n  return function (request$$1) {\n    return parse(request$$1.responseText, row);\n  };\n}\n\nvar csv = dsv(\"text/csv\", d3Dsv.csvParse);\n\nvar tsv = dsv(\"text/tab-separated-values\", d3Dsv.tsvParse);\n\nexports.request = request;\nexports.html = html;\nexports.json = json;\nexports.text = text;\nexports.xml = xml;\nexports.csv = csv;\nexports.tsv = tsv;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-dispatch":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js","d3-collection":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-collection/build/d3-collection.js","d3-dsv":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dsv/build/d3-dsv.js","xmlhttprequest":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/xmlhttprequest/lib/XMLHttpRequest.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3/build/d3.node.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3/build/d3.node.js","source":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar d3Array = require('d3-array');\nvar d3Axis = require('d3-axis');\nvar d3Brush = require('d3-brush');\nvar d3Chord = require('d3-chord');\nvar d3Collection = require('d3-collection');\nvar d3Color = require('d3-color');\nvar d3Dispatch = require('d3-dispatch');\nvar d3Drag = require('d3-drag');\nvar d3Dsv = require('d3-dsv');\nvar d3Ease = require('d3-ease');\nvar d3Force = require('d3-force');\nvar d3Format = require('d3-format');\nvar d3Geo = require('d3-geo');\nvar d3Hierarchy = require('d3-hierarchy');\nvar d3Interpolate = require('d3-interpolate');\nvar d3Path = require('d3-path');\nvar d3Polygon = require('d3-polygon');\nvar d3Quadtree = require('d3-quadtree');\nvar d3Queue = require('d3-queue');\nvar d3Random = require('d3-random');\nvar d3Request = require('d3-request');\nvar d3Scale = require('d3-scale');\nvar d3Selection = require('d3-selection');\nvar d3Shape = require('d3-shape');\nvar d3Time = require('d3-time');\nvar d3TimeFormat = require('d3-time-format');\nvar d3Timer = require('d3-timer');\nvar d3Transition = require('d3-transition');\nvar d3Voronoi = require('d3-voronoi');\nvar d3Zoom = require('d3-zoom');\n\nvar version = \"4.11.0\";\n\nexports.version = version;\nObject.keys(d3Array).forEach(function (key) {\n  exports[key] = d3Array[key];\n});\nObject.keys(d3Axis).forEach(function (key) {\n  exports[key] = d3Axis[key];\n});\nObject.keys(d3Brush).forEach(function (key) {\n  exports[key] = d3Brush[key];\n});\nObject.keys(d3Chord).forEach(function (key) {\n  exports[key] = d3Chord[key];\n});\nObject.keys(d3Collection).forEach(function (key) {\n  exports[key] = d3Collection[key];\n});\nObject.keys(d3Color).forEach(function (key) {\n  exports[key] = d3Color[key];\n});\nObject.keys(d3Dispatch).forEach(function (key) {\n  exports[key] = d3Dispatch[key];\n});\nObject.keys(d3Drag).forEach(function (key) {\n  exports[key] = d3Drag[key];\n});\nObject.keys(d3Dsv).forEach(function (key) {\n  exports[key] = d3Dsv[key];\n});\nObject.keys(d3Ease).forEach(function (key) {\n  exports[key] = d3Ease[key];\n});\nObject.keys(d3Force).forEach(function (key) {\n  exports[key] = d3Force[key];\n});\nObject.keys(d3Format).forEach(function (key) {\n  exports[key] = d3Format[key];\n});\nObject.keys(d3Geo).forEach(function (key) {\n  exports[key] = d3Geo[key];\n});\nObject.keys(d3Hierarchy).forEach(function (key) {\n  exports[key] = d3Hierarchy[key];\n});\nObject.keys(d3Interpolate).forEach(function (key) {\n  exports[key] = d3Interpolate[key];\n});\nObject.keys(d3Path).forEach(function (key) {\n  exports[key] = d3Path[key];\n});\nObject.keys(d3Polygon).forEach(function (key) {\n  exports[key] = d3Polygon[key];\n});\nObject.keys(d3Quadtree).forEach(function (key) {\n  exports[key] = d3Quadtree[key];\n});\nObject.keys(d3Queue).forEach(function (key) {\n  exports[key] = d3Queue[key];\n});\nObject.keys(d3Random).forEach(function (key) {\n  exports[key] = d3Random[key];\n});\nObject.keys(d3Request).forEach(function (key) {\n  exports[key] = d3Request[key];\n});\nObject.keys(d3Scale).forEach(function (key) {\n  exports[key] = d3Scale[key];\n});\nObject.keys(d3Selection).forEach(function (key) {\n  exports[key] = d3Selection[key];\n});\nObject.keys(d3Shape).forEach(function (key) {\n  exports[key] = d3Shape[key];\n});\nObject.keys(d3Time).forEach(function (key) {\n  exports[key] = d3Time[key];\n});\nObject.keys(d3TimeFormat).forEach(function (key) {\n  exports[key] = d3TimeFormat[key];\n});\nObject.keys(d3Timer).forEach(function (key) {\n  exports[key] = d3Timer[key];\n});\nObject.keys(d3Transition).forEach(function (key) {\n  exports[key] = d3Transition[key];\n});\nObject.keys(d3Voronoi).forEach(function (key) {\n  exports[key] = d3Voronoi[key];\n});\nObject.keys(d3Zoom).forEach(function (key) {\n  exports[key] = d3Zoom[key];\n});\nObject.defineProperty(exports, \"event\", { get: function get() {\n    return d3Selection.event;\n  } });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"d3-axis":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-axis/build/d3-axis.js","d3-array":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-array/build/d3-array.js","d3-collection":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-collection/build/d3-collection.js","d3-color":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-color/build/d3-color.js","d3-dispatch":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js","d3-format":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-format/build/d3-format.js","d3-ease":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-ease/build/d3-ease.js","d3-hierarchy":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-hierarchy/build/d3-hierarchy.js","d3-dsv":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dsv/build/d3-dsv.js","d3-polygon":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-polygon/build/d3-polygon.js","d3-path":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-path/build/d3-path.js","d3-queue":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-queue/build/d3-queue.js","d3-quadtree":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-quadtree/build/d3-quadtree.js","d3-random":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-random/build/d3-random.js","d3-time":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time/build/d3-time.js","d3-selection":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-selection/build/d3-selection.js","d3-voronoi":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-voronoi/build/d3-voronoi.js","d3-timer":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-timer/build/d3-timer.js","d3-drag":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-drag/build/d3-drag.js","d3-brush":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-brush/build/d3-brush.js","d3-chord":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-chord/build/d3-chord.js","d3-force":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-force/build/d3-force.js","d3-interpolate":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-interpolate/build/d3-interpolate.js","d3-scale":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-scale/build/d3-scale.js","d3-shape":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-shape/build/d3-shape.js","d3-time-format":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time-format/build/d3-time-format.js","d3-zoom":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-zoom/build/d3-zoom.js","d3-geo":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-geo/build/d3-geo.js","d3-transition":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-transition/build/d3-transition.js","d3-request":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-request/build/d3-request.node.js"}},"/Users/mathisonian/projects/442/idyll-walkthrough/components/custom-component.js":{"file":"/Users/mathisonian/projects/442/idyll-walkthrough/components/custom-component.js","source":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar React = require('react');\nvar d3 = require('d3');\n\nvar size = 600;\nvar squareSize = 30;\n\nvar CustomComponent = function (_React$Component) {\n  _inherits(CustomComponent, _React$Component);\n\n  function CustomComponent() {\n    _classCallCheck(this, CustomComponent);\n\n    return _possibleConstructorReturn(this, (CustomComponent.__proto__ || Object.getPrototypeOf(CustomComponent)).apply(this, arguments));\n  }\n\n  _createClass(CustomComponent, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          hasError = _props.hasError,\n          updateProps = _props.updateProps,\n          props = _objectWithoutProperties(_props, ['hasError', 'updateProps']);\n\n      var columns = this.props.columns;\n      var totalElements = this.props.totalElements;\n\n      return React.createElement(\n        'svg',\n        { viewBox: '0 0 ' + size + ' ' + size },\n        d3.range(totalElements).map(function (i) {\n          return React.createElement('rect', {\n            x: squareSize * (i % columns),\n            y: squareSize * Math.floor(i / columns),\n            width: squareSize,\n            height: squareSize,\n            fill: (i + (columns % 2 === 0 ? Math.floor(i / columns) % 2 : 0)) % 2 === 0 ? 'black' : 'white' });\n        })\n      );\n    }\n  }]);\n\n  return CustomComponent;\n}(React.Component);\n\nmodule.exports = CustomComponent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImN1c3RvbS1jb21wb25lbnQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiZDMiLCJzaXplIiwic3F1YXJlU2l6ZSIsIkN1c3RvbUNvbXBvbmVudCIsInByb3BzIiwiaGFzRXJyb3IiLCJ1cGRhdGVQcm9wcyIsImNvbHVtbnMiLCJ0b3RhbEVsZW1lbnRzIiwicmFuZ2UiLCJtYXAiLCJpIiwiTWF0aCIsImZsb29yIiwiQ29tcG9uZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsSUFBTUEsUUFBUUMsUUFBUSxPQUFSLENBQWQ7QUFDQSxJQUFNQyxLQUFLRCxRQUFRLElBQVIsQ0FBWDs7QUFFQSxJQUFNRSxPQUFPLEdBQWI7QUFDQSxJQUFNQyxhQUFhLEVBQW5COztJQUVNQyxlOzs7Ozs7Ozs7Ozs2QkFDSztBQUFBLG1CQUNxQyxLQUFLQyxLQUQxQztBQUFBLFVBQ0NDLFFBREQsVUFDQ0EsUUFERDtBQUFBLFVBQ1dDLFdBRFgsVUFDV0EsV0FEWDtBQUFBLFVBQzJCRixLQUQzQjs7QUFHUCxVQUFNRyxVQUFVLEtBQUtILEtBQUwsQ0FBV0csT0FBM0I7QUFDQSxVQUFNQyxnQkFBZ0IsS0FBS0osS0FBTCxDQUFXSSxhQUFqQzs7QUFFQSxhQUVFO0FBQUE7QUFBQSxVQUFLLGtCQUFnQlAsSUFBaEIsU0FBd0JBLElBQTdCO0FBRUlELFdBQUdTLEtBQUgsQ0FBU0QsYUFBVCxFQUF3QkUsR0FBeEIsQ0FBNEIsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2pDLGlCQUFPO0FBQ0wsZUFBR1QsY0FBY1MsSUFBSUosT0FBbEIsQ0FERTtBQUVMLGVBQUdMLGFBQWFVLEtBQUtDLEtBQUwsQ0FBV0YsSUFBSUosT0FBZixDQUZYO0FBR0wsbUJBQU9MLFVBSEY7QUFJTCxvQkFBUUEsVUFKSDtBQUtMLGtCQUFNLENBQUNTLEtBQUtKLFVBQVUsQ0FBVixLQUFnQixDQUFoQixHQUFxQkssS0FBS0MsS0FBTCxDQUFXRixJQUFJSixPQUFmLElBQTBCLENBQS9DLEdBQW9ELENBQXpELENBQUQsSUFBZ0UsQ0FBaEUsS0FBc0UsQ0FBdEUsR0FBMEUsT0FBMUUsR0FBb0YsT0FMckYsR0FBUDtBQU1ELFNBUEQ7QUFGSixPQUZGO0FBaUJEOzs7O0VBeEIyQlQsTUFBTWdCLFM7O0FBMkJwQ0MsT0FBT0MsT0FBUCxHQUFpQmIsZUFBakIiLCJmaWxlIjoiY3VzdG9tLWNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGQzID0gcmVxdWlyZSgnZDMnKTtcblxuY29uc3Qgc2l6ZSA9IDYwMDtcbmNvbnN0IHNxdWFyZVNpemUgPSAzMDtcblxuY2xhc3MgQ3VzdG9tQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGFzRXJyb3IsIHVwZGF0ZVByb3BzLCAuLi5wcm9wcyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLnByb3BzLmNvbHVtbnM7XG4gICAgY29uc3QgdG90YWxFbGVtZW50cyA9IHRoaXMucHJvcHMudG90YWxFbGVtZW50cztcblxuICAgIHJldHVybiAoXG5cbiAgICAgIDxzdmcgdmlld0JveD17YDAgMCAke3NpemV9ICR7c2l6ZX1gfT5cbiAgICAgICAge1xuICAgICAgICAgIGQzLnJhbmdlKHRvdGFsRWxlbWVudHMpLm1hcCgoaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxyZWN0XG4gICAgICAgICAgICAgIHg9e3NxdWFyZVNpemUgKiAoaSAlIGNvbHVtbnMpfVxuICAgICAgICAgICAgICB5PXtzcXVhcmVTaXplICogTWF0aC5mbG9vcihpIC8gY29sdW1ucyl9XG4gICAgICAgICAgICAgIHdpZHRoPXtzcXVhcmVTaXplfVxuICAgICAgICAgICAgICBoZWlnaHQ9e3NxdWFyZVNpemV9XG4gICAgICAgICAgICAgIGZpbGw9eyhpICsgKGNvbHVtbnMgJSAyID09PSAwID8gKE1hdGguZmxvb3IoaSAvIGNvbHVtbnMpICUgMikgOiAwKSkgJSAyID09PSAwID8gJ2JsYWNrJyA6ICd3aGl0ZSd9IC8+XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgPC9zdmc+XG5cblxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDdXN0b21Db21wb25lbnQ7XG4iXX0=","deps":{"react":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js","d3":"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3/build/d3.node.js"}}},"mtimes":{"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react/umd/react.production.min.js":1506441048000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom/umd/react-dom.production.min.js":1506441069000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-components/dist/cjs/header.js":1508613666000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/scrollparent/scrollparent.js":1491850013000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/scrollmonitor/scrollMonitor.js":1508271716000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/polyfill.js":1442874226000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/polyfill.js":1442874238000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/utils/index.js":1510126891000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/react-dom-factories/index.js":1506384322000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/shim.js":1464636969000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/shim.js":1464637158000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/implementation.js":1444179008000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.values/index.js":1455403325000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case/upper-case.js":1450225475000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case/lower-case.js":1487963775000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/foreach/index.js":1411366736000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/implementation.js":1503905842000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/function-bind/index.js":1503905842000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/non-word-regexp.js":1504891248000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/camel-case-regexp.js":1504891248000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/vendor/camel-case-upper-regexp.js":1504891743000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object-keys/isArguments.js":1444860088000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object-keys/index.js":1467738758000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/define-properties/index.js":1444860996000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/assign.js":1501515990000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/has/src/index.js":1437727640000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/no-case/no-case.js":1483587492000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/swap-case/swap-case.js":1450224535000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/dot-case/dot-case.js":1465683190000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/path-case/path-case.js":1465683916000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/camel-case/camel-case.js":1465692324000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/snake-case/snake-case.js":1465682439000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/title-case/title-case.js":1465682916000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/param-case/param-case.js":1465683469000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/header-case/header-case.js":1489797238000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/pascal-case/pascal-case.js":1465692678000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/constant-case/constant-case.js":1465692977000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-upper-case/is-upper-case.js":1450225224000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/sentence-case/sentence-case.js":1465681491000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-lower-case/is-lower-case.js":1450224095000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/upper-case-first/upper-case-first.js":1450224223000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/lower-case-first/lower-case-first.js":1450223949000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/change-case/change-case.js":1465694171000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/utils/schema2element.js":1510126891000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isNaN.js":1464643773000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isFinite.js":1438151861000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/sign.js":1438151861000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/mod.js":1438151861000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/helpers/isPrimitive.js":1438151861000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-callable/index.js":1456620083000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/helpers/isPrimitive.js":1446348326000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-regex/index.js":1487404978000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-symbol/index.js":1422136394000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-date-object/index.js":1443359521000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/es6.js":1451871294000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-to-primitive/es5.js":1451870275000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es5.js":1501752520000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es2015.js":1506736583000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es2016.js":1506727688000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/es-abstract/es7.js":1501472591000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/implementation.js":1444179017000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/object.entries/index.js":1455403172000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-document/dist/cjs/index.js":1510126890000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll/src/client/build.js":1508613567000,"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/header.js":1510077578000,"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/select.js":1510077578000,"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/range.js":1510077578000,"/Users/mathisonian/projects/442/idyll-walkthrough/components/default/text-input.js":1510090992000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/idyll-d3-component/lib.js":1508570442000,"/Users/mathisonian/projects/442/idyll-walkthrough/components/my-d3-component.js":1510267843000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-axis/build/d3-axis.js":1496888358000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-array/build/d3-array.js":1506199571000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-collection/build/d3-collection.js":1498061637000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-color/build/d3-color.js":1489169544000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dispatch/build/d3-dispatch.js":1489169467000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-format/build/d3-format.js":1491245126000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-ease/build/d3-ease.js":1489169210000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-hierarchy/build/d3-hierarchy.js":1497037395000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-dsv/build/d3-dsv.js":1504273608000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-polygon/build/d3-polygon.js":1489168590000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-path/build/d3-path.js":1489168665000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-queue/build/d3-queue.js":1494350260000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-quadtree/build/d3-quadtree.js":1489168513000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-random/build/d3-random.js":1493832184000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time/build/d3-time.js":1497478099000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-selection/build/d3-selection.js":1494869703000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-voronoi/build/d3-voronoi.js":1489170197000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-timer/build/d3-timer.js":1504456324000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-drag/build/d3-drag.js":1507050297000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-brush/build/d3-brush.js":1489169702000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-chord/build/d3-chord.js":1489170068000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-force/build/d3-force.js":1506785759000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-interpolate/build/d3-interpolate.js":1494873799000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-scale/build/d3-scale.js":1494875111000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-shape/build/d3-shape.js":1494947135000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-time-format/build/d3-time-format.js":1489167884000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-zoom/build/d3-zoom.js":1507050683000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-geo/build/d3-geo.js":1506805015000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-transition/build/d3-transition.js":1494871776000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/browserify/lib/_empty.js":1507585867000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process/browser.js":1493209628000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/https-browserify/index.js":1491348645000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/util.js":1440689626000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/punycode/punycode.js":1458437195000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/builtin-status-codes/browser.js":1467230205000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/ieee754/index.js":1434057757000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/base64-js/index.js":1498100169000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/buffer/index.js":1506726685000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/capability.js":1494288558000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/xtend/immutable.js":1446502746000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/decode.js":1413226718000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/encode.js":1413226718000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/querystring-es3/index.js":1413226718000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/url/url.js":1440689626000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/inherits/inherits_browser.js":1368715198000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/response.js":1494287851000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/to-arraybuffer/index.js":1452655725000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/browser-resolve/empty.js":1453686679000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/events/events.js":1466610820000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/stream-browser.js":1491638677000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_duplex.js":1498722843000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_transform.js":1498722842000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_passthrough.js":1498722843000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/isarray/index.js":1449741881000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/util-deprecate/browser.js":1444242970000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/process-nextick-args/index.js":1462394229000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/safe-buffer/index.js":1498076348000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/is-buffer/index.js":1508966858000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/core-util-is/lib/util.js":1447979840000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_writable.js":1498745827000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/BufferList.js":1498722842000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/internal/streams/destroy.js":1498722842000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/string_decoder/lib/string_decoder.js":1498155080000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/lib/_stream_readable.js":1498745827000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/readable-stream/readable-browser.js":1491548765000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/lib/request.js":1494288581000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/stream-http/index.js":1494287851000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/xmlhttprequest/lib/XMLHttpRequest.js":1444593804000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3-request/build/d3-request.node.js":1504389219000,"/Users/mathisonian/projects/442/idyll-walkthrough/node_modules/d3/build/d3.node.js":1507051458000,"/Users/mathisonian/projects/442/idyll-walkthrough/components/custom-component.js":1510267952000},"dependentFiles":{}}